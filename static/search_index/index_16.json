{"/PicoW_S3_doc/zh_tw/Arduino/Basic.html": {"title": "板載資源的使用", "content": "# 板載資源的使用\n\n本章主要是通過一些示例項目，闡述 PicoW-S3 主控板的外設基本使用方法，通過下面的項目，您可以進行修改完成您的自己的項目。\n其中 PicoW-S3 外設主要包括：UART、I2C、SPI、ADC、PWM、DAC等。\n\n## 開始之前的準備\n\nBPI-PicoW-S3 開發板上的MicorUSB使用的是ESP32-S3的原生USB接口，而不是傳統的USB轉TLL芯片。\n\n為了讓您的開發板能正確下載程序，您需要將BPI-PicoW-S3設置為下載模式，有以下兩種方法：\n\n- 通過USB連接到電腦，使用鑷子將BOOT短接，再按一下Reset鍵並鬆開，最後斷開BOOT短接。\n\n- 在斷開所有供電的狀態下，將BOOT短接，然後將開發板插上電腦，最後斷開BOOT短接。\n\n![](../assets/images/PicoW-BOOT.png)\n\n這時候可以在設備管理器中看到一個多的COM口\n\n![](../assets/images/Device_manager.jpg)\n\n在IDE中選擇這個端口\n\n![](../assets/images/Device_manager_1.jpg)\n\n##  項目一 串口實驗\n\n在最開始的章節中，我們上傳了一個 Blink 閃爍程序來測試板子上的 LED 狀態燈。現在，我們使用 UART 串口，每秒打印一次計時數據。\n\n### 所需元件\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### 硬件連接 \n\n此項目不需要其他傳感器，所以只需要把PicoW-S3用USB連到電腦就能用。\n\n### 輸入代碼 \n\n打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。\n\n代碼如下:  \n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\nvoid setup() \n{\n  Serial.begin(115200);         //設置串口通信波特率\n} \nvoid loop() \n{\n  static unsigned long i = 0;   //定義變量i\n  Serial.println(i++);          //i加一後輸出i\n  delay(1000);                  //延時1秒\n} \n</code></pre>\n</details>\n\n輸入完成後，點擊“編譯”檢查代碼有無錯誤。確保沒有錯誤後就可以開始上傳了，點擊“上傳”之後 IDE 會把代碼發送給 PicoW-S3 主板。上傳完成之後，你需要按一下復位鍵，這樣代碼就能正常運行了\n\n### 實驗現象\n\n完成之前步驟的上傳後，打開 Arduino IDE 自帶的串口監視器，可以看到如下的打印信息： \n\n![](../assets/images/Lesson1-1.png)\n\n## 項目二 PWM(呼吸燈)\n\n呼吸燈，即讓 PicoW-S3 通過 PWM 驅動 LED 燈，實現 LED 的亮度漸變，看起來就像是在呼吸一樣。關於 PWM 的解釋，請閱覽知識擴展部分。\n\n### 所需元件\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\nLED X 1 (建議串聯一個電阻限流)\n\n![](../assets/images/led.png)\n\n### 硬件連接\n\n將LED連接到PicoW-S3的GPIO13就可以了，長的那個腳接GPIO13，短的接到GND\n\n### 輸入代碼 \n\n打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。\n代碼如下: \n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\n#define LED_CHANNEL_0     0    //設置通道0 \n#define LED_TIMER_13_BIT  13   //設置13位定時器\n#define LED_BASE_FREQ     5000 //設置定時器頻率位5000Hz \n#define LED_PIN            13  //設置LED燈 \n\nint brightness = 0;    // LED亮度\nint fadeAmount = 1;    // LED數量\n \n//設置led燈的亮度 \nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255) { \n  //計算佔空比 \n  uint32_t duty = (LED_BASE_FREQ / valueMax) * min(value, valueMax); \n  //設置佔空比 \n  ledcWrite(LED_CHANNEL_0, duty); \n}  \nvoid setup() { \n  ledcSetup(LED_CHANNEL_0, LED_BASE_FREQ, LED_TIMER_13_BIT);   ledcAttachPin(LED_PIN, LED_CHANNEL_0); \n}  \nvoid loop() { \n  ledcAnalogWrite(brightness);   brightness += fadeAmount; \n \n  if (brightness <= 0 || brightness >= 255) { \n       fadeAmount = -fadeAmount; \n  }   \n  delay(30); \n}\n\n</code></pre>\n</details>\n\n輸入完成後，點擊“編譯”按鈕檢查代碼是否有錯誤。確定沒有錯誤後可以開始上傳了，點擊“上傳”按鈕 。 IDE 會把代碼發送給 PicoW-S3 主板。上傳完成後您就可以看見Type-C旁邊的LED 燈開始“呼吸”了！\n現在讓我們來回顧一下代碼和硬件，看看它是如何工作。\n\n### 知識學習\n\n什麼是 PWM 控制信號？\n\nPWM（pulse-width modulation）脈衝寬度調製，MCU（微控制器）通過對開關器件的通斷進行控制，使輸出端得到一系列幅值相等的脈衝，用這些脈衝來代替正弦波或所需的波形。如下圖所示：\n\n![](../assets/images/Lesson2-1.jpg)\n\n其中，tON 是高電平持續時間，tPWM 是 PWM 波的周期，tPWM-tON 是低電平持續時間，佔空比是指高電平持續時間佔整個週期的比例，即 D=ton/tPWM 。\n\n### 代碼分析\n\nPicoW-S3 的 PWM 比普通的 Arduino UNO 高級的多，設置上不能簡單的使用analogWrite 函數來驅動 PWM，而是需要設置 timer 函數，以及相關的頻率參數等才能工作。\n\n```\n#define LEDC_CHANNEL_0     0\n```\n\n定義了定時器使用的通道，PicoW-S3 總共有 16 個通道，這裡用的是通道 0。\n\n```\n#define LEDC_TIMER_13_BIT  13\n```\n\n定義了定時器為 13 位定時器，即定時器最大計數為 2 的 13 次方。\n\n```\n#define LEDC_BASE_FREQ     5000\n```\n\n這是設置定時器的頻率，單位是 Hz。接下來的 brightness 和 fadeAmount 參數分別表示 PWM 的佔空比和每次變化的數值。\n\n```\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255)\n```\n\n這個函數是計算 PWM 佔空比和設置 PWM 佔空比，類似 Arduino 的 analogWrite 函數，可以看到，傳遞參數的最大值是 255，這是為了和 analogWrite 兼容。\n\n```\nledcSetup(LEDC_CHANNEL_0, LEDC_BASE_FREQ, LEDC_TIMER_13_BIT); \n\t       ledcAttachPin(LED_PIN, LEDC_CHANNEL_0);\n```\n\n這兩個函數是 PicoW-S3 定時器設置函數，函數原型及原理這裡不講述，如果您感興趣可以看看底層源碼（源碼地址：C:\\Users\\“your-PC”\\AppData\\Local\\Arduino15\\packages\\esp32\\ hardware\\ adafruit_metro_esp32s2 \\0.0.3\\libraries\\ESP32\\），這裡只需要知道怎麼用這些函數來設置相關的 timer 就可以了。\n\n關於什麼是 PWM 信號，在前面已經闡述過了，這裡不再說明。\n\n>注意：PicoW-S3 的任何引腳都可以配置成 PWM 輸出，您可以嘗試著修改代碼，完成您的項目。\n\n## 項目三 ADC \n\nADC（模數轉換器即 A/D 轉換器），是指將模擬信號轉變成數字信號。 PicoW-S3 的ADC 是13位的，最大輸出值為 8191，而 Arduino UNO 是 10 位的，最大輸出值是 1023，因此，在精度上比Arduino UNO 要高，而且轉換速率快，且在使用上兼容 Arduino analogRead 函數，直接讀取即可。\n\n### 所需元件 \n\n模擬角度傳感器 X 1\n\n![](../assets/images/Lesson3-1.png)\n\n麵包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### 硬件連接 \n\n 把 電位計插接到 PicoW-S3 主板上，然後將模擬角度傳感器插接到 IO2（實驗中用的是IO2）。元件連接好後，使用 USB 線連接 PicoW-S3 和電腦。\n\n ### 輸入代碼\n\n 打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。代碼如下: \n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\n void setup() { \n  // put your setup code here, to run once: \n  Serial.begin(115200); \n}  \nvoid loop() { \n  // put your main code here, to run repeatedly:   \n  Serial.println(analogRead(2));  \n  delay(100); \n}\n\n</code></pre>\n</details>\n\n 輸入完成後，點擊“編譯”檢查代碼有無錯誤。確保沒有錯誤後就可以開始上傳了，點擊“上傳”之後IDE 會把代碼發送給 PicoW-S3 主板。上傳完成後，打開 Arduino IDE 的串口監視器，旋轉模擬角度傳感器，可以看到串口監視器中的數值變化，如下圖所示：\n\n \n![](../assets/images/Lesson3-3.png)\n\n### 代碼分析\n\n由於PicoW-S3 的 ADC 在使用上完全兼容 Arduino，因此這裡不再對analogRead 函數進行過多的講解。\n \n注意：如果您對 Arduino 的基本函數不是特別熟悉，您可以[點擊鏈接](https://www.arduino.cc/en/Tutorial/BuiltInExamples)進行學習。\n\n## 項目四 I2C\n\nPicoW-S3 的 I2C 可以配置到任意 I/O 口，您可以通過傳遞相關參數進行配置。為了方便使用，我們已經將 I2C 進行了默認配置，在使用上完全兼容 Arduino，默認配置引腳可以在第一章簡介中查看到。本項目是基於 I2C 默認配置，驅動 OLED 顯示屏。\n\n所需元件\n\nI2C OLED-12864 顯示屏 X 1 \n\n![](../assets/images/Lesson4-1.png)\n\n麵包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### 硬件連接\n\n把PicoW-S3 主板插到麵包板上，然後將 OLED顯示屏插接到 I2C 接口。 （SDA是33，SCL是34）元件連接好後，使用 USB 線連接 PicoW-S3 和電腦。\n\n### 輸入代碼 \n\n打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。代碼如下:\n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\n#include <Wire.h> \n   int UG2864Address = 0x3C;//OLED UG2864器件7位地址 \n \nprog_char F8X16[][16] PROGMEM =\n{\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0\n  0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1\n  0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//\"2\n  0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3\n  0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4\n  0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5\n  0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6\n  0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7\n  0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8\n  0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9\n  0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10\n  0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14\n  0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016\n  0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117\n  0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218\n  0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319\n  0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420\n  0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521\n  0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622\n  0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723\n  0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925\n  0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26\n  0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27\n  0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28\n  0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29\n  0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30\n  0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31\n  0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32\n  0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33\n  0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34\n  0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35\n  0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38\n  0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40\n  0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41\n  0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42\n  0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43\n  0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44\n  0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45\n  0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47\n  0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49\n  0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50\n  0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51\n  0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53\n  0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54\n  0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55\n  0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56\n  0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57\n  0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58\n  0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59\n  0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\\60\n  0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61\n  0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63\n  0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65\n  0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66\n  0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67\n  0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69\n  0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71\n  0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72\n  0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73\n  0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74\n  0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75\n  0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76\n  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77\n  0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79\n  0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80\n  0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81\n  0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83\n  0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84\n  0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86\n  0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87\n  0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89\n  0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90\n  0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91\n  0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92\n  0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93\n  0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94\n};\n \n \n字符 ch_buf[17]={0};\nint RES = 6;//小工具 PIN6\nint DC = 7;//小工具 PIN3\n \nvoid Writec(unsigned char COM)\n{\n  Wire.beginTransmission(UG2864地址);\n  Wire.write(0x00);\n  Wire.write(COM);\n  Wire.endTransmission();\n}\n \n無效寫入（無符號字符數據）\n{\n  Wire.beginTransmission(UG2864地址);\n  Wire.write(0x40);\n  Wire.write(DATA);\n  Wire.endTransmission();\n}\n \n無效 SSD1306()\n{\n  Writec(0XAE);//顯示關閉\n  writec(0X00);//設置低列地址\n  writec(0X10);//設置更高的列地址\n  writec(0X40);//設置顯示起始行\n  writec(0XB0);//設置頁面地址\n  writec(0X81);//設置合約控制\n  Writec(0XCF);// 內部 DC/DC 電路產生的 VCC\n  writec(0XA0);//設置段重映射列地址127映射到SEG0\n  writec(0XA6);//正常/反轉正常顯示\n  writec(0XA8);//復用比\n  寫c(0X3F);//1/64\n  Writec(0XC0);//Com掃描方向重映射模式。從 COM[N-1] 掃描到 COM0\n  writec(0XD3);//設置顯示偏移\n  寫c(0X00);\n  writec(0XD5);//設置osc除法\n  寫c（0X80）；\n  writec(0XD9);//設置預充電週期\n  寫c（0X11）；\n  Writec(0XDa);//設置COM pins\n  Writec(0X12);\n  Writec(0X8d);/*set charge pump enable*/\n  Writec(0X14);\n  Writec(0Xdb);//Set VcomH\n  Writec(0X20);\n  Writec(0XAF);//display ON\n}\nvoid fill(unsigned char dat)\n{\n  unsigned char i,j;\n  \n  Writec(0x00);//set lower column address\n  Writec(0x10);//set higher column address\n  Writec(0xB0);//set page address\n  \n  for(j=0;j<8;j++)\n  {\n    Writec(0xB0+j);//set page address\n    Writec(0x00);//set lower column address\n    Writec(0x10);//set higher column address\n    for(i=0;i<128;i++)\n    {\n      Writed(dat);\n    }\n  }\n}\n \nvoid show_string(unsigned char x,unsigned char y,char *s)\n{\n  unsigned char i,j,lower,higher;\n  char *t;\n  t=s;\n  lower=y%16;\n  higher=y/16;\n  if((x>3) || (y>120))\n    return;\n  Writec(0xB0+x*2);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  for(j=0;*s!='\\0';j++)\n  {\n    \n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n  Writec(0xB0+x*2+1);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  s=t;\n  for(j=0;*s!='\\0';j++)\n  {\n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i+8]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n}\n \n \n \nvoid oled_init(void)\n{\n  pinMode(RES,OUTPUT);//RES\n  pinMode(DC,OUTPUT);//D/C#\n  \n  digitalWrite(DC,LOW);\n  Wire.begin();\n  digitalWrite(RES,HIGH);   delay(100);\n  digitalWrite(RES,LOW);    delay(100);\n  digitalWrite(RES,HIGH);   delay(100);\n  SSD1306();\n  fill(0x00);\n}\n \nvoid setup() {\n  oled_init();\n}\n \n \nvoid loop()\n{\n      fill(0x00);\n      show_string(0,12,\"BananaPi\");\n \n      show_string(2,12,\"banana-pi.org\");\n      while(1);\n}\n\n\n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  \t会把代码发送给 PicoW-S3 主板。上传完成后，OLED 显示屏会显示“BananaPi banana-pi.org”字样。\n\n### 代码分析\n\n本项目的代码相对于前面的项目较多，主要是基于 I2C 通信对 OLED 显示屏底层寄存器的直接驱动。\n\n```\nvoid Writec(unsigned char COM)\n```\n\n设置寄存器函数，通过 I2C 对 OLED 显示屏设置，I2C 使用方法完全兼容 Arduino。 \n\n```\nvoid Writed(unsigned char DATA)\n```\n\n写数据函数，I2C 使用方法完全兼容 Arduino。 \n\n>注意：PicoW-S3 的 I2C 与 Arduino 完全兼容，主要是调用 Wire 库文件使用。\n\n## 项目五 SPI\n\n在很多传感器中，都使用 SPI 通信，因为 SPI 通信速率相对于 I2C 更快，没有地址冲突的弊端。SPI，是  一种高速的、全双工、同步的通信总线，而 PicoW-S3 的 SPI 可以配置到所有 I/O，您可以阅览底层  代码进行使用（初学者不建议使用）。为了更好的使用体验，PicoW-S3 默认情况下配置了IO35、IO36、IO37 为 SPI 口，在使用上则完全兼容 Arduino。 本项目使用 PicoW-S3，通过 SPI 读取 BME280 温湿度传感器的数据，示例中使用的是BME280 库文件，关于 SPI 驱动您可以阅览 BEM280 库文件，[点击链接](https://github.com/DFRobot/DFRobot_BME280)下载 BME280 库文件。 \n\n### 所需元件 \n\nBME280 温湿度传感器 X 1\n\n![](../assets/images/Lesson5-1.png)\n\n>注意：BME280 传感器本身支持 I2C 和 SPI 通信，这里我们采用 SPI 通信。 \n\n面包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### 输入代码\n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 （这个程序需要DFRobot_BME280库，需要在[GitHub](https://github.com/DFRobot/DFRobot_BME280)下载，解压到Arduino\\ Library 文件夹下 ）代码如下：\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n/*!\n * read_data_spi.ino\n *\n * Download this demo to test read data from bme280, connect sensor through spi interface\n * Connect cs pin to io 2\n * Data will print on your serial monitor\n *\n * Copyright   [DFRobot](http://www.dfrobot.com), 2016\n * Copyright   GNU Lesser General Public License\n *\n * version  V1.0\n * date  12/03/2019\n */\n\n#include \"DFRobot_BME280.h\"\n#include \"Wire.h\"\n\ntypedef DFRobot_BME280_SPI    BME;    // ******** use abbreviations instead of full names ********\n\n# define PIN_CS   2\n\nBME   bme(&SPI, PIN_CS);   // select TwoWire peripheral and set cs pin id\n\n#define SEA_LEVEL_PRESSURE    1015.0f\n\n// show last sensor operate status\nvoid printLastOperateStatus(BME::eStatus_t eStatus)\n{\n  switch(eStatus) {\n  case BME::eStatusOK:    Serial.println(\"everything ok\"); break;\n  case BME::eStatusErr:   Serial.println(\"unknow error\"); break;\n  case BME::eStatusErrDeviceNotDetected:    Serial.println(\"device not detected\"); break;\n  case BME::eStatusErrParameter:    Serial.println(\"parameter error\"); break;\n  default: Serial.println(\"unknow status\"); break;\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  bme.reset();\n  Serial.println(\"bme read data test\");\n  while(bme.begin() != BME::eStatusOK) {\n    Serial.println(\"bme begin faild\");\n    printLastOperateStatus(bme.lastOperateStatus);\n    delay(2000);\n  }\n  Serial.println(\"bme begin success\");\n  delay(100);\n}\n\nvoid loop()\n{\n  float   temp = bme.getTemperature();\n  uint32_t    press = bme.getPressure();\n  float   alti = bme.calAltitude(SEA_LEVEL_PRESSURE, press);\n  float   humi = bme.getHumidity();\n\n  Serial.println();\n  Serial.println(\"======== start print ========\");\n  Serial.print(\"temperature (unit Celsius): \"); Serial.println(temp);\n  Serial.print(\"pressure (unit pa):         \"); Serial.println(press);\n  Serial.print(\"altitude (unit meter):      \"); Serial.println(alti);\n  Serial.print(\"humidity (unit percent):    \"); Serial.println(humi);\n  Serial.println(\"========  end print  ========\");\n\n  delay(1000);\n}\n\n\n</code></pre>\n</details>\n\n 輸入完成後，點擊“編譯”檢查代碼有無錯誤。確保沒有錯誤後就可以開始上傳了，點擊“上傳”之後 IDE  會把代碼發送給 PicoW-S3 主板。打開 Arduino 串口監視器，可以看到打印信息如下： \n\n![](../assets/images/Lesson5-2.png)\n\n### 代碼分析\n\n 本項目採用的是 BME280 庫文件，在 Item-5.ino 文件中並沒有對 SPI 底層進行操作，不過，PicoW  ESP32-S3 的 SPI 使用完全兼容 Arduino。\n\n## 項目六 WS2812\n\n PicoW-S3 集成了一個型號為WS2812的RGB彩燈。本項目是點亮 PicoW-S3 的RGB彩燈的實驗，\n\n### 所需元件\n\nLPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n>注意：該項目不需要連接其他傳感器。\n\n### 輸入代碼\n\n打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。 （這個程序需要Adafruit_NeoPixel庫，需要在[GitHub](https://github.com/adafruit/Adafruit_NeoPixel)下載，解壓到Arduino\\ Library 文件夾下）代碼如下:\n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\n// NeoPixel Ring simple sketch (c) 2013 Shae Erisson\n// Released under the GPLv3 license to match the rest of the\n// Adafruit NeoPixel library\n\n#include <Adafruit_NeoPixel.h>\n#ifdef __AVR__\n #include <avr/power.h> // Required for 16 MHz Adafruit Trinket\n#endif\n\n// Which pin on the Arduino is connected to the NeoPixels?\n#define PIN        18 // On Trinket or Gemma, suggest changing this to 1\n\n// How many NeoPixels are attached to the Arduino?\n#define NUMPIXELS 1 // Popular NeoPixel ring size\n\n// When setting up the NeoPixel library, we tell it how many pixels,\n// and which pin to use to send signals. Note that for older NeoPixel\n// strips you might need to change the third parameter -- see the\n// strandtest example for more information on possible values.\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n\n#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels\n\nvoid setup() {\n  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.\n  // Any other board, you can remove this part (but no harm leaving it):\n#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)\n  clock_prescale_set(clock_div_1);\n#endif\n  // END of Trinket-specific code.\n\n  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)\n}\n\nvoid loop() {\n  pixels.clear(); // Set all pixel colors to 'off'\n\n  // The first NeoPixel in a strand is #0, second is 1, all the way up\n  // to the count of pixels minus one.\n  for(int i=0; i < NUMPIXELS; i++) { // For each pixel...\n\n    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255\n    // Here we're using a moderately bright green color:\n    pixels.setPixelColor(i, pixels.Color(0, 150, 0));\n\n    pixels.show();   // Send the updated pixel colors to the hardware.\n\n    delay(DELAYVAL); // Pause before next pass through loop\n  }\n}\n</code></pre>\n</details>\n\n輸入完成後，點擊“編譯”檢查代碼有無錯誤。確保沒有錯誤後就可以開始上傳了，點擊“上傳”之後 IDE  會把代碼發送給 PicoW-S3 主板。復位後WS2812燈會開始亮綠燈，\n\n>注意：如果需要其他顏色，可以修改代碼中的RGB值。\n\n### 代碼分析\n\n本項目使用 PicoW-S3 集成的WS2812燈，默認GPIO是48。\n\n```\n#define PIN        48\n```\n\n設置GPIO引腳號\n\n```\n#define NUMPIXELS 1 \n```\n\n設置燈的個數，如果您想連接更多WS2812，可以換一個IO，並修改燈的數量。\n\n## 項目七 觸摸傳感器\n\nPicoW-S3 提供了多達 14 個電容式傳感器 GPIO，能夠探測由手指或其他物品直接接觸或接近而產生的電容差異。這種低噪聲特性和電路的高靈敏度設計適用於較小的觸摸板，可以直接用於觸摸開關。本項目闡述瞭如何通過Arduino 代碼獲取 PicoW-S3 的觸摸傳感器狀態，並打印狀態。\n\n### 所需元件\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n>注意：該項目不需要連接其他傳感器。\n\n### 輸入代碼\n\n打開 Arduino IDE。儘管可以直接複製代碼，我們還是建議您自己手動輸入代碼熟悉下。\n\n代碼如下:\n\n<details>\n<summary>展開查看</summary>\n\n<pre><code>\n void setup() \n{ \n  Serial.begin(115200); \n      delay(1000); // give me time to bring up serial monitor \n      Serial.println(\"PicoW-S3 Touch Test\");    \n}  \nvoid loop(){ \n  Serial.println(touchRead(T2));  // get value using T0->D9  \n  delay(100); \n} \n\n</code></pre>\n</details>\n\n輸入完成後，點擊“編譯”檢查代碼有無錯誤。確保沒有錯誤後就可以開始上傳了，點擊“上傳”之後 IDE  會把代碼發送給 PicoW-S3 主板。打開 Arduino IDE 串口監視器，並用手觸摸 GPIO2（T2 對應的是GPIO2），可以看到會打印出的數據突然變小，如下圖所示： \n\n![](../assets/images/Lesson8-1.png)\n\n### 代碼分析\n\n獲取觸摸傳感器的 GPIO 狀態，只需要調用 touchRead 函數，函數原型如下：\n\n```\n uint16_t touchRead(uint8_t pin)\n```\n\n返回“0”表示沒有觸摸，“1”表示觸摸。其中 pin 是 T0~T9，對應到 PicoW 的引腳如下表所示：\n\n<table>\n   <tr>\n      <td></td>\n   </tr>\n   <tr>\n      <td>觸摸傳感器序號 </td>\n      <td>對應的 ESP32 硬件 </td>\n      <td>PicoW-S3</td>\n      <td> </td>\n   </tr>\n   <tr>\n      <td>T1</td>\n      <td>GPIO1</td>\n      <td>IO1</td>\n   </tr>\n   <tr>\n      <td>T2 </td>\n      <td>GPIO2 </td>\n      <td>IO2</td>\n   </tr>\n   <tr>\n      <td>T3 </td>\n      <td>GPIO3</td>\n      <td>IO3</td>\n   </tr>\n   <tr>\n      <td>T4 </td>\n      <td>GPIO4</td>\n      <td>IO4</td>\n   </tr>\n   <tr>\n      <td>T5 </td>\n      <td>GPIO5</td>\n      <td>IO5</td>\n   </tr>\n   <tr>\n      <td>T6 </td>\n      <td>GPIO6</td>\n      <td>IO6</td>\n   </tr>\n   <tr>\n      <td>T7 </td>\n      <td>GPIO7</td>\n      <td>IO7</td>\n   </tr>\n   <tr>\n      <td>T8 </td>\n      <td>GPIO8</td>\n      <td>IO8</td>\n   </tr>\n   <tr>\n      <td>T9 </td>\n      <td>GPIO9</td>\n      <td>IO9</td>\n   </tr>\n   <tr>\n      <td>T10</td>\n      <td>GPIO10</td>\n      <td>IO10</td>\n   </tr>\n   <tr>\n      <td>T11</td>\n      <td>GPIO11</td>\n      <td>IO11</td>\n   </tr>\n   <tr>\n      <td>T12</td>\n      <td>GPIO12</td>\n      <td>IO12</td>\n   </tr>\n   <tr>\n      <td>T13</td>\n      <td>GPIO13</td>\n      <td>IO13</td>\n   </tr>\n   <tr>\n      <td>T14</td>\n      <td>GPIO14</td>\n      <td>IO14</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>"}, "/PicoW_S3_doc/zh_tw/Arduino/Environment.html": {"title": "環境搭建", "content": "# 環境搭建\n\n由於板子的大小，PicoW-S3 的 Arduino 使用會比較複雜，我們不建議您使用 PicoW-S3 來學習 Arduino。本文將指導您為 PicoW-S3 安裝 Arduino 支持。\n![](../assets/images/logo_arduino.png)\n\n> 參考 [arduino-esp32 DOC 入門 » 安裝](https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html)\n\n## 使用 Arduino IDE 安裝支持\n\n以下是直接從 Arduino IDE 安裝 Arduino-ESP32 的方法。\n\n> 從 Arduino IDE 版本 1.6.4 開始，Arduino 允許使用 Boards Manager 安裝第三方平台包。有適用於 Windows、macOS 和 Linux 的軟件包。\n\nArduino IDE下載地址：https://www.arduino.cc/en/software\n\n> Arduino IDE 2.0 的 UI 與 Arduino IDE 1.8.x 的 UI 略有不同。本文基於1.8.13版本，但不影響使用2.0版本的用戶參考。\n\n要使用 Boards Managaer 安裝 esp32 平台包，請執行以下步驟：\n\n- 安裝當前的上游 Arduino IDE 1.8 或更高版本。\n\n- 啟動 Arduino 並打開 File > Preferences 窗口並找到 Additional Board Manager URL。\n\n![](../assets/images/install_guide_preferences.png)\n\n- 穩定版鏈接：\n````\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n````\n- 開發版鏈接：\n````\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json\n````\n- 在其他董事會經理 URL 之後輸入上述發布鏈接之一。您可以添加多個 URL，每行一個。\n\n![](../assets/images/install_guide_boards_manager_url.png)\n\n從菜單中打開 Tools > Board > Board Manager 搜索並安裝 esp32 平台。\n\n![](../assets/images/install_guide_boards_manager_esp32.png)\n\n重啟arduino IDE後，可以看到開發板選項裡面多了ESP32 Arduino選項。\n\n選擇型號`ESP32S3 Dev Module`，然後按照下圖所示內容進行配置。不能使用不正確的配置。請務必按照下圖所示內容進行配置！\n\n![](../assets/images/Board_chose.jpg)"}, "/PicoW_S3_doc/zh_tw/index.html": {"title": "【 BPI-PicoW-S3 開發板 】", "content": "# 【 BPI-PicoW-S3 開發板 】\n\n## 介紹\n\n![](assets/images/BPI-PicoW-S3_banner.jpg)\n\n香蕉派BPI-PicoW是一款低功耗微控制器，專為物聯網開發和Maker DIY設計的開發板。與 Raspberry Pi Pico 板尺寸相同，支持 2.4 GHz Wi-Fi 和 Bluetooth® LE 雙模無線通信， 外設兼容低功耗硬件設計，深度睡眠模式下功耗僅為10uA。編程方面，PicoW-S3支持ESP-IDF、Arduino、micropython、CircuitPython 等多種方式\n\n## 使用 CircuitPython 編程\n\n> BPI-PicoW-S3出廠已安裝tinyUF2與CircuitPython固件,推薦通過CircuitPython快速上手BPI-PicoW-S3開發板。\n\n![](assets/images/CircuitPython_Repo_header_logo.jpg)\n\nCircuitPython是旨在簡化在單片機開發板上進行編程實驗和學習的一種編程語言。\n\n配合Mu編輯器進行CircuitPython編程是最低難度的上手方法，安裝軟件，連接設備即可開始使用。\n\n## 使用 MicroPython 編程\n\n![](assets/images/Mircopython.png)\n\nMicroPython實現了大部分Python 3 特性和語法，易學易上手，驗證程序效果無需編譯直接下載進芯片運行。\n\n無論是否有編程基礎，MicroPython的上手難度絕對遠低於其他編程語言，其代碼易讀性高，且開源社區有多年積累的豐富資源，就如同Python一樣擁有極強的生命力與應用價值。\n\n通過燒寫 MicroPython 固件，就可以在開發板中使用 Python 語言進行編程。\n## 使用 Arduino 編程\n\n提供了入門 Arduino 的軟件工具和最佳示例，降低進入 ESP32 嵌入式專業開發的門檻。\n\n![](assets/images/Arduino_logo_1200x350.png)\n\n>Arduino 將不會闡述過多基礎內容，請具備 C/C++ 的語言開發基礎。\n\n## 資料與資源\n\n- [官方WIKI](https://wiki.banana-pi.org/BPI-PicoW-S3_%E5%BC%80%E5%8F%91%E6%9D%BF) \n\n- [GitHub: BPI-PicoW-S3 開發板原理圖PDF](https://github.com/BPI-STEAM/BPI-PicoW-Doc/blob/main/sch/BPI-PicoW-V0.4.pdf) \n\n- [ESP32-S3 技術規格書](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 技術參考手冊](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)\n\n## 樣品購買\n\n- [官方速賣通](https://www.aliexpress.com/item/1005004775634442.html?spm=5261.ProductManageOnline.0.0.15744edfAyCaNk)\n\n- [官方淘寶](https://item.taobao.com/item.htm?spm=a2126o.success.0.0.25b04831CHV1Nc&id=684134360199)\n\n- OEM&OEM 定制服務 ： sales@banana-pi.com"}, "/PicoW_S3_doc/zh_tw/Unboxing/Introduction.html": {"title": "【 開發板介紹 】", "content": "# 【 開發板介紹 】\n\nBPI-PicoW-S3板載ESP32-S3芯片，支持 2.4 GHz Wi-Fi 和低功耗藍牙 (Bluetooth® LE) 雙模無線通信。板子支持USB和IO供電兩種供電方式，可實現雙電源下自動切換電源功能。體積小巧，接口方便，上手簡單，可直接應用於物聯網低功耗項目。\n\nBPI-PicoW-S3開發板在軟件方面支持ESP-IDF、Arduino、MicroPython等多種方式進行編程開發 。\n\nBPI-PicoW-S3開發板上標記了與芯片對應的所有IO管腳，外形與Raspberry Pico W開發板一致，開發者可根據實際需求，可將Raspberry Pico W支持的外圍設備添加到BPI-PicoW-S3上，也可將開發板插在麵包板上使用。\n\n## 關鍵特性\n\n- ESP32-S3，Xtensa® 32 bit LX7\n- 片上外設 PSRAM , 片外 FLASH\n- Ultra-low power 10uA\n- 2.4G WIFI ，Bluetooth 5 ，Bluetooth mesh\n- GPIO , ADC , TOUCH , PWM , I2C , SPI , RMT , I2S , UART , LCD，CAMERA ，USB , JTAG\n- 1 * MicroUSB\n- 1 * 全彩色LED\n\n## 硬件\n\n### 接口示意圖\n\n![](../assets/images/PicoW-S3_board.png)\n\n### 硬件規格\n\n<table>\n   <tr>\n      <td>BPI-PicoW-S3 規格表</td>\n   </tr>\n   <tr>\n      <td>SoC主控芯片</td>\n      <td>ESP32-S3，Xtensa® 32 位 LX7 雙核處理器</td>\n   </tr>\n   <tr>\n      <td>主頻</td>\n      <td>240MHz MAX</td>\n   </tr>\n   <tr>\n      <td>工作溫度</td>\n      <td>-40℃~+85℃</td>\n   </tr>\n   <tr>\n      <td>片上 ROM</td>\n      <td>384 KB</td>\n   </tr>\n   <tr>\n      <td>片上 SRAM</td>\n      <td>320 KB</td>\n   </tr>\n   <tr>\n      <td>片外 FLASH ROM</td>\n      <td>8MB</td>\n   </tr>\n   <tr>\n      <td>片上外設 PSRAM</td>\n      <td>2MB</td>\n   </tr>\n   <tr>\n      <td>WIFI</td>\n      <td>IEEE 802.11 b/g/n ，2.4Ghz頻帶，150Mbps</td>\n   </tr>\n   <tr>\n      <td>藍牙</td>\n      <td>Bluetooth 5 ，Bluetooth mesh</td>\n   </tr>\n   <tr>\n      <td>GPIO</td>\n      <td>BPI-PicoW-S3已引出27個可用GPIO</td>\n   </tr>\n   <tr>\n      <td>ADC</td>\n      <td>2 × 12 位 SAR ADC，支持 20 個模擬通道輸入</td>\n   </tr>\n   <tr>\n      <td>TOUCH 電容式觸摸傳感器</td>\n      <td>14</td>\n   </tr>\n   <tr>\n      <td>SPI</td>\n      <td>4</td>\n   </tr>\n   <tr>\n      <td>I2C</td>\n      <td>2，支持主機或從機模式</td>\n   </tr>\n   <tr>\n      <td>I2S</td>\n      <td>2，串行立體聲數據的輸入輸出</td>\n   </tr>\n   <tr>\n      <td>LCD</td>\n      <td>1，支持 8 位 ~16 位並行 RGB、I8080、MOTO6800 接口</td>\n   </tr>\n   <tr>\n      <td>CAMERA</td>\n      <td>1，支持 8 位 ~16 位 DVP 圖像傳感器接口</td>\n   </tr>\n   <tr>\n      <td>UART</td>\n      <td>3 ，支持異步通信（RS232 和RS485）和 IrDA</td>\n   </tr>\n   <tr>\n      <td>PWM</td>\n      <td>8 路獨立通道，14位精度</td>\n   </tr>\n   <tr>\n      <td>MCPWM</td>\n      <td>2</td>\n   </tr>\n   <tr>\n      <td>USB</td>\n      <td>1 × 全速USB 2.0 OTG，MicroUSB母口</td>\n   </tr>\n   <tr>\n      <td>USB Serial/JTAG 控制器</td>\n      <td>1，USB 全速標準，CDC-ACM ，JTAG</td>\n   </tr>\n   <tr>\n      <td>溫度傳感器</td>\n      <td>1，測量範圍為–20 °C 到 110 °C，用於監測芯片內部溫度</td>\n   </tr>\n   <tr>\n      <td>SD/MMC</td>\n      <td>1 × SDIO主機接口，具有2個卡槽，支持SD卡3.0和3.01，SDIO 3.0，CE-ATA 1.1，MMC 4.41，eMMC 4.5和4.51</td>\n   </tr>\n   <tr>\n      <td>TWAI® 控制器</td>\n      <td>1 ，兼容 ISO11898-1（CAN 規範 2.0）</td>\n   </tr>\n   <tr>\n      <td>通用 DMA 控制器</td>\n      <td>5 個接收通道和 5 個發送通道</td>\n   </tr>\n   <tr>\n      <td>RMT</td>\n      <td>4 通道發射，4通道接收，共享 384 x 32-bit 的 RAM</td>\n   </tr>\n   <tr>\n      <td>脈衝計數器</td>\n      <td>4個脈衝計數控制器（單元），每個單元有2個獨立的通道</td>\n   </tr>\n   <tr>\n      <td>定時器</td>\n      <td>4 × 54 位通用定時器，16 位時鐘預分頻器，1 × 52 位系統定時器，3 × 看門狗定時器</td>\n   </tr>\n   <tr>\n      <td>外部晶振</td>\n      <td>40Mhz</td>\n   </tr>\n   <tr>\n      <td>RTC 和低功耗管理</td>\n      <td>電源管理單元 (PMU)+ 超低功耗協處理器 (ULP)</td>\n   </tr>\n   <tr>\n      <td>低功耗電流</td>\n      <td>10uA</td>\n   </tr>\n   <tr>\n      <td>工作電壓</td>\n      <td>3.3V</td>\n   </tr>\n   <tr>\n      <td>輸入電壓</td>\n      <td>3.3V~5.5V</td>\n   </tr>\n   <tr>\n      <td>最大放電電流</td>\n      <td>2A@3.3V DC/DC</td>\n   </tr>\n   <tr>\n      <td>可控全彩色LED</td>\n      <td>1</td>\n   </tr>\n</table>\n\n\n### 硬件尺寸\n\n\n![](../assets/images/PicoW-S3_board_dimension.png)\n\n<table>\n   <tr>\n      <td>BPI-PicoW-S3 尺寸表</td>\n   </tr>\n   <tr>\n      <td>管腳間距</td>\n      <td>2.54mm</td>\n   </tr>\n   <tr>\n      <td>安裝孔間距</td>\n      <td>11.4mm/ 47mm</td>\n   </tr>\n   <tr>\n      <td>安裝孔尺寸</td>\n      <td>內徑2.1mm/外徑3.4mm</td>\n   </tr>\n   <tr>\n      <td>主板尺寸</td>\n      <td>21 × 51.88(mm)/0.83 x 2.04(inches)</td>\n   </tr>\n   <tr>\n      <td>板厚</td>\n      <td>1.2mm</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n管腳間距兼容萬能板（洞洞板、點陣板），麵包板，並且能直接貼在其他PCB上，便於調試應用。\n\n## 資料與資源\n\n- [GitHub: BPI-PicoW-S3 開發板原理圖PDF](https://github.com/BPI-STEAM/BPI-PicoW-Doc/blob/main/sch/BPI-PicoW-V0.4.pdf) \n\n- [ESP32-S3 技術規格書](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 技術參考手冊](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)"}, "/PicoW_S3_doc/zh_tw/Unboxing/Gettingstart.html": {"title": "", "content": "施工中"}, "/PicoW_S3_doc/zh_tw/Programming/Basic.html": {"title": "", "content": "施工中"}, "/PicoW_S3_doc/zh_tw/Programming/Environment.html": {"title": "", "content": "施工中"}, "/PicoW_S3_doc/zh_tw/Programming/Firmware.html": {"title": "", "content": "施工中"}, "/PicoW_S3_doc/zh_tw/no_translate.html": {"title": "no_translate_title", "content": "---\ntitle: no_translate_title\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">no_translate_hint</div>\n<div>\n    <span id=\"visit_hint\">visit_hint</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}