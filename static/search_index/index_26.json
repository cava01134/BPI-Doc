{"/WebAI/zh_tw/MoonCar/MoonCar.html": {"title": "五、操控 MoonCar", "content": "# 五、操控 MoonCar\n\n![](../assets/images/upload_3873f6904888518d624142d07ba04302.png)\n<img src=\"../assets/images/upload_326bf9bc32fc249a00653000a153f85d.png\" width = \"357\" alt=\"图片名称\" /> <img src=\"../assets/images/upload_8e98c3d36fd19f13f6d1b663e752e86c.png\" width = \"357\" alt=\"图片名称\" />\n\n## 顏色偵測\n\n這個例子顏色偵測使用的是 MoonCar 上面的 TCS34725 感測器，可用來偵測顏色。\n先使用 class TCS34725 驅動感測器，進行打光和讀取顏色值。\n\n <img src=\"../assets/images/upload_4d4613a146aca71af6b235cb1e420a0c.png\" width = \"232\" alt=\"图片名称\" /> <img src=\"../assets/images/upload_3d0d9b773a839bc6f1b0389e497370a4.png\" width = \"232\" alt=\"图片名称\" /> <img src=\"../assets/images/upload_3d97627ea1cbecae280f35770f7fa107.png\" width = \"232\" alt=\"图片名称\" />\n\n```python\nfrom webai_blockly import TCS34725\nfrom webai import *\nfrom machine import I2C\n\ni2c = I2C(id=3, freq=100000, scl=17, sda=15) #1920\n\npinB=16 # light\nfm.fpioa.set_function(pinB,fm.fpioa.GPIO6)\ngpioB=GPIO(GPIO.GPIO6,GPIO.OUT)\ngpioB.value(0)\n\ns = TCS34725(i2c)\nimg = webai.snapshot()\nimg.clear()\nv = 100\nwhile True:\n   time.sleep_ms(200)\n   try:\n      data = s.read(raw=True)\n      data = (data[0]+v,data[1]+v,data[2]+v)\n      print(data)\n      img.draw_string(2,2, \"Color\", color=data, scale=11)\n      lcd.display(img)\n   except Exception as e:\n      print(e)\n```\n\n## 循跡自走\n\n小車沿著黑線移動。\n\n<iframe src=\"https://www.youtube.com/embed/D6cet80DZvM\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n```python\nfrom webai import *\n\nspeed = 60\ncarType = 1\n\ndef tracking(pin):\n    global carType,speed\n\n    left = p15.value()\n    right = p16.value()\n    msg = str(left)+\" : \"+str(right)\n\n    if left == 0 and right == 0:\n        if carType == 1:\n            mcar.forward(speed)\n        elif carType == 2:\n            mcar.move(0,speed)\n        elif carType == 3:\n            mcar.move(speed,0)\n\n    if left == 1 and right == 1:\n        carType = 1\n        mcar.forward(speed)\n    \n    if left == 1 and right == 0:\n        carType = 2\n        mcar.move(0,speed)\n    \n    if left == 0 and right == 1:\n        carType = 3\n        mcar.move(speed,0)\n\np15 = webai.io.pin(15,pull_mode=webai.io.PULL_NONE)\np15.irq(tracking,GPIO.IRQ_BOTH)\np16 = webai.io.pin(16,pull_mode=webai.io.PULL_NONE)\np16.irq(tracking,GPIO.IRQ_BOTH)\n```\n\n## 循跡 + 物件追蹤\n\n沿著黑線移動，看見紅色小怪獸停車，看見綠色小怪獸繼續前進。\n\n<iframe src=\"https://www.youtube.com/embed/PNbYPFdmBk0\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n- 第 58 行 ～ 第 61 行：判斷處\n\n```python\nfrom webai import *\n\nspeed = 60\ncarType = 1\n\ndef tracking(pin):\n    global carType,speed\n \n    left = p15.value()\n    right = p16.value()\n    msg = str(left)+\" : \"+str(right)\n\n    if left == 0 and right == 0:\n        if carType == 1:\n            mcar.forward(speed)\n        elif carType == 2:\n            mcar.move(0,speed)\n        elif carType == 3:\n            mcar.move(speed,0)\n\n    if left == 1 and right == 1:\n        carType = 1\n        mcar.forward(speed)\n    \n    if left == 1 and right == 0:\n        carType = 2\n        mcar.move(0,speed)\n    \n    if left == 0 and right == 1:\n        carType = 3\n        mcar.move(speed,0)\n    \n    #webai.draw_string(140,100,msg,scale=2)\n\np15 = webai.io.pin(15,pull_mode=webai.io.PULL_NONE)\np15.irq(tracking,GPIO.IRQ_BOTH)\np16 = webai.io.pin(16,pull_mode=webai.io.PULL_NONE)\np16.irq(tracking,GPIO.IRQ_BOTH)\n\n\nfrom webai_blockly import ObjectTracking\nfrom time import sleep\nfrom webai_blockly import Lcd\n\nobjGroup = None\nobj = None\n\nview = Lcd()\n\n_deviceID = '6e5596'\n\n\notb = ObjectTracking(flip=1, model='monster', classes=['green','red','yellow','blue'], threshold=0.1, w=320, h=224)\nwhile True:\n  otb.checkObjects()\n  green = otb.getObjects('green')\n  red = otb.getObjects('red')\n  if (len(red)) >= 1:\n    mcar.stop()\n  if (len(green)) >= 1:\n    tracking(None)\n\n  sleep(0.001)\n```\n\n## 馬達控制\n\n### 前進\n\n```python\nmcar.forward() # 100% 動力前進\n\nmcar.forward(100) # 100% 動力前進\n\nmcar.forward(50) # 50% 動力前進\n```\n\n### 後退\n\n```python\nmcar.backward() # 100% 動力後退\n\nmcar.backward(100) # 100% 動力後退\n```\n\n### 停止\n\n```python\nmcar.stop() # 停止\n\nmcar.forward(0) # 停止\n\nmcar.backward(0) # 停止\n```\n\n### 左轉\n\n```python\nmcar.left(100) # 100% 動力左轉\n\nmcar.left(30)  # 30% 動力左轉\n```\n\n### 右轉\n\n```python\nmcar.right(100) # 100% 動力右轉\n\nmcar.right(30)  # 30% 動力右轉\n```\n### 左右輪\n\n- ==mcar.move( 左輪 , 右輪 )==\n- 數值區間：-100 ~ 100\n\n```python\nfrom webai import *\nmcar.move( 100 , 100) # 100% 前進\n```\n\n#### 參考設定\n\n```python\nmcar.move( -100 , -100) # 100% 後退\n\nmcar.move( 45 , -45 ) # 向右轉\n\nmcar.move( -45 , 45 ) # 向左轉\n\nmcar.move(0,0) # 停止\n```\n\n## 相關感測器\n\n### 超音波：距離偵測\n\n利用發送超音波碰撞物體之後反射回來的時間差，來得出感測器與物體之間的距離。\n\n> 使用前請記得先接上超音波感測器！\n\n```python\nfrom fpioa_manager import *\nfrom modules import hcsr04\nimport time\nfm.register(6, fm.fpioa.GPIO0, force = True)\nfm.register(11, fm.fpioa.GPIO1, force = True)\n\ndevice = hcsr04(fm.fpioa.GPIO0,fm.fpioa.GPIO1)\n\nwhile True:\n    try:\n        print(device.measure(hcsr04.UNIT_CM,100000))\n        time.sleep(0.05)\n    #except IDE interrupt\n    except Exception as e:\n        print(e)\n        if(str(e)==\"IDE interrupt\"):\n            break\n```\n\n### 紅外線：無線控制\n\n![](../assets/images/upload_74c8803f271749db2115168b09413649.png)\n\n接收遙控器發射的紅外線訊號，並顯示到螢幕上。\n\n```python\nimport lcd, image, utime\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\nimg = image.Image()\nfm.register(25, fm.fpioa.GPIOHS1)\npin=GPIO(GPIO.GPIOHS1,GPIO.IN,GPIO.PULL_UP)\n\ndef read_data():\n   a = []\n   while pin.value() == 1:\n       pass\n   utime.sleep_us(13560)\n   for i in range(1000):\n       v = pin.value()\n       a.append(v)\n       utime.sleep_us(56)\n   a_c = []\n   count = 0\n   for i in a:\n       if i == 1:\n           count += 1\n\n       elif i == 0:\n           if count > 0 :\n               a_c.append(count)\n           count =0\n   for i in range(len(a_c)):\n       if a_c[i] > 10:\n           a_c[i] = \"1\"\n       else:\n           a_c[i] = \"0\"\n   B1 = \"\".join(a_c)\n   if(len(B1)==33):\n       print(B1[1:len(B1)])\n       hstr = '%0*X' % ((len(B1[1:len(B1)]) + 3) // 4, int(B1[1:len(B1)], 2))\n       print(hstr)\n       print(\"=====\")\n       img.clear()\n       img.draw_string(50, 100, hstr, scale=5)\n       lcd.display(img)\n   return B1\n\nwhile True:\n   f = read_data()\n```\n\n\n### 控制 LED 燈：魔幻 LED\n\n![](../assets/images/upload_c4fb10302e37e3b658d2b6e666042baf.png) \n![](../assets/images/upload_08ed64231aeb00a936398be7f7b257dd.png) \n![](../assets/images/upload_af8033adf5c9a7e373e13eadf490c257.png)\n\n- MoonCar 的 ws2812 Pin 腳為編號 22，總共有 8 顆燈\n- 程式內容：魔幻 LED 範例。\n    - 第 4 行：設定 Pin 腳為 22、LED 數量為 8 顆燈。\n\n```python\nfrom modules import ws2812\nimport time\n\nclass_ws2812 = ws2812(led_pin=22,led_num=8)\ncolor = [(30,0,0),(0,30,0),(0,0,30),(30,30,0),(30,0,30),(0,30,30),(30,30,30),(0,0,0)]\nwhile True:\n    for x in color :\n        for i in [0,1,2,3,4,5,6,7] :\n            class_ws2812.set_led(i,x)\n            class_ws2812.display()\n            time.sleep(0.05)\n```\n\n### 蜂鳴器：播放音樂\n\n- MoonCar 的蜂鳴器 Pin 腳為編號 24。\n- 程式內容：播放 3 個音符。\n    - 第 3 行：設定發音頻率\n    - 第 4 行：設定發音時間 ( 秒 )\n\n```python\nfrom webai_ext import Buzzer\nbuzzer = Buzzer()\ntune = [392,692,440]\nsec = [0.25,0.25,0.5]\nfor i in [0,1,2] :\n    buzzer.bee(tune[i],sec[i])\n```\n\n## 萬用遙控器控制登月小車\n\n執行程式後開發板螢幕會顯示 QRcode，使用手機掃描後即可用 Webduino 萬用遙控器控制小車。\n\n> 萬用遙控器的使用方式可以參考：[萬用遙控器控制登月小車](https://bpi-steam.com/WebAI/zh_tw/MoonCar/MoonCar.html#%E8%90%AC%E7%94%A8%E9%81%99%E6%8E%A7%E5%99%A8%E6%8E%A7%E5%88%B6%E7%99%BB%E6%9C%88%E5%B0%8F%E8%BB%8A)。\n\n![](../assets/images/upload_755911840efc039cab699de0c0465ec0.png)\n\n```python\nfrom webai import *\nimport machine , ubinascii , os , time , gc , sensor\n\nmcar.init()\ndef cmd(name,msg):\n    webai.cmdProcess.sub(name,msg)\n    if msg == 'up':\n        webai.show(file='mrun.jpg')\n        mcar.forward(50)\n    if msg == 'down':\n        webai.show(file='m02.jpg')\n        mcar.backward(50)\n    if msg == 'left':\n        webai.show(file='mleft.jpg')\n        mcar.left(50)\n    if msg == 'right':\n        webai.show(file='mright.jpg')\n        mcar.right(50)\n    if msg == 'reset':\n        webai.show(file='m01.jpg')\n        mcar.stop()\n    if msg == '開心':\n        webai.speaker.play(filename=\"logo.wav\")\n\nwebai.show(file='mooncar.jpg')\nwebai.mqtt.sub('PING',cmd,includeID=True)\n```"}, "/WebAI/zh_tw/index.html": {"title": "【 Web:AI 教學大綱 】", "content": "# 【 Web:AI 教學大綱 】\n\n## 開箱 Web:AI 開發板\n\n- [Web:AI 介紹](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Introduction.html)\n    - 產品內容\n    - Web:AI 開發板\n    - Webduino 教育平台\n- [初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)\n- [安裝版更新韌體](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Update.html)\n- [開發板 Wi-Fi 設定](https://bpi-steam.com/WebAI/zh_tw/Unboxing/SettingWIFI.html)\n- [操作模式](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Mode.html)\n    - 主程式模式\n    - QRcode 模式\n    - 回復預設狀態\n- [教學範例卡使用教學](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Card.html)\n\n## Web:AI 程式積木\n\n- [程式積木平台介紹](https://bpi-steam.com/WebAI/zh_tw/Programming/Introduction.html)\n- 基礎功能\n    - [變數](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Variables.html)\n    - [邏輯](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Logic.html)\n    - [重複](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Loops.html)\n    - [數學式](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Math.html)\n    - [文字](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Text.html)\n    - [陣列](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Lists.html)\n    - [函式](https://bpi-steam.com/WebAI/zh_tw/Programming/Basic/Functions.html)\n- 進階功能\n    - [檔案讀寫](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/FileRW.html)\n    - [掃描條碼](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/QRCode.html)\n    - [顏色追蹤](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Color.html)\n    - [人臉追蹤](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Face.html)\n    - [影像分類](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Image.html)\n    - [物件追蹤](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Object.html)\n    - [語音辨識](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Speech.html)\n    - 偵測\n- Web:AI\n    - [開發板](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/Board.html)\n    - [LCD 螢幕](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/LCD.html)\n    - [按鈕開關](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/Button.html)\n    - [麥克風](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/Mic.html)\n    - [I/O 引腳](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/IO.html)\n- 擴充功能\n    - [網路廣播](https://bpi-steam.com/WebAI/zh_tw/Programming/Expand/MQTT.html)\n    - [伺服馬達](https://bpi-steam.com/WebAI/zh_tw/Programming/Expand/Servo.html)\n    - [喇叭](https://bpi-steam.com/WebAI/zh_tw/Programming/Expand/Speaker.html)\n\n## [影像訓練](https://bpi-steam.com/WebAI/zh_tw/Train/Train.html)\n\n- Web:AI 影像辨識介紹\n- 影像辨識流程\n- A. 登入影像訓練平台\n- B. 建立分類\n- C. 使用開發板拍攝影像\n- D. 建立模型\n- E. 下載模型\n- F. 使用程式積木執行影像辨識\n\n\n## [使用 IDE 開發 Web:AI](https://bpi-steam.com/WebAI/zh_tw/IDE/Dev.html)\n- 開發環境介紹\n- 使用 kflash_gui 更新韌體\n- 使用 MaixPy IDE 執行指令\n- 程式範例\n\n## [操控 MoonCar](https://bpi-steam.com/WebAI/zh_tw/MoonCar/MoonCar.html)\n\n- 顏色偵測\n- 循跡自走\n- 循跡 + 物件追蹤\n- 馬達控制\n- 相關感測器\n- 萬用遙控器控制登月小車\n\n## 附錄\n\n- MaixPy 文件 [[簡體](https://wiki.sipeed.com/soft/maixpy/zh/index.html)] [[英文](https://wiki.sipeed.com/soft/maixpy/en/)]\n- MaixPy 範例程式 [[github](https://github.com/sipeed/MaixPy_scripts)]"}, "/WebAI/zh_tw/Train/Train.html": {"title": "三、影像訓練", "content": "# 三、影像訓練\n\nWeb:AI 影像辨識分為 **影像分類** 以及 **物件追蹤**，可以使用 Web:AI 開發板拍攝影像上傳至 Webduino 影像訓練平台進行影像訓練，將訓練完成的模型下載，再使用程式積木執行影像辨識。\n\n## 影像辨識流程\n\n進行影像辨識的流程中，需要先分別建立影像分類，接著選擇要建立的模型種類 ( 影像分類、物件追蹤 )，並將分類放入模型中，就可以使用模型來進行影像辨識了。\n\n![](../assets/images/upload_499be377eb3ef3848cd92334209b9b78.png)\n\n## A. 登入影像訓練平台\n\n1. 點擊連結進入 [Webduino 影像訓練平台](https://vision.webduino.io)。\n\n   ![登入畫面](../assets/images/upload_c05bf863042a5e058ff175a0bdfc1ecf.png =600x)\n\n2. 點擊「Register」按鈕註冊帳號或使用 Google、FB 帳號直接登入。\n\n   ![同意授權](../assets/images/upload_5c92d56778b31b686d9116fe16d79bfd.png =600x)\n\n3. 點擊「同意授權」，進入 Webduino 影像訓練平台。\n\n## B. 建立分類\n\n1. 在 Webduino 影像訓練平台中可以看到左側的側邊欄有「分類」和「模型」兩個選項，點擊「分類」進入分類列表。\n\n   ![分類列表](../assets/images/upload_95f140f81372466c615d54ec195f0268.png =600x)\n\n2. 點擊藍色「新增」按鈕，跳出「建立分類」視窗。\n\n   ![建立分類](../assets/images/upload_8a3c86c0cd8325837d4ccdddf39badb0.png =600x)\n\n    -  輸入分類名稱，**請勿輸入中文、空格、符號**\n    -  選擇分享狀態\n    -  影像上傳方式點選「Web:AI」，進入下一步\n\n   ![](../assets/images/upload_51dee50233ff9b3067dbde3e1179b8e7.jpg =600x)\n\n    - 輸入要拍照的數量\n    - 輸入 Web:AI 開發板的 DeviceID\n    - 選擇是否旋轉鏡頭\n        - 是：使用後鏡頭 ( 鏡頭在螢幕背面 )\n        - 否：使用前鏡頭 ( 鏡頭和螢幕在同一側 )\n     > 目前因為鏡頭旋轉功能外殼尚未上市，因此旋轉鏡頭選項**不需勾選**，敬請期待！\n\n3. 點擊「建立分類」按鈕\n\n   ![](../assets/images/upload_26143c122bdc6adeac5cf1bb124805fa.png =600x)\n\n4. 看到「傳送指令成功」訊息，就可以開始使用 Web:AI 開發板拍照。\n\n## C. 使用開發板拍攝影像\n\n傳送指令成功後，開發板會重新啟動，進入拍照模式。\n\n### 拍照模式\n\n- 左上角白色數字：目前拍照張數\n- L 按鈕：拍攝照片\n- R 按鈕：調整白框大小\n- 中間白色方框：拍照時，讓拍攝物件跟方框相當大小\n\n  ![](../assets/images/upload_cf63b2e27ef9efa9f58fe5127e8447a7.png)\n\n讓**拍攝物件跟方框相當大小**時按下 **L 按鈕** 拍攝，並且稍微轉動角度，拍攝不同角度影像。\n\n### 上傳影像\n\n1. 拍完設定的照片數量後，畫面會變全黑，開始上傳圖片。\n\n   ![](../assets/images/upload_bc218c4a4f6d483fed0da9390e9418d6.png =600x)\n\n2. 等待上傳完成後，畫面中央會顯示白色 ok，正下方顯示上傳時間。\n\n   ![](../assets/images/upload_746aa7aef3c1e1fb295eb7470ad46a11.png =600x)\n\n\n3. 點擊視窗中的 ✕ 或「回到主畫面」，將視窗關閉。\n\n### 建立 2~4 個分類\n\n進行影像辨識時，模型內需要放入 2~4 個分類才能進行辨識，\n因此重複上述 **建立分類**、**使用開發板拍攝影像** 步驟，建立兩個以上的分類。\n\n## D. 建立模型\n\n1. 建立完分類後，在左側的側邊欄選擇「模型」，進入模型列表。\n\n   ![模型列表](../assets/images/upload_23e1965f689c02c67697c9a98e97bb72.png =600x)\n\n2. 點擊藍色「新增」按鈕，跳出「新增模型」視窗。\n\n   ![](../assets/images/upload_4aee1e16f5e3bd4278a1d948575f85c7.png =600x)\n\n    - 輸入模型名稱，**請勿輸入中文、空格、符號或使用過的名稱**\n    - 選擇模型種類 ( 影像分類、物件追蹤 )\n        ![](../assets/images/upload_04e57bcc782a11a41b773fd0286a7fb7.png =560x)\n    - 選擇分享狀態\n    - 模型建立方式點選「挑選分類」\n\n3. 從分類列表中點選 2~4 個要進行影像辨識的分類，點擊「建立模型」。\n\n   ![新增模型](../assets/images/upload_3d978d4eed334b5f7460c9d2a847be91.png =600x)\n\n4. 等待模型訓練完成後，就可以在模型列表中找到建立的模型，並且可以看到模型內的**分類名稱**以及**模型種類**。\n\n   ![](../assets/images/upload_e70d83463d16c7cc32c71c18eed6018f.png =600x)\n\n   > 因為物件追蹤的演算法較複雜，因此訓練時間較久是正常的！\n\n## E. 下載模型\n\n1. 點擊要進行影像辨識的模型，跳出「模型選項」視窗。\n\n    a. 點擊下載模型。\n\n      ![模型選項](../assets/images/upload_421b3cf5d2bacd5a44e760e55acbaab2.png =600x)\n\n    b. 輸入開發板 Device ID。\n\n    ![](../assets/images/upload_85120262df264ff7c6ef18185de48ff0.jpg =600x)\n\n    c. 點擊「下載模型」後傳送指令。\n\n   ![](../assets/images/upload_8bb31a114b474f607cfd999f12b2de6d.png =600x)\n\n2. 點擊「下載模型」按鈕，出現「傳送指令成功」訊息即開始下載模型。\n\n   ![下載模型](../assets/images/upload_4c9f64a09ca70542b7bd7cf1a83c276b.png =600x)\n\n3. 完成 100% 後，畫面會顯示 **ok** 字樣代表完成下載，就可以開始進行影像辨識了。\n\n## F. 使用程式積木執行影像辨識\n\n在程式積木平台中，可以分別使用影像分類和物件追蹤積木，來達到不同的影像辨識。\n\n### 影像分類\n\n1. 先依照上面步驟，將訓練過的影像分類模型下載到 Web:AI 開發板中。\n\n2. 開啟 Web:AI 程式積木平台。\n\n3. 使用「設定模型」積木，輸入模型名稱，\n在陣列內放入和分類數量相同的積木，按照模型列表的**分類順序**輸入**分類名稱**。\n並將寬、高都輸入 224。\n\n   >- 使用 Webduino 影像訓練平台訓練的模型尺寸為 224*224。\n   >- 自行使用其它工具訓練，則需輸入各別的尺寸。\n\n   ![](../assets/images/upload_5f7a955964d7920ceeaad38699898af5.png)\n\n4. 在下方加入「無限重複」積木，裡面放入「開始辨識影像」積木和「LCD 顯示文字」積木。\n\n    ![](../assets/images/upload_a000127272667e0c386638e579685627.png)\n\n5. 「LCD 顯示文字」積木內放入「字串組合」積木，後方放入「取得辨識到的影像 ( 名稱 )」積木、「文字」積木輸入底線、「取得辨識到的影像 ( 信心度 )」積木。\n\n    ![](../assets/images/upload_7c33811336f28996d01ff70a6a7586cb.png)\n\n6. 程式編輯完成後，按下右上角綠色「執行」按鈕，出現「正在努力搬運 Blockly 中...」和「正在組裝積木...」，讀取結束後 Web:AI 開發板會自動開啟辨識畫面。\n\n7. 使用鏡頭對準辨識物件就能看到文字顯示辨識結果和信心度。\n\n   ![影像辨識結果](../assets/images/upload_18ff3d4a326a6123cb54fb20940150f9.png =600x)\n\n> 若要使用其它模型來進行影像辨識，需要回到步驟 **下載模型**，再次下載模型。\n \n### 物件追蹤\n\n1. 先依照上面步驟，將訓練過的物件追蹤模型下載到 Web:AI 開發板中。\n\n2. 開啟 Web:AI 程式積木平台。\n\n3. 使用「設定模型」積木，輸入模型名稱，\n在陣列內放入和分類數量相同的積木，按照模型列表的**分類順序**輸入**分類名稱**。\n並將寬、高都輸入 224。\n\n   >- 使用 Webduino 影像訓練平台訓練的模型尺寸為 224*224。\n   >- 使用開發板預設的模型請輸入 320*240。\n   >- 自行使用其它工具訓練，則需輸入各別的尺寸。\n\n   ![](../assets/images/upload_ac15f02988b89b8dc37d75892320e602.png)\n\n4. 在下方加入「無限重複」積木，裡面放入「開始偵測物件」積木和「LCD 顯示文字」積木。\n\n   ![](../assets/images/upload_4216bd52f357fbf566cc5f86857aeef5.png)\n\n5. 編輯物件追蹤的相關程式，讓偵測時可以讀取到模型 ( 陣列 ) 內的分類，並且在螢幕上顯示需要的數值，如下圖設定：\n\n   ![](../assets/images/upload_22315fc7fc92b0ebb011c02fba679ebf.png)\n\n6. 將編輯好的程式放在「開始偵測物件」積木下方。\n\n   ![](../assets/images/upload_89d2a0352b277bb63e702afa93c5285e.png)\n\n7. 程式編輯完成後，按下右上角「執行」按鈕，出現「正在努力搬運 Blockly 中…」和「正在組裝積木…」，讀取結束後 Web:AI 開發板會自動開啟辨識畫面。\n\n8. 使用鏡頭對準辨識物件就能看到白框顯示辨識結果和座標。\n\n   ![](../assets/images/upload_530ef50e37b082fdaea2397df9d0832f.png =600x)"}, "/WebAI/zh_tw/Unboxing/Introduction.html": {"title": "Web:AI 介紹", "content": "# Web:AI 介紹\n\nWeb:AI 使用 AI 晶片 ( K210 ) 以及 Wi-Fi 晶片 ( ESP8285 )，能夠做出人臉追蹤、影像分類、物件追蹤、語音辨識、QRcode 掃描等應用，讓教師與學生只需要一塊板子就能夠讓 AI 人工智慧融入生活。\n\n不論是連上網路或是離線，只要透過  [Webduino 教育平台](https://account.webduino.io/dashboard)，就能夠用最簡單的方式上手 AIoT。\n\n## 產品內容\n\n除了 Web:AI 開發板外，也包含了喇叭和 USB 線，讓開發板能夠立即使用並播放音效；另外更附贈了教學範例卡，只要簡單掃描 QRcode，就能馬上使用內建的程式範例，搭配小怪獸卡做出各種不同的互動效果。\n\n- Web:AI 開發板\n- USB 線\n- 喇叭\n- 教學範例卡 ( 部分範例需搭配喇叭及登月小車 )\n- 小怪獸卡\n\n![](../assets/images/upload_f9d0e0034687439edf1e2b51711b90d9.jpg)\n\n## Web:AI 開發板\n\n### 硬體規格\n\nWeb:AI 開發板硬體內含攝像鏡頭及 LCD 螢幕，可即時做出影像互動；內建的麥克風和喇叭插座能夠做出錄音、播放等語音互動；和 Web:Bit 相容的金手指腳位可以直接接上 Web:Bit 擴充板，串接各類的感測器、控制器，完美達成 AI 與 IoT 的結合。\n\n- 尺寸：51.6 x 67mm\n- LCD 螢幕：8bit MCU 2.3\"，解析度 320x240\n- 電源輸入:\n    - Micro USB ( 5VDC / 2A )\n    - 鋰電池插座 ( 3.7~4.2V )\n- CPU：雙核 64bit RISC-V，內建浮點運算器、神經網路處理器，標準頻率 400MHz\n- 鏡頭：500 萬畫素\n- 插座：金手指相容 ( Web:Bit / micro:bit )、TF card、揚聲器、鋰電池\n- 按鈕：L 按鈕、R 按鈕、Reset 按鈕\n- 無線網路：內建 ESP8285 模組，支援 2.4G 802.11.b/g/n\n- 音頻支援：內建 MEMS 麥克風，支援 3W 揚聲器輸出\n\n![](../assets/images/upload_690adf72aa0b8a3d0fc4f3a0f8c726ed.jpg)\n\n### 腳位定義\n\n有關 Web:AI 的腳位和使用的晶片如下：\n\n![](../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n### 主晶片 ( K210 ) & Wi-Fi 晶片 ( ESP8285 )\n\n![](../assets/images/upload_44609bc24a5a34baf5a7e554ef92bd8e.png)\n\n### 開發板燈號\n\n![](../assets/images/upload_5f90a5b39c8911dddb7cd8cb5aa26dc9.png)\n\n- 藍燈閃爍：充電中，不論是接電池或是電源都會閃爍。\n- 黃燈：電源開時燈亮；電源關時燈滅。\n- 紅燈：電池缺電。\n- 綠燈：電池充飽或是沒接上電池。\n\n## Webduino 教育平台\n\nWeb:AI 的開發和程式的使用可以透過程式積木平台以及 IDE，程式積木平台可以讓人從最簡單的方式入門程式邏輯；而 IDE 則是能夠讓有程式基礎的人快速編輯自己的程式並部署到開發板上。\n\n### 操作環境\n\n首先進入 [Webduino 教育平台](https://account.webduino.io/dashboard)。\n\n![](../assets/images/upload_13e1bb76387fb4c6eab824e71951a4b8.png)\n\n### Web:AI 程式積木\n\n選擇「Web:AI 程式積木」，進入程式積木平台。\n\n   >-  連結：[程式積木平台](https://ai-blockly.webduino.io/)。\n\n   ![](../assets/images/upload_18082d1a3d97ce4893aafb92a70997eb.png)\n\n### Webduino 影像訓練平台\n\n選擇「Webduino 影像訓練平台」，進入影像訓練平台。\n\n>- 關於影像訓練平台的使用，歡迎參考：[影像分類](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Image.html)。\n\n   ![](../assets/images/upload_48339186b99e357a04e4f64061681b4b.png)\n\n### MaixPy IDE 下載\n\n選擇「MaixPy IDE 下載」，下載 IDE。\n\n>- 關於 IDE 的開發使用，歡迎參考：[使用 IDE 開發 Web:AI](https://bpi-steam.com/WebAI/zh_tw/IDE/Dev.html)。\n\n   ![](../assets/images/upload_443f3bd4facb8552328c0e336bf3d4d7.png)\n\n\n#### 本页贡献者 [`庆奇`](https://md.kingkit.codes/s/siSKyknlU)[`Qubot`](https://md.kingkit.codes/s/siSKyknlU)"}, "/WebAI/zh_tw/Unboxing/Card.html": {"title": "教學範例卡使用教學", "content": "# 教學範例卡使用教學\n\n教學範例卡是 Web:AI 為了各教育單位提供的程式範例，只要使用開發板掃描 QRcode，就能立即體驗 AI 人工智慧，並快速在課堂中演示範例。\n\n## 教學影片\n\n歡迎參考下方教學影片：\n\n<iframe src=\"https://www.youtube.com/embed/Qgtthh7d9xQ\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 介紹\n\n教學範例包含：\n\nA. 人臉追蹤\nB. 語音互動\nC. 小怪獸追蹤\nD. 口罩偵測\nE. 登月小車追蹤小怪獸\nF. 萬用遙控器控制登月小車\n\n> 「登月小車追蹤小怪獸」及「萬用遙控器控制登月小車」範例需要搭配登月小車作使用。歡迎參考：[MoonCar 登月小車](https://store.webduino.io/products/webbit-mooncar)。\n\n![](../assets/images/upload_86e43decc1a7d68c02e3d29b8afa6486.png)\n\n## 使用教學\n\n1. 使用 Web:AI 開發板進入 QRcode 模式\n \n   > 關於如何進入 QRcode 模式，歡迎參考：[操作模式: QRcode 模式](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Mode.html#QRcode-%E6%A8%A1%E5%BC%8F)。\n\n2. 拿出教學範例卡，翻到背面的 QRcode。\n\n   ![](../assets/images/upload_c79aff377c0b1565abb23ab50cdf9a90.png)\n\n3. 使用 Web:AI 開發板的鏡頭掃描卡片上的 QRcode。\n\n   ![](../assets/images/upload_47965ccb81eed22dda80d6dec5796d9e.png)\n\n5. 掃描成功後即可使用教學範例！\n\n## A. 人臉追蹤\n\n以人臉的五官來作為模型，經過機器學習後可以辨識出畫面中的人臉。\n不限定人臉數量、會受到環境光線影響。\n\n![](../assets/images/upload_fc87a0d0fbc684b427ac1f6884f322fe.png)\n\n>- 關於人臉追蹤，歡迎參考：[人臉追蹤](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Face.html)。\n\n## B. 語音互動\n\n基於「語音辨識」的原理實現的語音互動，開發板中放入了男性、女性、Google 小姐等語音，偵測到聲音頻率變化而做出對應的效果。\n\n![](../assets/images/upload_a963ed1f635edc162946092166344927.png)\n\n包含 3 種不同互動，只要對著 Web:AI 說出「你好嗎？」、「自拍」、「你是誰？」，就會做出不同的互動效果\n\n> 因為每個人的聲音模型都不同，如果偵測不靈敏，可以使用 Google 小姐來說出指令。\n\n### 1. 你好嗎？\n\nLCD 螢幕隨機顯示 1 隻小怪獸及情緒，並透過麥克風發出對應的音效。\n\n### 2. 自拍\n\nWeb:AI 開發板開啟攝像鏡頭，對著自己拍一張照片並顯示在 LCD 螢幕上。\n\n### 3. 你是誰？\n\n夢想成為科技教具的 Web:AI 會自我介紹給大家聽！\n\n>- 關於語音辨識，歡迎參考：[語音辨識](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Speech.html)。\n\n## C. 小怪獸追蹤\n\n採用「物件追蹤」的技術辨識並追蹤 4 隻小怪獸，根據畫面中的小怪獸顯示資訊。\n\n![](../assets/images/upload_2964da9e487533253728e42b692106fd.png)\n\n### 下載物件追蹤模型時：\n\n範例小卡使用的小怪獸模型是預設在開發板中的物件追蹤模型，如果從 [影像訓練平台](https://vision.webduino.io/) 下載物件追蹤模型會將小怪獸模型覆蓋。\n若是要再次使用，就需要將開發板回復韌體。\n\n>- 關於物件追蹤，歡迎參考：[影像分類](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Image.html)。\n>- 關於回復韌體，歡迎參考：[初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n## D. 口罩偵測\n\n配合疫情時事，以人臉模型和配戴口罩的人臉模型做出的口罩偵測。\n\n- 當偵測到人臉配戴口罩，顯示「安全！」。\n- 當偵測到人臉**未**配戴口罩，顯示「危險！」。\n\n![](../assets/images/upload_49f5f3bf9c0c9758d2afc71cdbbbd849.png)\n\n>- 關於口罩偵測，歡迎參考：[人臉追蹤](https://bpi-steam.com/WebAI/zh_tw/Programming/Advanced/Face.html)。\n\n## E. 登月小車追蹤小怪獸\n\n登月小車結合「物件追蹤」技術，辨識 4 隻顏色的小怪獸，讓魔幻 LED 發出相對應顏色的光，並且依據 LCD 螢幕中小怪獸的位置來控制登月小車的前進、左轉、右轉，讓小車追著小怪獸行駛。\n\n![](../assets/images/upload_a53a4388615c70d2dff2596ed0c7350b.png)\n\n## F. 萬用遙控器控制登月小車\n\n想要直接操控登月小車嗎？\n「 Webduino 萬用遙控器」可以直接滑動網頁中的小車圖案，用最簡單的方式控制小車的移動。\n\n![](../assets/images/upload_4ec04f8ec8a7eed76cda49db003b6e3c.png)\n\n### 操作步驟\n\n1. 使用 Web:AI 開發板掃描「萬用遙控器控制小車 QRcode 」,進入「萬用遙控器控制小車」模式。\n進入後可以看到螢幕顯示 QRcode 及「請用手機掃描」。\n\n   ![](../assets/images/upload_18b796b949623c844f4c3c82e4f33546.png)\n\n2. 使用手機掃描螢幕上的 QRcode,進入 Webduino 萬用遙控器介面。\n( 也可以直接點擊 [Webduino 萬用遙控器](https://webduinoio.github.io/webduino-remote/index.html) 連結進入 )\n\n   ![](../assets/images/upload_16b89d4576479a4cb74d65eff5f5ec3c.png)\n\n3. 點擊右上角選單按鈕,開啟設定畫面。\n\n    ![](../assets/images/upload_65a2c6e74428129cd5c55c8c4ba1c9ea.png)\n\n4. 在「發送」欄位輸入 **DeviceID/PING**。\n   ( 如：DeviceID 為 **1a23b4**，則是輸入 **1a23b4/PING** )\n\n    ![](../assets/images/upload_ccc8072293fc841a1176e178dbb53206.png)\n\n\n5. 輸入完畢後，點擊右上角 ✕ 符號關閉,即可滑動中央的小車圖案來操控小車移動。\n\n   ![](../assets/images/upload_40883633de2dcda3b46109841967b441.gif)"}, "/WebAI/zh_tw/Unboxing/Mode.html": {"title": "操作模式", "content": "# 操作模式\n\n當 Web:AI 做完 Wi-Fi 設定及韌體更新後，就可以開始執行各種 AIoT 應用了。\n而使用 Web:AI 開發板時，有一些操作方式需要先了解，清楚之後可以盡情使用 Web:AI 了！\n\n> 關於 Wi-Fi 設定及韌體更新，歡迎參考：[初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n## 開機\n\n1. 首先需要將 Web:AI 開發板接上電源，只要接上電源就會自動開機。\n2. 一開機會顯示 Webduino Logo\n\n    ![](../assets/images/upload_39d9a3c14177e2a3a00be66ce2d14caf.png)\n\n3. 接著進入倒數畫面，這時可以選擇要進入 **主程式模式** 或是 **QRcode 模式**。\n\n## 關機\n\n拔掉電源後會自動斷電關機，最後執行過的程式也會被儲存在開發板中。\n再次重新插上電源後，可以馬上執行上次部署的程式。\n\n> 直接移除電源並不會導致開發板損壞，請安心使用！\n\n## 重新開機\n\n當撰寫了有問題的程式、網路訊號不穩導致開發板出現意外的狀況，或是想要重新執行程式時，就需要使用重新開機。\n\n### 重新開機方式：\n\n使用下列 2 種方式，都能夠讓開發板馬上重新啟動。\n\n- 按下開發板背面的 Reset 按鈕\n\n    ![](../assets/images/upload_11597dde7f02d711163102895c346df9.png)\n\n- 移除電源再重新插上\n\n> 反覆重新開機並不會導致開發板損壞，請安心使用！\n\n## 主程式模式\n\n開機後會進入倒數的畫面，在這時候做出以下其中一種動作，就會進入主程式模式。\n\n- **在倒數畫面不做任何動作，等待倒數結束**\n- **在倒數畫面按下 \" L 按鈕 \"**\n\n   ![](../assets/images/upload_f9ef2d253302384ede2a83a16efac3f7.png)\n\n\n進入主程式後，就會直接執行上次部署過的程式。\n\n## QRcode 模式\n\n在使用安裝版設定 Wi-Fi 或使用教學範例小卡時，就需要用到 QRcode 模式。\n\n### 步驟\n\n開機後會進入倒數的畫面，這時候 **按下 \" R 按鈕 \"**，就會進入 QRcode 模式，即可開始掃描 QRcode。\n\n![](../assets/images/upload_80075f62e13de57602897782d53ce31e.png)\n\n>- [初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)\n>- [教學範例卡使用教學](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Card.html)\n\n## 回復預設狀態\n\n回復預設狀態功能可以將 Web:AI 的部署程式和 Wi-Fi 設定回復到原廠狀態。\n\n### 用途\n\n當程式寫錯或遇到異常錯誤時 ( 如：使用大量錯誤迴圈積木 )，容易造成執行程式卡死，這時就需要使用回復預設狀態功能來讓開發板回到預設狀態，再重新執行程式或設定 Wi-Fi。\n\n### 預設狀態\n\n- Wi-Fi 狀態：無連線\n- LCD 螢幕：顯示「請前往網址，設定 Wi-Fi」，畫面如下：\n\n    ![](../assets/images/upload_8b1389ecc47f7cfa583dcb399bfe48bd.png)\n\n### 步驟\n\n1. **\" 按住 \"** Web:AI 開發板 L 按鈕。\n2. 按下 Reset 按鈕。\n3. 當螢幕出現紅色全屏畫面，放開 L 按鈕\n4. 開發板重新開機，完成回復預設狀態\n\n> 回復預設狀態之後的設定，歡迎參考：[初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。"}, "/WebAI/zh_tw/Unboxing/SettingWIFI.html": {"title": "開發板 Wi-Fi 設定", "content": "# 開發板 Wi-Fi 設定\n\n需要更改連線的 Wi-Fi 時，需要對開發板進行 Wi-Fi 設定，完成後就能夠讓開發板連上網路。\n\n## 步驟\n\n1. 在 Web:AI 程式積木中，點擊「WiFi 設定」按鈕，\n\n    ![](../assets/images/upload_968fc0eceabcccc185b7bc2a546b1d71.jpg)\n\n2. 跳出「WiFi 設定」視窗，輸入 SSID 和密碼後，點擊「設定」，進入 QRcode 頁面。\n\n    - SSID：欲連線的 Wi-Fi 名稱\n    - 密碼：Wi-Fi 密碼\n\n   ![](../assets/images/upload_6f7e320080816647d62cb09c622b046b.png)\n\n    ![](../assets/images/upload_9bbf3a19c931f8b93d79f517ac190dd9.png)\n\n3. 按下開發板上的 **Reset 按鈕**，在 5 秒內按下 **R 按鈕**，進入 QRcode 掃描模式。\n\n   ![](../assets/images/upload_66a49e02553990d76e2a2d7739e9c6c9.jpg)\n\n4. 使用開發板鏡頭對準 QRcode 掃描，進入 Wi-Fi 設定流程。\n\n5. 設定完成後開發板會重新啟動，畫面會 **顯示 SSID 資訊、Wi-Fi 狀態為 OK**，即完成 Wi-Fi 設定，開發板就能夠正常連網了！\n\n    ![](../assets/images/upload_93bbda39b7df5db3b8fa2ee6d5fa19f6.jpg)"}, "/WebAI/zh_tw/Unboxing/Initialization.html": {"title": "初始化設定 ( 第一次使用請看這裡 )", "content": "# 初始化設定 ( 第一次使用請看這裡 )\n\nWeb:AI 開發板的韌體中使用了 2 種晶片，分別是主晶片 ( K210 ) 和 Wi-Fi 晶片 ( ESP8285 )。\n第一次使用 Web:AI 開發板之前，需要先設定 Wi-Fi 及對晶片做韌體更新，將開發板升級到最新版本，才能順利使用最全面的功能。\n\n#### 設定頁面：[Wi-Fi 設定頁面](https://webai.webduino.io) ( 需要透過電腦的 Chrome 瀏覽器開啟 )\n\n## 教學影片\n\n歡迎參考下方教學影片：\n\n<iframe src=\"https://www.youtube.com/embed/ZSGkZUQQXcI\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 教學步驟：Wi-Fi 設定\n\n當拿到 Web:AI 開發板後，只要按照步驟教學或上方影片一步步操作，就可以完成初始化設定囉！\n\n1. 首先使用電腦打開 Chrome 瀏覽器進入 [Wi-Fi 設定頁面](https://webai.webduino.io)。\n\n    > 如果 Chrome 版本低於 89，需要先將瀏覽器更新到最新版本！\n\n2. 將 Web:AI 開發板透過 USB 傳輸線連接到電腦。\n\n3. 按下「點擊開始設定」。\n    ![](../assets/images/upload_02a4681ffc6dfd1aa921e27afe17f2f5.png)\n\n4. 點擊「開始連接」。\n\n    ![](../assets/images/upload_792d00f7981cf19f3ffad15bf3930abf.png)\n\n5. 選擇連接 Web:AI 的 USB，點擊「連接」。\n\n    ![](../assets/images/upload_4892028c07de2478564d8705933f5580.png)\n\n6. 電腦連接上 Web:AI 後會出現開發板的 Device ID 和現在的韌體版本。\n\n    ![](../assets/images/upload_44766cf13211c94964896050340ceb25.jpg)\n\n\n7. 在 Wi-Fi 連線畫面，選擇 Wi-Fi 並輸入密碼，按下「儲存連線」。\n\n    ![](../assets/images/upload_ddcfed56e5b16ca8494e8c37dc6b9bed.jpg)\n\n8. 成功完成設定 Wi-Fi！\n\n    ![](../assets/images/upload_4938d84b09b19e6ff298bb8808661543.jpg)\n\n> 如果需要進行韌體更新，再接著進行下方步驟。\n\n## 教學步驟：更新韌體\n\n1. 設定完 Wi-Fi 後，如果畫面有「已有新版本，點擊更新」，代表有新版本可以更新。\n\n   點擊「更新韌體」。\n\n    ![](../assets/images/upload_417de60a4f044c3973890328c1ce6987.png)\n\n2. 等待韌體更新，開發板螢幕會顯示更新進度，期間內請勿斷開與 USB 線的連接。\n\n    ![](../assets/images/upload_73e353a9e9a08eb82c1884c0b2c8bba2.png)\n    ![](../assets/images/upload_d1a8539e1deef8d0c520d7bfc5fb2b0e.png)\n\n3. 更新完成後，重新開機就可以開始使用 Web:AI 了！\n\n    ![](../assets/images/upload_8dbf16901021d914270ba5134b478694.png)\n\n## 小提醒\n\n- 當開發板畫面呈現與下圖 **相同** 時，才能在 Wi-Fi 設定頁面進行初始化設定。\n\n    ![](../assets/images/upload_9c75be672cbd440d6ee3fdb4f04b77c9.png)\n\n- 想要再次設定 Wi-Fi 時，請先將開發板 [回復預設狀態](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Mode.html#%E5%9B%9E%E5%BE%A9%E9%A0%90%E8%A8%AD%E7%8B%80%E6%85%8B)，當開發板顯示和上圖相同就可以進行設定。\n\n- 若使用上述步驟卻無法更新韌體，可以參考：[安裝版更新韌體](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Update.html) 來完成設定！\n\n- 如果設定頁面文字顯示為「網路：人工智能」，如下圖，代表 Chrome 瀏覽器有經過網頁自動翻譯。網頁自動翻譯會造成 Wi-Fi 設定出錯，需要將語言設定回「英文」並重新整理才能正常使用。\n\n    ![](../assets/images/upload_f35bd1f701c2304cac254c885f1ef660.jpg)\n\n    ![](../assets/images/upload_698b723317d3f9e955ac643af178d3fe.jpg)"}, "/WebAI/zh_tw/Unboxing/Update.html": {"title": "安裝版更新韌體", "content": "# 安裝版更新韌體\n\nWeb:AI 開發板的韌體中使用了 2 種晶片，分別是主晶片 ( K210 ) 和 Wi-Fi 晶片 ( ESP8285 )。\n\n第一次使用 Web:AI 開發板之前，需要先對晶片做韌體更新，將開發板升級到最新版本，才能順利使用最全面的功能。\n\n#### 連結：[Web:AI 安裝版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)\n\n![](../assets/images/upload_d8caf85eb964dda018799fe2f9b8476d.png)\n\n## 教學影片\n\n歡迎參考下方教學影片：\n\n<iframe src=\"https://www.youtube.com/embed/vl6XY0iCCuM\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 透過 Web:AI 安裝版 進行韌體更新\n\n1. 首先下載 [Web:AI 安裝版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)。\n\n2. 下載後點擊執行，安裝完成後就可以開啟 Web:AI 安裝版了。\n\n    ![](../assets/images/upload_4c0c19b4782014407c134e49323fa2f4.png)\n\n    - 開啟 Web:AI 安裝版，可以看到視窗最上方顯示「正在搜尋裝置...」，代表並未連接上開發板。\n\n        ![](../assets/images/upload_6e38bcc632aad5ef625c43833b4cd579.png)\n\n    - 透過 USB 線將 Web:AI 開發板連接上電腦，當 Web:AI 安裝版視窗顯示「已偵測到裝置」，代表成功讀取到開發板資訊。\n\n        ![](../assets/images/upload_01d95577c2800de0b1686ecf195a160d.png)\n\n3. 偵測到裝置後，點擊左上角「工具」>「更新韌體」，開始進行主晶片韌體更新，視窗上方會顯示目前更新進度。\n\n    ![](../assets/images/upload_7ba6a2e5f255c8ec78d61b4937d64f06.png)\n\n    :::danger\n    回復原廠韌體時，請勿按下 Reset 按鈕及拔除電源！\n    :::\n\n4. 韌體更新完成後，開發板會重新開機。這時 LCD 螢幕畫面如下圖，需要進一步完成 Wi-Fi 設定才能開始使用。\n\n    ![](../assets/images/upload_cffca67e2ed07221bf1445851c16c967.png)\n\n> 完成韌體更新後，歡迎參考 [初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html) 來完成 Wi-Fi 設定。"}, "/WebAI/zh_tw/IDE/Dev.html": {"title": "四、使用 IDE 開發 Web:AI", "content": "# 四、使用 IDE 開發 Web:AI\n\nWeb:AI 開發板除了可以用程式積木平台操作外，甚至也支援直接在 IDE 上撰寫 Python 程式，並透過開發板執行。\n\n> IDE：Integrated Development Environment ( 整合開發環境 )，一種輔助開發軟體的應用程式，在工具內部就能夠編寫原始碼，並打包成可用的程式。\n\n\n\n### 腳位定義\n\n![](../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n### 主晶片 ( K210 ) & Wi-Fi 晶片 ( ESP8285 )\n\n![](../assets/images/upload_44609bc24a5a34baf5a7e554ef92bd8e.png)\n\n\n## 開發環境介紹\n\nWeb:AI 開發板可配合 [Sipeed公司](https://maixpy.sipeed.com/) 推出的 MaixPy IDE 使用，該 IDE 雖然沒有開源，但提供了程式編寫整合開發環境，可以撰寫 MicroPython 並傳送到 Web:AI 開發板中執行，歡迎參考下方操作步驟。\n\n開發環境畫面如下：\n\n![MaixPy](../assets/images/upload_81c4247711446de3b89009483a0f36e5.png)\n\n## 使用 kflash_gui 更新標準版韌體\n\n需要先使用 kflash_gui 將 Web:AI 韌體檔案燒錄至開發板中，才能透過 MaixPy IDE 使用 Web:AI 功能。\n\n> 燒錄前請先透過 USB 線將 Web:AI 開發板接上電腦。\n\n### 使用 kflash_gui 燒錄\n\n1. 下載 Web:AI 韌體檔案 [韌體檔案](https://drive.google.com/file/d/1c819ka2ng8UgqVvTEjVFMPiEBrzDYyxO/view?usp=sharing)。\n\n2. 下載 [kflash_gui](https://github.com/sipeed/kflash_gui/releases/tag/v1.6.7)，點擊執行，開啟 webai.kfpkg 韌體檔，等待下載完畢後就燒錄完成了。\n\n   ![](../assets/images/upload_ce3be2497b3bbb94d08f5d14df8ffc09.png)\n\n3. kflash_gui 參數設定畫面如下，如果燒錄異常，可嘗試調整燒錄的速度\n\n   ![](../assets/images/upload_7e9b1dddd437cb218a9afe4119ad4db1.png)\n\n## 使用 MaixPy IDE 執行指令\n\n### 1. 下載 MaixPy IDE：\n\n點擊 [MaixPy IDE](https://drive.google.com/drive/u/0/folders/1AhEgANgd8PxQOlZgmxWc8JhbpstaIXDS) 下載，安裝後開啟 MaixPy IDE 應用程式，進入開發環境畫面。\n\n![MaixPy IDE 介面](../assets/images/upload_ef24ff8d1880128fa54c87a49cc5105f.png)\n\n### 2. 新建檔案：\n\n點擊左側側邊欄「新建檔案」按鈕 ( 白色資料圖示 )，在頁面中可以自行輸入 Python 程式碼。可以直接複製下方的程式碼範例，貼在編輯畫面中，執行範例展示。\n\n### 3. 選擇開發板：\n\n點擊上方「工具」>「選擇開發板」>「Sipeed Maix Bit ( with Mic )」，代表選擇控制 Web:AI 開發板。\n\n![](../assets/images/upload_5cf48d37570d61c20fa0f3cc0f94debe.png)\n\n### 4. 開啟終端\n\n1. 點擊上方「工具」>「開啟終端」>「新終端」\n\n   ![](../assets/images/upload_3abe5bed046bbf41d2914681d4fd0daf.png)\n\n2. 選擇「連線到序列埠」\n\n   ![](../assets/images/upload_6add55ea4c6d108b5fe3cad6542724db.png)\n\n\n### 5. 開啟 Web:AI\n\n1. 開啟終端後，會看到如下畫面：\n\n   ![](../assets/images/upload_e59c37efecb5c1b2527510b9a2889417.png)\n\n2. 在 IDE 中輸入程式碼，按下執行，即可在直接終端中查看執行結果。\n\n## 程式範例\n\n使用 Python 程式時，可以直接複製下方的程式碼範例，貼在編輯畫面中，執行範例展示。\n\n## 感測器\n\n![](../assets/images/upload_22df52e5a1be1ec587fe04a042634959.png =30%x)\n\n### 範例：攝像頭 Sensor\n\n- 程式內容：使用 Web:AI 內建的攝像頭捕捉畫面，即時顯示到 LCD 螢幕中。\n\n```python\nfrom webai import *\n\npic = webai.snapshot()\nwebai.show(img=pic)\n```\n\n![](../assets/images/upload_f733579dd18caea93542ce6b2d672d00.png =30%x)\n\n## 螢幕 LCD 顯示\n\n![](../assets/images/upload_9a95715444776fa01a7afcef8c36b4d5.png =30%x)\n\n### 範例：顯示文字\n\n- 程式內容：輸入指定的文字、位置、樣式，並顯示在 LCD 螢幕上。\n\n- ==lcd.draw_string( x 座標 , y 座標 , \" 文字 \" , 文字顏色 , 背景顏色 )==\n\n```python\nfrom webai import *\n\nwebai.draw_string(30,10,\"測試 OK\",scale=2)\n```\n\n![](../assets/images/upload_a8feb305b558a728a5191fc20c98ab12.png =30%x)\n\n\n### 範例：畫線\n\n- 程式內容：設定線段的 2 個端點位置、顏色、寬度，繪製在 LCD 螢幕上。也可同時繪製多條線段。\n\n- ==img.draw_line( x 座標 , y 座標 , x 座標 , y 座標 , 顏色 , 線段寬度 )==\n\n```python\nfrom webai import *\n\nwebai.img = image.Image()\nwebai.img.draw_line(10,150,310,150,color=lcd.RED,thickness=20)\nwebai.show(img=webai.img)\n```\n\n![](../assets/images/upload_bd152fa8f05d75d8a0404446c60be2af.png =30%x)\n\n## 按鈕\n\n### 範例：按鈕控制\n\n- 程式內容：按 L 按鈕顯示 A，按 R 按鈕顯示 B。\n\n- ==webai.draw_string( x 座標 , y 座標 , \" 英文數字 \", 文字縮放 )==\n\n```python\nfrom webai import *\n# state=1:click_down , state=2:click_up , state=3:long_press \ndef click(name,state):\n    webai.img.clear()\n    if name == 'btnL' and state == 1:\n        webai.draw_string(60, 100, \"A\", scale=4)    \n    if name == 'btnR' and state == 1:\n        webai.draw_string(280, 100, \"B\", scale=4)    \n\nwebai.img = image.Image()\nwebai.addBtnListener(click)\n```\n\n![LR按鈕](../assets/images/upload_1ebffb83a09532397e2dd8f9092721f2.png)\n\n### 範例：按鈕控制 - 監聽所有按鈕事件\n\n按鍵事件總共有 7 種事件\n\nL(左鍵):  name=='btnL' , state==1:按下 , state==2:放開 , state==3:長按超過2秒\nR(右鍵):  name=='btnR' , state==1:按下 , state==2:放開 , state==3:長按超過2秒\nL + R : state == 4 (左右按鍵一起按)\n```python\nfrom webai import *\n# state=1:click_down , state=2:click_up , state=3:long_press \ndef click(name,state):\n    webai.img.clear()\n    # 按下左鍵\n    if name == 'btnL' and state == 1:\n        webai.draw_string(60, 100, \"A\", scale=4)\n    # 放開左鍵\n    if name == 'btnL' and state == 2:\n        webai.draw_string(60, 100, \" \", scale=4)\n    # 長按左鍵超過2秒\n    if name == 'btnL' and state == 3:\n        webai.draw_string(50, 100, \"A!\", scale=4)\n\n    # 按下右鍵\n    if name == 'btnR' and state == 1:\n        webai.draw_string(220, 100, \"B \", scale=4)\n    # 按下右鍵\n    if name == 'btnR' and state == 2:\n        webai.draw_string(220, 100, \" \", scale=4)\n    # 長按右鍵超過2秒\n    if name == 'btnR' and state == 3:\n        webai.draw_string(210, 100, \"B!\", scale=4)  \n        \n    # 左鍵+右鍵一起按\n    if state == 4:\n        webai.draw_string(50, 100, \"A  +  B\", scale=4)        \n        \nwebai.img = image.Image()\nwebai.addBtnListener(click)\n```\n\n\n### 範例：按鈕拍照顯示照片\n\n- 範例程式：\n    1. 按下 L 按鈕進行拍照並寫檔\n    2. 長按 R 按鈕將照片顯示在 LCD 螢幕上\n    3. 再按一下 R 按鈕恢復拍攝模式\n\n```python\nfrom webai import *\n\ndef click(name,state):\n    global show\n    if name == 'btnL' and state == 2:\n        webai.img = webai.snapshot()\n        webai.img.save('myImg.jpg')\n        print(\"save OK\")\n    if name == 'btnR' and state == 1:        \n        show = False\n    if name == 'btnR' and state == 3:\n        show = True\n        webai.show(file = 'myImg.jpg')\n\nshow = False\nwebai.addBtnListener(click)\nwhile True:\n    if not show:\n        webai.img = webai.snapshot()\n        webai.show(img = webai.img)\n```\n\n![](../assets/images/upload_12a14b46fe9eede0762043451dc8dead.png =400x)\n\n## 腳位控制\n\n### 範例：讀取類比腳位\n\n![](../assets/images/upload_1bf8dec7eceade62de536f34c0b58f74.png =40%x)\n\n- 讀取 pin4 類比訊號，數值介於 0~1023 ，電壓是 0~1V。\n\n- 程式內容：用手觸碰類比腳 ( pin4 )，就可以看到螢幕顯示數值上升到 1023。\n\n![](../assets/images/upload_3bdfbbf6eeae5225db112f9998e95362.png)\n\n```python\nfrom webai import *\nwhile True:\n    val = webai.adc()\n    img = image.Image()\n    img.draw_string(120, 100, str(val), scale=4)\n    lcd.display(img)\n    time.sleep(0.1)\n    lcd.clear()\n```\n\n## 外接喇叭、SD卡\n\n### 使用喇叭播放音檔\n\n![](../assets/images/upload_6e7808c81c364f6a2f5900f878fa8347.png =60%x)\n\n- 程式內容：播放 wav 檔。\n\n```python\nfrom webai import *\nwebai.speaker.setVolume(100)\nwebai.speaker.play(filename='logo.wav',sample_rate=11025)\n```\n\n## Wi-Fi 設定\n\n### 設定開發板連線 Wi-Fi\n\n- 程式內容：透過 Wi-Fi 連上網路，如果試了三次都連不上，就顯示異常。\n    - 第二行：設定 Wi-Fi 的 SSID 和 PWD\n    - 第六行：儲存 Wi-Fi 設定\n    - 第七行：開發板重開機\n\n```python\nfrom webai import *\nwifi = {\n'ssid':'webduino.io',\n'pwd':'webduino'\n}\nwebai.cfg.put('wifi', wifi)\nwebai.reset()\n```\n\n## MQTT\n\n> 建議使用 Webduino 提供的程式庫，比較方便使用。\n\n### MQTT 訂閱資料\n\n- 程式內容：訂閱頻道 \" subTest \"。\n    - 第三行：在螢幕上顯示廣播訊息\n\n可透過Web:Bit範例程式發佈訊息進行測試\nhttps://webbit.webduino.io/blockly/?demo=default#7qZr95m27k8qO\n```python\nfrom webai import *\ndef msg(topic, msg):\n    webai.lcd.clear()\n    webai.draw_string(130, 100, \"%s\"%msg, scale=2, x_spacing=10)\nwebai.mqtt.sub('subTest', msg)\n```\n\n### MQTT 發行資料\n\n- 程式內容：向頻道 \" subTest \" 傳送 \" Hello Web:AI \"。\n    - 第一行：完成 MQTT 連線\n    - 第二行：傳送一筆資料\n\n```python\nfrom webai import *\nwebai.mqtt.pub('subTest','Hello Web:AI')\n```\n\n\n## 下載檔案(模型檔案、SPIFFS..等) 燒錄到指定的 flash address\n\n下面這範例程式是更新webAI檔案系統\n```python\nurl = 'http://share.webduino.io/storage/download/0605_143342.696_m_0x400000_maixpy_spiffs.img'\nwebai.cloud.download(url,address=0x400000,redirect=False,showProgress=True)\n```\n## 透過 UART 和 Arduino溝通\n\nArduino 可以透過 UART 和 Web:AI 連線傳送資料，下面程式範例是讓 ESP8266 傳送字元給 Web:AI 進行顯示\n\n<iframe src=\"https://www.youtube.com/embed/c9VH46zGpps\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n```python\nfrom machine import UART\nimport sensor, image, time, lcd\nfrom fpioa_manager import fm\nfrom Maix import GPIO\n\n\nfm.register(24, fm.fpioa.UART1_TX, force=True)\nfm.register(25, fm.fpioa.UART1_RX, force=True)\nuart = UART(UART.UART1, 57600, timeout=5000,read_buf_len=2048)\nlcd.init()\nimg = image.Image()\nimg.draw_string(100,100,'Go',scale=3)\nlcd.display(img)\nwhile True:\n    while uart.any():\n        myLine = uart.readline()\n        img.draw_string(100,100,myLine,scale=3)\n        lcd.display(img)\n        img.clear()\n```\n\nArduino\n\n```c\nvoid setup() {\n  Serial.begin(57600);\n  pinMode(15, OUTPUT);\n}\n\nvoid loop() {\n  Serial.println('A');\n  digitalWrite(15, HIGH);\n  delay(500);\n  Serial.println('B');\n  digitalWrite(15, LOW);\n  delay(500);\n}\n```"}, "/WebAI/zh_tw/Programming/Introduction.html": {"title": "程式積木平台介紹", "content": "# 程式積木平台介紹\n\nWeb:AI 程式積木分成線上版和安裝版兩種，可透過 Wi-Fi 和 USB 進行控制，使用上功能幾乎相同，可以選擇符合自己需求的版本作使用。\n\n![](../assets/images/upload_32ec1f0da0cbb09fdf25b6e3e78da96d.png)\n\n關於 **線上版** 與 **安裝版** 的區別，歡迎參考以下介紹：\n\n## 線上版\n\n線上版不需要安裝任何軟體，只要電腦有連接上網路，透過瀏覽器打開就能使用，不論是 Windows 或 Mac 都能運作，適合快速體驗的使用者。\n\n#### - 線上版連結：[Web:AI 程式積木](https://ai-blockly.webduino.io)\n\n### 分享功能 ( 線上版專屬 )\n\n「分享」功能可以快速存檔產生一段「網址」，下次再開啟這個網址就可以開啟檔案。因為安裝版無法開啟網址，所以無法使用該選項。\n\n![](../assets/images/upload_ee1785fa20430a92283f1c84dc497e16.png)\n\n> 網頁版限定 Google Chrome 瀏覽器，目前 **不支援 USB 連線** 控制！\n \n## 安裝版\n\n安裝版可以在沒有網路的環境下使用，下載後執行，將 Web:AI 開發板透過 USB 連接即可使用。\n\n#### - 安裝版連結：[Web:AI 安裝版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)\n\n> 安裝版目前僅限定在 **Windows 系統** 使用。\n\n## 介面\n\n### 基本功能\n\nWeb:AI 積木平台的操作介面分成下列幾個區塊：\n\n- **積木編輯區**：所有程式積木的組裝、編輯都會在這個區域內執行。\n\n- **積木清單**：包含基本功能、進階功能、Web:AI 開發板操控和擴充功能積木。\n\n- **主功能選單**：包含各種常用功能以及積木的部署。\n    - 檔案：開啟、儲存 json 檔，以及將積木做成網址儲存分享。\n    - 範例：多種現成的積木範例，可以直接打開使用。\n    - 擴充：具有特殊功能的積木，可以將積木加入使用。\n    - 教學：前往教學手冊。\n    - 清空：將積木編輯區的積木全部清除。\n    - 更多：包含 Wi-Fi 設定、網頁互動區、進入商城、下載安裝版、切換語言。\n    - 執行：將積木編輯區做好的積木部署至 Web:AI 開發板中。\n- **積木 / 程式碼切換**：將寫好的程式轉換為標準程式，讓學習程式更簡單。\n- **功能按鈕**：夠快速縮放畫面積木或刪除積木。\n\n![](../assets/images/upload_5502fb59e0b0bcc9151d0f959a55d6d6.png)\n\n## 程式積木介紹\n\n「積木」是翻譯自「block」這個英文單字，其操作方式類似「組裝積木」或「拼圖」的概念。透過互相堆疊和搭配組合，就能判斷不同程式的邏輯或依據指定的排列順序，實現對應的動作。\n\n![](../assets/images/upload_07aa0c945738c4f6a0ae6f1af56a5595.gif)\n\n### 編輯積木\n\n使用滑鼠在指定的積木上按 **右鍵**，就能開啟積木的功能列表，功能如下：\n\n- 複製：複製這塊積木。\n- 加入註解：如同程式的註解功能，替這塊積木加入註解。\n- 外部輸入 / 單行輸入：切換積木的樣式。( 不影響程式執行 )\n- 收合區塊 / 展開區塊：當積木編輯區有太多積木時，可以將積木收合，減少畫面中的積木數量。\n- 刪除區塊：刪除這塊積木。\n- 教學：查看積木的教學說明。\n- 小工具：特定積木需要配合小工具作進階功能使用，點擊後可以打開。\n\n![](../assets/images/upload_f62c60356d347ec7e2fea40fd2221711.png)\n\n## 開始執行第一支程式\n\n1. 首先從左側的 **積木清單** 中找到「Web:AI」，下方有「開發板」。\n\n    ![](../assets/images/upload_c6db40883fdb05fc429f4f58a8ab57bf.jpg)\n\n2. 點擊「開發板」，可以看到「開發板」積木，將積木拉出。\n\n    ![](../assets/images/upload_c406c25ec8b794c4c21fddf2963b2636.gif)\n\n3. 在「開發板」積木中輸入開發板 Device ID。\n\n   ![](../assets/images/upload_5e9768158864380f4612cc2516820864.jpg)\n\n   > 關於開發板的 Device ID，歡迎參考：[初始化設定 ( 第一次使用請看這裡 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n4. 從左側的 **積木清單** 中找到「Web:AI」，點擊下方的「LCD 螢幕」。\n\n    ![](../assets/images/upload_e45ca69a09bec6a69a1fc9d03b7d48c0.jpg)\n\n5. 拉出「LCD 顯示文字」積木，放進「開發板」積木內。\n\n    ![](../assets/images/upload_89b92fd79b17976d89e90eb32ed9817e.gif)\n\n6. 按下右上角「執行」，即可將程式部署到 Web:AI 中。\n\n   ![](../assets/images/upload_66cfe68177b328caefa52b71c4b055ca.jpg)\n\n7. 當部署成功後，可以看到 Web:AI 開發板的 LCD 螢幕顯示「Hello World」。\n\n    ![](../assets/images/upload_509900dc9341e45fa477c4dbbf2ed5fd.png)\n\n8. 成功執行第一支程式後，就可以開始體驗後續的更多更強大的 Web:AI 程式了！"}, "/WebAI/zh_tw/Programming/WebAI/Button.html": {"title": "按鈕開關", "content": "# 按鈕開關\n\n「按鈕開關」積木可以感應 **按下**、**放開** 2 種按鈕操作，透過接收按鈕開關的動作，觸發後續的行為。\n\n![](../../assets/images/upload_4fa2ff8031a7174c2b0c0526c33576f5.png)\n\n### 範例：用按鈕公布解答\n\n1. 先用「LCD 顯示文字」積木輸入數學問題「192+358=?」。\n2. 用「變數」積木設定為解答。\n3. 設定當 L 按鈕被按下時，清除 LCD 畫面，並顯示解答 ( 變數 x )。\n4. 設定當 L 按鈕被放開時，清除 LCD 畫面，並顯示數學問題「192+358=?」。\n5. 執行後，可以使用 L 按鈕不斷切換問題與答案。\n\n![](../../assets/images/upload_8c3be197b908850ecc8f30da9a66833e.gif)\n\n## 取得按鈕狀態\n\n按下或放開按鈕時，會傳送對應的指令到開發板中，使用「取得按鈕狀態」積木可以顯示接收到的按鈕狀態，並以 1 和 0 的方式表示。\n\n>- 按下：0\n>- 放開：1\n\n![](../../assets/images/upload_ccdcc76aa827e0be9153cff2793e38b4.png)"}, "/WebAI/zh_tw/Programming/WebAI/LCD.html": {"title": "LCD 螢幕", "content": "# LCD 螢幕\n\nWeb:AI 內建一塊 2.3 吋 LCD 螢幕，可以使用程式積木配合感測器、控制器、按鈕開關等物聯網相關硬體設備，將執行的結果顯示在螢幕上，達成各種跨領域應用。\n\n## LCD 顯示文字\n\n「LCD 顯示文字」積木能夠讓 Web:AI 的螢幕上顯示指定的英文字、數字，更可以搭配其它積木的互動，讓程式執行結果展示在 LCD 螢幕上。\n\n![](../../assets/images/upload_64ba9c874d571b6d92c59695fcd7fc98.png)\n\n## LCD 畫文字\n\n「LCD 畫文字」積木是將 Web:AI 的螢幕以畫布的方式畫上指定的文字，更可以透過積木組合，讓文字顯示在圖片上面。\n\n![](../../assets/images/upload_0da89bf996dae9e03a2713330e99f77a.png)\n\n> 因為「LCD 畫文字」積木在程式邏輯是將螢幕設定一張畫布，所以如下方的積木會讓「LCD 顯示文字」積木的「ABCDE」被覆蓋。\n> \n> ![](../../assets/images/upload_164ff827c96864577c04d5aaf57fefce.png)\n\n## 清除 LCD 畫面\n\n「清除 LCD 畫面」積木可以將 LCD 畫面原本的顯示的任何文字或執行結果清除，方便繼續執行後續步驟。\n\n![](../../assets/images/upload_b284d9517e9c6fa43936cf0411e05823.png)\n\n### 範例：3 秒後清除 LCD 畫面\n\n1. 使用「LCD 顯示文字」積木讓 LCD 螢幕顯示 Hello World。\n2. 下方放入「等待」積木設定 3 秒，並加入「清除 LCD 畫面」積木。\n3. 按下執行，可以看到螢幕顯示 **Hello World**，等待 3 秒之後，螢幕畫面中的文字消失。\n\n![](../../assets/images/upload_fcd60076a7eb25a9cdb1a61aee3c9b01.gif)\n\n## LCD 畫直線\n\n「LCD 畫直線」積木可以同時在螢幕中畫出 **多條** 直線，並可以設定線段的起點、終點、顏色、線粗、箭頭。\n\n> 箭頭的端點位在終點位置。\n\n![](../../assets/images/upload_12efd2968130e3ba9a19c835af690a0a.png)\n\n### 範例：畫出紫色箭頭\n\n1. 使用「LCD 畫直線」積木，設定起點、終點的 x、y 位置、顏色、線粗，箭頭選擇「顯示」。\n2. 按下執行，可以看到 LCD 螢幕顯示紫色箭頭線段。\n\n![](../../assets/images/upload_74c3d2ea383065a440e09677a03d1ee3.png)\n\n## LCD 畫圓\n\n「LCD 畫直線」積木可以同時在螢幕中畫出 **多個** 圓形，並可以設定圓形的位置、半徑、顏色、線粗、是否填滿。\n\n![](../../assets/images/upload_cf596f58390915dfe8eef9515e142567.png)\n\n### 範例：畫一張臉\n\n1. 如下方程式範例，使用「LCD 畫圓」積木設定座標、半徑及是否填滿，做出眼睛和鼻子。\n2. 使用「LCD 畫直線」積木做出嘴巴。\n3. 按下執行，可以看到完成一張臉在 LCD 螢幕上。\n\n![](../../assets/images/upload_7c0d98b094d1722a2e2dabbb5443b8e1.png)\n\n## LCD 畫矩形\n\n「LCD 畫直線」積木可以同時在螢幕中畫出 **多個** 矩形，並可以設定矩形的位置、寬高、顏色、線粗、是否填滿。\n\n> 矩形的起點 x、y 是依據矩形左上角的座標而定。\n\n![](../../assets/images/upload_9e1a4f1e2acc28236b862cf6eabe8aa1.png)\n\n## LCD 顯示圖片\n\n「LCD 顯示圖片」積木可以讓 LCD 螢幕顯示出拍攝的圖片，或是存放在 Web:AI 開發板中的圖片。\n\n![](../../assets/images/upload_b2a3c9fe65109efb72b278e87e430268.png)\n\n### 開發板預設的圖檔：\n- logo：Webduino Logo\n- m01：笑臉\n- m02：閉眼\n- mleft：向左看\n- mright：向右看\n- mrun：>o<\n- red：紅色小怪獸\n- blue：藍色小怪獸\n- yellow：黃色小怪獸\n- green：綠色小怪獸\n\n### 範例：照相畫面\n\n1. 使用「LCD 顯示圖片」積木，裡面放入「拍攝圖片」積木。\n2. 因為這樣的程式設計只能顯示一次固定的畫面，因此需要讓程式不斷執行。\n3. 在最外層放入「無限重複」積木。\n4. 按下執行，可以看到開發板開啟照相鏡頭功能，顯示鏡頭拍攝的畫面。\n\n![](../../assets/images/upload_0c373ab6bb919c3edab14ac253040cfb.png)\n\n> 關於照相畫面的更多應用變化，可以參考：[照相畫面](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/LCD.html#%E7%85%A7%E7%9B%B8%E7%95%AB%E9%9D%A2)。\n\n### 範例：改變表情\n\n1. 使用「建立陣列」積木放入各種圖檔名稱。\n2. 在外層使用「取出陣列元素並執行」積木，讓程式會根據陣列中的元素逐項執行。\n\n![](../../assets/images/upload_769a6e525a60cfcecd6c1d65f9db08bc.png)\n\n3. 放入「LCD 顯示圖片」積木，顯示圖片、檔名為「變數 i」\n4. 讓表情每 1 秒改變一次，因此放入「等待 1 秒」積木。\n5. 目前的程式執行到最後一個項目就會停止，並不會永久重複，所以在最外層放入「無限重複」積木。\n6. 按下執行，可以看到螢幕不斷變換表情。\n\n![](../../assets/images/upload_6defc8fd16ac282a5e78d8b819acfbf4.gif)\n\n## 照相畫面\n\n「拍攝照片」積木可以使用鏡頭拍攝一次畫面，配合「無限重複」積木就可以達成照相鏡頭的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「變數」積木替拍攝照片命名，透過命名來做出更多變化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上兩種積木組合方式執行後會達到相同的結果，差別在於若是要做出更多應用變化，就需要搭配「變數」積木的命名。\n\n## LCD 畫圖片\n\n「LCD 畫圖片」積木內建了各種使用積木畫出的範例圖案，可以直接選用並直接顯示在螢幕上，不需要使用大量積木來畫出。\n\n![](../../assets/images/upload_a8300664a8a7d9ac27bb311655b7808a.jpg)\n\n### 範例：畫出人臉\n\n1. 放入「LCD 畫圖片」積木，選單選擇人臉。\n2. 按下執行，可以看到螢幕顯示人臉。\n\n![](../../assets/images/upload_0d0ca1959cb45161c1fc85278563f219.png)"}, "/WebAI/zh_tw/Programming/WebAI/Board.html": {"title": "開發板", "content": "# 開發板\n\nWeb:AI 提供了兩種控制開發板的方式，分別是 **USB** 和 **Wi-Fi**，透過這兩種不同操控方式的互相搭配，不論各種情境都能隨心所欲的控制。\n\n- USB：可以在沒有網路的情況下，透過 USB 連線操控，\n- Wi-Fi：可以進行無線遠端遙控，\n\n![](../../assets/images/upload_aa2f2afd7ec1b7287a44bdb6bd877b0b.jpg)\n\n## 使用方式\n\n### 輸入 Device ID\n\n每塊開發板都會有各自的 Device ID，[程式積木平台](https://ai-blockly.webduino.io/#/) 及 [影像訓練平台](https://vision.webduino.io/) 都是藉由 Device ID 來進行控制。\n\n當開發板完成韌體更新後，重新開機就會看到一組 Device ID，將這組 Device ID 填入開發板積木中\n\n![](../../assets/images/upload_a37bf088a59ae14a3639fa19bbe83548.png)\n\n### 放入程式積木並執行\n\n先拿一塊積木作為測試，從左側積木欄位中點擊「LCD 螢幕」，抓取「LCD 顯示圖片」積木放入「開發板」積木中。\n\n![](../../assets/images/upload_f2a4ecff047bbb8fd316146882dace08.png)\n\n組合如下圖，按下右上角「執行」，即可在螢幕上看到「Webduino」。\n\n![](../../assets/images/upload_76d6626876e21dddf2c1a45a9bf4d4ca.png)"}, "/WebAI/zh_tw/Programming/WebAI/Mic.html": {"title": "麥克風", "content": "# 麥克風\n\nWeb:AI 開發板內建了麥克風，藉由麥克風錄音將音檔錄製到 SD 卡中，做出各種和聲音有關的物聯網互動。\n\n![](../../assets/images/upload_94de51447f2033b2800a8c4fb3b8077c.png)\n\n## 錄音\n\n「錄音」積木可以將麥克風錄製到的聲音錄下，儲存到記憶卡中。\n\n> 因為開發板的記憶體有限，因此使用錄音積木前需要搭配記憶卡作使用。\n\n![](../../assets/images/upload_2f079962f761ffd4ad00b39770201da9.jpg)\n\n### 範例：錄音並播放\n\n1. 使用「錄音」積木，在前後放入「LCD 畫文字」積木，完成錄音程式。\n\n    ![](../../assets/images/upload_52cba37624dc005f27ceced42242a169.jpg)\n\n2. 放入「等待」積木、「LCD 畫文字」積木、「喇叭播放」積木，即可在錄音完後播放音檔。\n\n    ![](../../assets/images/upload_76c6b2ec27ef2c32bd0739e3b1b3614a.jpg)\n\n3. 完成後按下執行，即可錄音並播放聲音。"}, "/WebAI/zh_tw/Programming/WebAI/IO.html": {"title": "I/O 引腳", "content": "# I/O 引腳\n\n在 Web:AI 開發板邊緣有一排有 25 個金屬接觸點，這些金屬接觸點稱為「引腳」，或通俗一點也可稱呼「金手指」。 引腳包含了 5 個標註 0、1、2、3V 和 GND 的大引腳，以及其他 20 個未標示號碼的小引腳。\n除了可以使用鱷魚夾操作大引腳，也可以使用擴充板搭配杜邦線操作小引腳，透過引腳的搭配，就能靈活的操作各種外接元件與感測器。\n\n## I/O 引腳對照表\n\n有關 Web:AI 開發板的腳位規格，可以參考以下的對照表。\n\n- P0 ~ P20：訊號腳位，負責輸入輸出訊號\n- 3V3：供電 3.3V\n- GND：電路接地 ( 電壓 0V )\n\n![](../../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n## 讀取訊號 ( 數位輸入 )\n\n使用「讀取數值」積木，讀取到的數值為數位訊號，會有 1 和 0 兩種數值，\n\n- 輸入電壓 > 0V：數位數值為 1\n- 輸入電壓 = 0V：數位數值為 0\n- 完全沒有接感測器或電組：數位數值為 1\n\n> 因為預設只會讀取一次訊號，所以要不斷讀取腳位訊號的話，需要搭配 **「無限重複」積木**。\n\n![](../../assets/images/upload_1fcd592f0ffdcd32783aa60237ff6384.png)\n\n### 範例：讀取腳位輸入訊號\n\n1. 使用杜邦線、麵包板、電阻完成接線圖。( 電阻的一端接 GND、一端接 3V3 )\n2. 使用「LCD 顯示文字」積木讓螢幕顯示讀取數值，這樣可以讀取 1 次輸入訊號。\n3. 為了能讓腳位不斷讀取訊號，加入「無限重複」積木，讓螢幕可以隨時顯示改變的訊號數值。\n4. 按下執行後，改變訊號腳位讀取的電路位置，可以看到螢幕的數位訊號改變。\n\n![](../../assets/images/upload_09689bd3be1d7032daed8f3a2bdbe2a4.png)\n\n## 輸出訊號 ( 數位輸出 )\n\n輸出訊號的積木分成兩種 ( 數位輸出 0V 相當於 類比輸出 100V )：\n\n- 數位輸出：輸出 **0** 或 **1V**\n- 類比輸出 ( PWM )：輸出 **0～100V**\n\n\n使用不同的輸出方式，可以適合在不同的場合，做出各種應用變化。\n\n### 輸出訊號 ( 數位輸出 )\n\n透過積木控制，從指定腳位傳遞出 0 或 1 的訊號。\n\n1. 使用 LED 燈為例，LED 燈的一端接地、一端接訊號腳，完成接線。\n2. 使用「數位輸出」積木，輸出至指定的腳位，選擇輸出 1。\n3. 按下執行，可以看到 LED 燈亮起。\n\n> 如果輸出訊號選擇 0，代表腳位電壓為 0V，因此 LED 燈的兩端皆為 0V，LED 燈不會亮起。\n\n![](../../assets/images/upload_96bd7f4e31094faf2d4151eb2e0c1627.png)\n\n![](../../assets/images/upload_d7de82173645e4affcd2826bd48480ef.png)\n\n### 輸出訊號 ( 類比輸出 )\n\n透過積木控制，從指定腳位傳遞出 0～100 的訊號。\n\n![](../../assets/images/upload_a3a07800c41fb4cd3ef4f83cb813c8ca.png)\n\n1. 使用 LED 燈為例，LED 燈的一端接地、一端接訊號腳，完成接線。\n2. 使用「類比輸出」積木，輸出至指定的腳位，選擇輸出 30。\n3. 按下執行，可以看到 LED 燈微亮。\n\n![](../../assets/images/upload_d7de82173645e4affcd2826bd48480ef.png)"}, "/WebAI/zh_tw/Programming/Expand/Speaker.html": {"title": "喇叭", "content": "# 喇叭\n\nWeb:AI 開發板能夠搭配外接喇叭及 SD 卡，將指定的音檔播放出來，並且藉由編輯各類積木程式控制觸發條件和音量，達成在任何情境下的聲音互動。\n\n## 喇叭播放\n\n「播放」積木代表執行播放的動作，輸入指定的名稱，就可以播放 SD 卡內的 wav 檔。\n\n> 「播放」積木的音檔支援格式為 **.wav**。\n\n![](../../assets/images/upload_877afa4b024423a0363351f8c31296fe.png)\n\n## 播放音量\n\n「音量」積木可以控制播放的音量，音量大小為 0~100，預設值為 5。因為程式是一行一行執行，所以「音量」積木必須放在「播放」積木之前。\n\n> 請先設定音量，再播放音檔。\n\n![](../../assets/images/upload_70c34d4ff54a405fad332e898178bddf.png)\n\n### 範例：按鈕播放音樂\n\n1. 將存放音檔的 SD 卡插入 Web:AI 開發板中，並接上喇叭。\n\n![](../../assets/images/upload_d7d9cbd3157d999f5745179adda3016b.png)\n\n3. 設定「播放」積木內要播放的音檔名稱，範例中使用 logo 這個內建音檔。\n4. 放入「音量」積木設定要播放的音量。\n5. 在最外層加上「按鈕」積木，讓開發板能夠用按鈕播放音樂。\n6. 執行後，按下 L 按鈕，可以聽到喇叭放出音樂。\n\n![](../../assets/images/upload_c056e3869240b47d896b85e6e9e633ac.png)\n\n![](../../assets/images/upload_eaa4c8056d7ddfb2baed6c24810c3c48.gif)"}, "/WebAI/zh_tw/Programming/Expand/Servo.html": {"title": "伺服馬達", "content": "# 伺服馬達\n\n伺服馬達會依照指示命令動作，由程式控制馬達的旋轉角度，馬達就會轉幾度，搭配各種不同的齒輪組合，就能實際應用在玩具、模型屋、機械夾臂...等領域，實現許多有趣好玩的創意。\n\n## 伺服馬達 接線圖\n\n將伺服馬達的橘色線 ( 訊號線 ) 接在擴充板的 1 號腳，紅色線接到 3.3V，棕色線接到 GND。\n\n> 注意，因 Web:Bit 擴充板輸出電壓為 3.3V，請確認伺服馬達為支援 3.3V 的型號。\n\n![](../../assets/images/upload_e83df9d09c4ef68c56adb73e4040cd9d.png)\n\n## 控制旋轉角度\n\n使用「按鈕開關」的積木，設定：\n\n- 按下 L 按鈕：伺服馬達旋轉至 180 度\n- 按下 R 按鈕：伺服馬達旋轉至 0 度\n\n程式執行後，就可以透過 L、R 按鈕控制伺服馬達。\n\n![](../../assets/images/upload_100bc9a33d09c55aaf369f0179b0e7fa.png)\n\n![](../../assets/images/upload_4a2408255814d5eee6d0a2ad6b8469f5.gif)"}, "/WebAI/zh_tw/Programming/Expand/MQTT.html": {"title": "網路廣播", "content": "# 網路廣播\n\nWeb:AI 的網路廣播功能，不僅能讓 Web:AI 與 Web:AI 開發板彼此資訊互動，更可以和 Webduino 的其它平台之間連動。實現一對多、多對一、虛實互動、遠距廣播...等多樣化的操控情境，透過廣播功能的實現，便能將物聯網的應用發揮到極致。\n\n> 有關 Web:Bit 教育版的積木操作，可以參考：[Web:Bit 教學手冊](https://webbit.webduino.io/tutorials/doc/zh_tw/education/index.html)\n\n## 發送廣播訊息\n\n「發送廣播訊息」積木可以指定一個頻道名稱，並對這個頻道發送訊息文字，只要頻道名稱相同，所有在該頻道上的裝置都能收到廣播訊息。不論是實體裝置、虛擬裝置、沒有開發板的程式...等，都能夠向指定頻道發送廣播訊息。\n\n> 執行程式時遇到「發送廣播訊息」積木會暫停，直到發送廣播訊息後才會再繼續。\n\n![](../../assets/images/upload_c88532e5120c700bfcf05e60f04c99b1.png)\n\n### 範例：向 Web:Bit 教育版發送訊息\n\n1. 使用「發送廣播訊息」積木，設定向「channel」頻道傳送訊息「Hello!」，按下執行。\n\n   ![](../../assets/images/upload_8650137f8c6e3a009d5ce1653ebdac9d.png)\n\n2. 開啟 [Web:Bit 教育版](https://webbit.webduino.io/blockly)\n3. 放入「接收廣播訊息」積木，設定從頻道「channel」接收廣播訊息。\n4. 放入「綠色怪獸說話」積木讓舞台中的小怪獸說出廣播訊息。\n5. 按下執行，可以看到小怪獸舞台的小怪獸說出來自 Web:AI 發送的訊息。\n\n>- Web:Bit 教育版的網路廣播積木位在 **擴充功能 > 網路廣播**。\n>- Web:Bit 教育版的小怪獸說話積木位在 **進階功能 > 怪獸控制**。\n\n![](../../assets/images/upload_09e5eb963c47a4f78acb13c615351799.png)\n\n## 接收廣播訊息\n\n「接收廣播訊息」積木可以指定一個頻道名稱，不斷收聽這個頻道的變化，並透過廣播訊息的積木顯示。接收廣播訊息不限制只有實體裝置能接收，不論是實體裝置、虛擬裝置、沒有開發板的程式...等，都能夠接收指定頻道的訊息。\n\n> 「接收廣播訊息」積木不需要放在重複迴圈內，就會自行不斷收聽頻道訊息。\n\n![](../../assets/images/upload_3866a2c19e7bf44bb6226584cd4503c9.png)\n\n### 範例：接受來自 Web:Bit 教育版的訊息\n\n1. 開啟 [Web:Bit 教育版](https://webbit.webduino.io/blockly)\n2. 使用「發送廣播訊息」積木，設定向「channel」頻道傳送訊息「Hello!」，按下執行。\n\n   ![](../../assets/images/upload_77702faa143913ce68f8d197e0a82b12.png)\n\n3. 打開 Web:AI 程式積木平台。\n4. 使用「接收廣播訊息」積木，設定從「channel」接收廣播訊息。\n5. 放入「LCD 顯示文字」積木顯示「收到的廣播訊息」。\n6. 按下執行，可以看到 Web:AI 開發板螢幕顯示廣播訊息「Hello!」\n\n   ![](../../assets/images/upload_9ec090d270752bd264fa827568388471.png)"}, "/WebAI/zh_tw/Programming/Basic/Loops.html": {"title": "重複", "content": "# 重複\n\n在程式領域裡，重複 ( 迴圈 ) 是常常使用的基本功能，能夠控制重複執行的過程，也可以將需要重複執行的程式碼放在重複內，就能指定次數、延遲時間，或是無窮盡的執行。\n\n## 等待\n\n「等待」積木可以讓程式暫停一段時間，當程式積木執行到「等待」積木，就會等待指定的時間過後才會進行接續的動作。\n\n![](../../assets/images/upload_14051453cdcb767d80b160b5ad1b10b6.png)\n\n\n### 範例：文字閃爍\n\n下方的範例讓 Web:AI 的螢幕中的文字每秒顏色閃爍。\n\n![](../../assets/images/upload_48343e9596b015ec712d86a3cf15a0db.gif)\n\n## 重複 ( 重複幾次、無限重複次 )\n\n「重複」積木分為「重複幾次」積木及「無限重複次」積木，功能分別如下：\n\n- 「重複幾次」積木：指定重複內的積木程式重複的次數，預設次數為 10 次。\n- 「無限重複次」積木：無止盡的執行重複內容，除非使用「中斷循環」積木，重複的事件才會停止。\n\n![](../../assets/images/upload_acc38cc8518f6a375cdfba2208b5a3d1.png)\n\n### 範例：文字閃爍 10 次\n\n1. 以相同的文字顏色閃爍為例，將「無限重複」積木替換成「重複 10 次」積木，按下執行，可以看到 Web:AI 螢幕顯示 Webduino 文字顏色閃爍。  \n2. 當執行完第 10 次後，會停止執行程式，Webduino 的文字顏色停留在紅色不再改變。\n\n   ![](../../assets/images/upload_263b347ab87292fd9a6dde4c4f08d4c4.png)\n\n## 判斷為真，就重複無限次\n\n「判斷為真，就重複無限次」積木等同於「重複無限次」積木加上「邏輯」判斷，只要空格內的邏輯判斷為「真」( true )，就會開始進行無限重複。\n\n![](../../assets/images/upload_67d738e94f23852ac2a2d983b2dc07aa.png)\n\n### 範例：隨機取數，是偶數就停止\n\n1. 設定一變數「number」為 1~100 隨機數字，如果 number 是偶數時，就重複後續動作無限次。\n\n   ![](../../assets/images/upload_b2765fc857de3a37590e42d42b723222.png)\n\n2. 完成積木後按下執行，可以在 Web:AI 螢幕看到 number 的取得的數值。\n\n    - 如果 number 為奇數，螢幕顯示白色數字\n    - 如果 number 為偶數，螢幕顯示數字顏色不斷閃爍。\n\n   ![](../../assets/images/upload_ddbde1a3a7c675073e1bfd80a36f492d.png)\n\n## 計數\n\n「計數」積木類似「重複執行幾次」積木，差別在於計數積木使用了一個變數 ( i )，透過改變這個變數的數值，來決定重複幾次、如何重複以及重複的間隔。\n\n> 以預設的「計數」積木為例，「變數 i」的數值會由 1 , 2 , 3 , ... , 10 的方式改變。\n\n![](../../assets/images/upload_8d06b1db227a0a01349f10e31d233aff.png)\n\n### 範例：依序顯示 1 , 2 , 3 , ...... , 10\n\n在「LCD 顯示文字」積木內放入「變數 i」積木，讓 Web:AI 螢幕顯示 i 的數值，並且設定「等待 1 秒」，按下執行，可以看到螢幕顯示 1 , 2 , 3 , … , 10。\n\n![](../../assets/images/upload_d5d81e32c4195fc8c5c3750af633b00a.gif)\n\n## 取出陣列元素並執行\n\n「取出陣列元素並執行」積木是以陣列長度作為重複次數的依據，因此空格內必須放入陣列積木，執行後就會依序取出陣列內容並執行對應動作。\n\n![](../../assets/images/upload_b4b8436236ed918a0f343c316de11985.png)\n\n\n### 範例：依序顯示 A B C\n\n使用「陣列」積木建立列表，放入「文字」積木 A、B、C，「變數 i」代表列表中的每一個項目，設定讓 LCD 顯示「變數 i」，按下執行，就可以看到 Web:Bit 螢幕依序顯示 A、B、C。\n\n![](../../assets/images/upload_5725ac932f2eedf1774358b8a16fb75d.gif)\n\n## 停止這個重複\n\n在重複的過程中，可以使用「停止這個重複」積木來終止目前的循環。\n\n![](../../assets/images/upload_2d3eaf4cf2ec60ff58993948eeca005d.png)\n\n\n### 範例：數到 20 就停止\n\n下方範例是 Web:AI 螢幕顯示從 1 數到 50，當「變數 i」= 20 時會停止循環，所以螢幕上的數字會停在 20。\n\n![](../../assets/images/upload_41ad4328cc597d1ca61cfda7aab53e35.png)"}, "/WebAI/zh_tw/Programming/Basic/Math.html": {"title": "數學式", "content": "# 數學式\n\n數學積木包含了許多數學運算，從基本的加減乘除，到四捨五入、平均值、中位數...等應有盡有，不論是簡單的程式或複雜應用，都能透過各式各樣的數學運算實現。\n\n## 指定數字\n\n「指定數字」積木用來讓我們輸入數字，可輸入整數或是帶有小數點的浮點數，很常用於運算式或判斷式。\n\n![](../../assets/images/upload_b9659220e1e8883d8ee9012855e02e75.png)\n\n## 數學運算\n\n「數學運算」積木可以針對數字進行加、減、乘、除和次方五種運算。\n\n![](../../assets/images/upload_b2e4fcf2caa70838f354c84553b4533b.png)\n\n## 常用數學函數\n\n「常用數學函數」提供常用的數學計算積木，常用數學函數包含以下幾種：開根號、絕對值、負數 (-)、對數函數 (ln)、log10 函數 (log10)、指数函数 (e^) 和 10 的幾次方 (10^)。\n\n![](../../assets/images/upload_c7f1a0c467b02cc9ed16885874df0619.png)\n\n### 範例：算出根號 25\n\n![](../../assets/images/upload_46b1b8c4c63345d2e70a4fce5c99df8c.png)\n\n## 三角函數\n\n「三角函數」積木裡頭提供了兩種三角函數用法，分別是角度 ( sin、cos、tan ) 以及徑度 ( asin、acos、atan )，三角函數可以從下拉選單選擇切換。\n\n![](../../assets/images/upload_028701e00fb9da60ea3b72bb74adaf4c.png)\n\n### 範例：算出 sin(30)\n\n![](../../assets/images/upload_f35ec3f5b972801b532c03b7a1fd3ad6.png)\n\n## 常數\n\n「常數」積木會表現是一個不會變動的常數數值，常數包含了以下幾種：圓周率 (π)、指數 (e)、黄金分割率 (φ)、sqrt(2)、sqrt(½) 和無限大 (∞)。\n\n![](../../assets/images/upload_805d5423c92f7105529bde34fb83a6b8.png)\n\n## 數學性質判定 ( 是否 )\n\n 「數學性質判定」積木可以判斷數字的性質，包含偶數、奇數、質數、整數、正值、負數、可被整除。如果數字符合這項性質 ( 是、true )，能夠執行後續動作。\n\n![](../../assets/images/upload_7cd038abab300054ebcc01b341b8caf0.png)\n\n## 四捨五入 ( 進位、捨去 )\n\n「四捨五入」積木可以對帶有小數點的數字進行四捨五入、無條件捨去或無條件進位三種運算，捨去或進位到整數。\n\n![](../../assets/images/upload_c2e07b9a0ad2ccf030aee545376fb838.png)\n\n## 陣列運算\n\n「陣列運算」積木能針對以數字組成的陣列，進行加總、取出最小值、取出最大值、計算平均值、取得中位數、取得比較眾數、計算標準差和隨機抽取的計算。\n\n![](../../assets/images/upload_b4a20e43de0cb4865e22b29a7cc0b50b.png)\n\n### 範例：算出數字總和\n\n![](../../assets/images/upload_4dc0517d4d3decec3ca9b048bf828b5f.png)\n\n## 取得餘數\n\n「取得餘數」積木可以取得兩個數字相除的餘數。\n\n![](../../assets/images/upload_a5c1cbc272294d03948376041f1c300b.png)\n\n## 限制數字範圍\n\n「限制數字範圍」積木可以將設定最大值與最小值，並將數字限制在這個指定的範圍內。\n\n![](../../assets/images/upload_4c52c9671ba566547347febc2224fb21.png)\n\n## 隨機取數 ( 整數 )\n\n指定一個數字範圍，在每次執行時，就會從這個數字範圍內取出隨機的整數。\n\n![](../../assets/images/upload_aee8c752196384d636fbef6bb5cf2a7a.png)\n\n## 隨機取數 ( 分數 )\n\n每次執行這塊積木時，隨機取得一個 0 到 1 之間的浮點數。\n\n![](../../assets/images/upload_24d1b96336d6b715f348710680b5e2bf.png)"}, "/WebAI/zh_tw/Programming/Basic/Logic.html": {"title": "邏輯", "content": "# 邏輯\n\n在日常生活裡，不論是寫程式、算數學，法庭攻防，甚至是路上交通、買賣東西或要不要起床，都包含許多「邏輯」的成分。邏輯可做許多的條件和判斷，當滿足了某些條件就會執行某件事，例如聽見鬧鐘響就該起床、看到綠燈才可以行進...等狀況，就是一些簡單的邏輯判斷。\n\n## 邏輯判斷\n\n如果情況滿足判斷條件 ( 判斷回傳為「真」或「ture」)，就會執行對應的內容。\n\n- 如果：接 **判斷條件**\n- 執行：接 **執行內容**\n\n![](../../assets/images/upload_a05837f4247b76cc747cae670b17c274.png)\n\n### 增加條件\n\n點選左上方的「藍色小齒輪」，可以新增邏輯判斷的條件，點一下可以打開，再點一下可以關閉。\n\n![](../../assets/images/upload_a41d68cd2082f3aae5f3981cce24bafd.gif)\n\n### 判斷條件：如果、否則如果、否則\n\n「否則」的判斷條件表示當「如果」和「否則如果」的條件都沒有滿足，就會執行「否則」的內容。\n\n邏輯判斷條件位置：\n\n- 「如果」：在第一層\n- 「否則如果」：位在中間\n- 「否則」：在最後\n\n![](../../assets/images/upload_b3f5e79c33f6a4da74e1cfdda2ebb287.jpg)\n\n如果只有兩個條件，例如非 A 即 B，就可以單純使用「如果」和「否則」就可以，甚至可以不使用「否則」，這樣在條件外就不會進行任何動作。\n\n![如果否則](../../assets/images/upload_1ae4c3d5215d2847040889b4f71d6b38.png)\n\n## 判斷條件式\n\n判斷條件式主要會放在邏輯的「判斷條件」缺口內，提供不同情境的邏輯判斷。\n判斷的條件主要分為：等於 (=)、不等於 (≠)、小於 (<)、小於等於 (≦)、大於 (>)、大於等於 (≧)。\n\n![](../../assets/images/upload_151cd59aee9c176b287ce540bca112f1.png)\n\n將「判斷條件式」放入「如果」、「否則如果」、「否則」積木後方，即可設定執行條件。\n\n### 範例：判斷成績是否及格 ( 1 )\n\n1. 以下方「判斷成績是否及格」為範例，設定「變數 score」為隨機 0~100 數值，並判斷是否及格。\n\n    - 變數 score ≧ 60 ：顯示 PASS\n    - 變數 score < 60 ：顯示 FAIL\n\n2. 完成後按下執行。 \n\n   ![](../../assets/images/upload_1e85e92c48d4fb5daa301dd6958f63b0.png)\n\n## 邏輯運算子\n\n「邏輯運算子」積木為邏輯判斷提供了更彈性的判斷條件，當中包含了「和」與「或」。\n\n- 和：必須 2 個判斷條件式都滿足，才會執行動作，\n- 或：只要滿足其中一個判斷條件式，就會執行動作。\n\n![](../../assets/images/upload_09d829bd597417299d5c3af90fcc06a8.png)\n\n\n邏輯判斷出現「如果否則」的時候，常會用到邏輯運算子，而邏輯運算子可以搭配判斷條件的積木使用。\n\n![](../../assets/images/upload_2a1786bb136c7d6963686ef657300388.png)\n\n### 範例：判斷成績是否及格 ( 2 )\n\n1. 這次的範例多增加一個項目是當成績是 100 時，讓螢幕顯示「PERFECT」。\n\n2. 判斷條件如下：\n\n    - 「變數 score」= 100：PERFECT\n    - 100 >「變數 score」≧ 60：PASS\n    - 60 ≧「變數 score」：FAIL\n\n3. 在「否則如果」後方放入「邏輯運算子」，讓條件為 score 介在 60~100 之間。\n\n   ![](../../assets/images/upload_320f34108c2e8af436530a11cb9dac30.jpg)\n\n4. 完成後按下執行，可以看到螢幕顯示成績與結果。\n\n   ![](../../assets/images/upload_81169a6841a1f2669a5caa457c9df3a5.png)\n\n## 條件判斷不成立\n\n使用「不成立」積木時，會使條件判斷不成立。當條件不成立時，會執行後續動作。\n\n![](../../assets/images/upload_1c0b91ad321b7690ad0c21450c99c87f.png)\n\n## 真/假\n\n「真/假」積木主要表示 ture ( 真 ) 與 false ( 假 ) 兩個值，目的是在數字、文字之外多一些判斷的條件，同時也可以將 ture 和 false 提交給變數。\n\n![](../../assets/images/upload_fa06fa865565e57465d43d9339c79600.png)\n\n## 空\n\n編輯程式的時候，會遇到某個變數或是某個數值變成空值 ( null ) 的情況，這時就可以使用空值的積木判斷，用法和「真/假」積木類似。\n\n![](../../assets/images/upload_d30f4b5bd5ef23d876f24a2ebf330b95.png)\n\n## 非\n\n「非」積木表示「不是什麼」，通常會和「真/假」或「空值」的積木搭配使用。\n\n![](../../assets/images/upload_c2cb18419e3e47f48a474c09271a6c23.png)\n\n如果把積木接在「非」的積木後面，狀態就會相反過來，例如空就會變成非空、真就會變假，假就會變真，依此類推。\n\n![](../../assets/images/upload_875ea95493d2be2cb3dc3969cab55f9b.png)\n\n## 三元邏輯運算子\n\n「三元邏輯運算子」積木是針對只有「兩種條件」，並針對根據條件傳回「兩個運算式」的其中一個。\n\n![](../../assets/images/upload_3aff7970399de7bb7847496926e5de52.png)\n\n### 範例：判斷成績是否及格 ( 3 )\n\n1. 使用相同的「判斷成績是否及格」範例，因為判斷結果只有「及格」、「不及格」2 種，所以可以使用「三元邏輯運算子」積木。\n\n2. 設定「變數 result」儲存結果，\n\n    - 測試：「變數 score」≧ 60\n    - 如果為真：顯示 PASS\n    - 如果為假：顯示 FAIL\n\n3. 開始執行後，按下 L 按鈕，螢幕會顯示分數及結果。\n\n   ![](../../assets/images/upload_5d9e920f7b6009c74466629b41380cc7.png)\n."}, "/WebAI/zh_tw/Programming/Basic/Lists.html": {"title": "陣列", "content": "# 陣列\n\n陣列可以將數字、文字、列表或變數，按照順序組合起來，這些按序排列資料集合就稱作陣列。一個陣列可以再細分為多個項目，或是一個陣列內還包含其他陣列。在進行比較複雜的運算時，也會透過陣列的操作來實現。\n\n## 建立陣列、空陣列\n\n- 「建立陣列」積木可以透過指定位置放入對應的內容，建立一個帶有數值的陣列。\n- 「空陣列」積木會建立一個陣列容器，也就是裡面沒有包含任何項目的陣列。\n\n點擊積木的「設定」按鈕，可以改變陣列內的項目數量，當數量為 0，積木就會變成空陣列，可以藉由後續操作改變陣列內的項目內容。\n\n![](../../assets/images/upload_ed6e185aa95bf4fc4fab8982e2a7478d.png)\n\n### 範例：展示陣列內的所有水果\n\n1. 將「變數 fruit」設定為陣列，並在陣列項目中放入各種水果名稱。\n2. 使用「LCD 顯示文字」積木顯示「變數 fruit」。\n3. 避免文字顯示超出螢幕，調整 x 成 50。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **['apple', 'orange', 'banana']**。\n\n   ![](../../assets/images/upload_884e654b486f5a19ac7a8dbbd3db7521.png)\n\n## 重複陣列內項目\n\n「重複陣列內項目」積木可以建立一個陣列，並讓陣列內的項目重複特定數量。當陣列內需要填入大量重複的項目時，就只需要設定一次。\n\n![](../../assets/images/upload_7893cbd4e0063912006f14e9dbc7f98c.png)\n\n### 範例：鉛筆盒內有 5 支筆\n\n1. 使用「變數 pencil box」，後面放入「重複陣列內項目」積木。\n2. 將「文字」積木放入陣列中，並輸入「pen」。\n3. 使用「LCD 顯示文字」積木顯示「變數 pencil box」。\n4. 避免文字顯示超出螢幕，調整 x 成 50。\n5. 按下執行，可以看到 Web:AI 螢幕顯示 **['pen', 'pen', 'pen', 'pen', 'pen']**。\n\n   ![](../../assets/images/upload_d0bb47652d48444d1831be9e325a905b.png)\n\n## 陣列長度\n\n「陣列長度」積木可以取得個陣列的項目總數。\n\n![](../../assets/images/upload_47561b9a47ba4faab6c3ccee6547d539.png)\n\n如果是空陣列則陣列長度為 0。\n\n![](../../assets/images/upload_95a27df38f0aa6739749bbde7d8a6aff.png)\n\n### 範例：查看陣列中有多少水果欄位？\n\n1. 將「變數 fruit」設定為陣列，並在陣列項目中放入各種水果名稱。\n2. 使用「變數 number」作為水果欄位的數量，放入「陣列長度」積木，後方放入「變數 fruit」。\n3. 使用「LCD 顯示文字」積木顯示「變數 number」。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **6**。\n\n   ![](../../assets/images/upload_17cc5c62f7ce60f2c84ce6d3172c67eb.png)\n\n5. 因為「陣列長度」積木讀取的是陣列的項目數量 ( 水果欄位數量 )，所以即使項目中沒有放入水果，螢幕也會顯示相同的數字。\n\n   ![](../../assets/images/upload_bace1a5878ebf047f155130b75b4b927.png)\n\n## 索引項目位置\n\n「索引項目位置」積木能在一個陣列中，從最前面或最後面，找到特定項目所在的位置，並回傳該位置的順序號碼。\n![](../../assets/images/upload_9db2dd194ff822aa83060d8b0e614505.png)\n\n\n### 範例：水果陣列中，第一顆橘子出現在什麼位置？\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 設定「變數 order」，後方放入「索引項目位置」積木，從「fruit」陣列最前面索引項目「orange」。\n3. 使用「LCD 顯示文字」積木顯示「變數 order」。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **4**，代表第一顆橘子出現在 **第 4 個位置**。\n\n   ![](../../assets/images/upload_53325524181d38607e41a53ba7abee27.png)\n\n## 取得陣列內容\n\n「取得陣列內容」積木可以取得陣列中某個項目的值、或是取得某個項目的值之後，同時移除該項目。( 項目取得方式包含：第幾個、倒數第幾個、第一個、最後一個和隨機 )\n\n![](../../assets/images/upload_6f5882aaa141ae10aae06249e203dacc.png)\n\n### 範例：找到第 3 個水果\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 使用「LCD 顯示文字」積木，顯示「取得陣列」積木取得陣列中的第 3 項。\n3. 按下執行，可以看到 Web:AI 螢幕顯示 **cherry**，代表陣列中的第 3 個項目是 cherry。\n\n   ![](../../assets/images/upload_d8cf61566a59081dbdc818d062cfd868.png)\n\n### 範例：移除第 3 個水果，並說出後來的第 3 個水果\n\n1. 接續上一個範例，完成建立陣列。\n2. 在陣列後面使用自「陣列 fruit」移除第 3 個項目。\n3. 使用「LCD 顯示文字」積木，顯示「取得陣列」積木取得陣列中的第 3 項。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **orange**，代表原本陣列中的第 3 個項目 cherry 被移除，改由原本的第 4 個項目 orange 遞補。\n\n   ![](../../assets/images/upload_2599f4b2fda422c2ecfb5df97b79a44e.png)\n\n## 設定陣列內容\n\n「設定陣列內容」積木可以針對陣列的項目進行設定或移除。( 項目取得方式包含：第幾個、倒數第幾個、第一個、最後一個和隨機 )\n\n![](../../assets/images/upload_5602a5b1b00a3c60cd134600f44d1214.png)\n\n### 範例：將第 3 個水果改為 cherry\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 下方使用自「陣列 fruit」中設定第 3 個項目為 cherry。\n3. 使用「LCD 顯示文字」積木，顯示「陣列 fruit」，並設定 x 為 40，避免文字超出螢幕。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **[‘apple’, ‘banana’, ‘cherry’]**，代表第 3 個水果已經被改為 **cherry**。\n\n   ![](../../assets/images/upload_d38af28745d3d75ab576ad3eaf803350.png)\n\n<!-- ## 取得指定區間的項目\n\n「取得指定區間的項目」積木會取出一段指定區間內的項目，並將這些項目建立成一個子陣列。\n\n> 請注意第一個空格的數字需要比第二個空格內的數字小！\n\n![](../../assets/images/upload_bf209fecdd85453b57213eba10de5a86.png)\n\n### 範例：取得第 2 個水果 ~ 倒數第 2 個水果\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 加入另一個變數「變數 list」，在後方使用：自「陣列 fruit」中取得第 2 個項目至倒數第 2 個項目。\n3. 使用「LCD 顯示文字」積木，顯示「陣列 list」，並設定 x 為 40，避免文字超出螢幕。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **[‘banana’, ‘orange’, ‘cherry’]**。\n\n![](../../assets/images/upload_d83aba208f12ef7d13371ca274801662.png)\n\n![image alt](https:// \"title\") -->\n\n## 文字與陣列轉換\n\n「文字與陣列轉換」積木可以將帶有「分隔符」( 類似空白、逗號、分號...等分隔符號 ) 的文字轉換為陣列，或是將陣列合併為一串文字。\n\n- 從文本製作陣列：文字 → 陣列\n- 從陣列拆出文本：陣列 → 文字\n\n![](../../assets/images/upload_7aae6f7038f74c6d33c6d6ddd3110828.png)\n\n### 範例：用文字展示水果陣列，並用逗號分開\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 使用「把陣列合併為文字」，將陣列變成文字形式。\n3. 使用「LCD 顯示文字」積木，並設定 x 為 40，避免文字超出螢幕。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **apple,banana,orange,cherry,guava**。\n \n   ![](../../assets/images/upload_466cfd47b5e350508c57da544e6f99ab.png)\n\n5. 如果將「分隔符」改成「/」符號，可以看到 Web:AI 螢幕顯示 **apple/banana/orange/cherry/guava**。\n\n    ![](../../assets/images/upload_da1a8336911bad031ec8e5a68686a007.png)\n\n## 陣列排序\n\n「陣列排序」積木會將指定的陣列做數字、字母的排序，排序後會形成一個新的陣列，不會影響原本陣列的排序。\n\n>- 依英文升序：a ~ z\n>- 依英文降序：z ~ a\n>- 依數字升序：小 ~ 大\n>- 依數字降序：大 ~ 小\n\n![](../../assets/images/upload_0cb245b7be3711400d494a42a08c0f81.png)\n\n### 範例：讓水果依英文字母順序排列\n\n1. 使用「變數 fruit」和「陣列」積木，並在陣列項目中放入各種水果名稱。\n2. 加入另一個變數「變數 text」，使用「陣列排序」積木讓陣列依照英文字母排序。\n3. 使用「LCD 顯示文字」積木，顯示「order」，並設定 x 為 40，避免文字超出螢幕。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 **[‘apple’, ‘guava’, ‘orange’]**，陣列中的項目依照 a~z 的順序排列。\n\n   ![](../../assets/images/upload_2b46378f90a8b7f1b1ef6882d302c6db.png)"}, "/WebAI/zh_tw/Programming/Basic/Functions.html": {"title": "函式", "content": "# 函式\n\n函式積木可以幫助我們簡化或管理較為複雜的程式邏輯，因為在寫程式的時候，常會遇到需要重複撰寫並執行的程式碼，如果每重複一次都得重寫一次，勢必會造成整份程式邏輯的複雜度，透過函式，將這些重複的程式集中管理，需要使用的時候再去呼叫函式，就可以執行對應的內容。\n\n## 建立函式\n\n「建立函式」積木可以將許多重複會用到的程式積木包裝成函式。\n\n![](../../assets/images/upload_a367c134c23f41bcd37af8342f8aae8a.png)\n\n### 「函式」積木使用流程\n\n使用建立函式積木並不會執行函式，因為函式是定義「需要執行的內容」，建立完成函式積木內容後，在函式積木的目錄裡，就會出現對應的執行函式積木，使用這塊積木才表示執行這個函式。\n\n函式流程：\n\n1. 建立函式\n2. 執行函式\n\n![](../../assets/images/upload_9927eea7e5f49cc07602f9e8ef006cc0.png)\n\n### 範例：建立並執行函式\n\n1. 使用「建立函式」積木，放入「LCD 顯示文字」積木\n2. 使用「函式」積木\n3. 按下執行，可以看到 Web:AI 螢幕顯示 **Hello World**。\n\n![](../../assets/images/upload_ba667034437829bdc693c88295b95db0.png)\n\n### 函式內變數\n\n除了單純的使用函式，我們也可以建立「函式內的變數」，點選函式積木前方的小齒輪，就可以新增變數。\n\n![](../../assets/images/upload_730ffc95b0c683c2ca9896fd3ec1b283.gif)\n\n新增函式內的變數後，執行函式時也會看到放入變數數值的缺口。( 有幾個函式內的變數就會有幾個缺口 )\n\n![](../../assets/images/upload_b12dd98ddefa314dadd2e0ad39fcec10.png)\n\n也會看到在「變數」積木列表同時新增了 x、y 變數。\n\n![](../../assets/images/upload_c2fa8754b6319a1758fb0c0a337adfcb.png)\n\n### 範例：使用函式內變數作運算\n\n1. 使用「建立函式」積木，放入「LCD 顯示文字」積木，顯示 **x 和 y 相乘** 的結果。\n2. 使用「函式」積木，放入 **變數 x、y**。\n3. 輸入 x = 58、y = 63。\n4. 按下執行，可以看到 Web:AI 螢幕顯示 3654。\n\n![](../../assets/images/upload_b0d50f4e741fc6ebb87e55f254e3a4ad.png)\n\n## 建立回傳值函式\n\n「建立回傳的函式」積木可以讓執行的函式，變成單純的**數值**。\n\n![](../../assets/images/upload_cf7190430a281e0758d5a1c382e86286.png)\n\n使用「建立回傳值函式」，會發現執行函式時積木前方多了一個作為組合用的形狀。\n( 下圖是延伸前一段建立函式內數的函式 )\n\n![](../../assets/images/upload_cbfb981e04896726b0ed41b7539720b5.png)\n\n### 範例：x、y 不同的運算結果\n\n1. 使用「建立回傳值函式」積木，回傳值為 **x 和 y 相加**。\n2. 使用「按鈕開關」積木和「LCD 顯示文字」積木，分別用來顯示不同的運算結果。\n3. 放入「函式」積木，設定不同的 x、y 值。\n4. 執行後，按下 L、R 按鈕，可以看到 Web:AI 螢幕顯示不同的運算結果。\n\n![](../../assets/images/upload_7142effe680a069803df59f805082d85.gif)\n\n## 函式內判斷並回傳值\n\n「函式內判斷並回傳值」積木必須和「建立回傳值函式」的積木搭配，主要作為判斷要回傳什麼數值。\n\n> 「函式內判斷並回傳值」積木必須放在「建立函式」積木內才能正常運作。\n\n![](../../assets/images/upload_3f635fbacc9cdfda5d4e05d33e8b4bf0.png)\n\n### 範例：判斷 x、y 大小 ( 1 )\n\n透過這個積木，搭配函式內的變數，就可以透過傳入的變數數值，最後回傳 x 和 y 哪個比較大的結果。\n\n![](../../assets/images/upload_218975067b38ed4d9b0c73b103f2bf2a.png)\n\n### 範例：判斷 x、y 大小 ( 2 )\n\n因為「函式內判斷並回傳值」積木具備邏輯判斷的功能，所以也可以使用邏輯積木加上一個變數來做判斷，就能做出一模一樣的效果。\n\n![](../../assets/images/upload_503e5c2f293d0f99b5fdf78c78e6332c.png)"}, "/WebAI/zh_tw/Programming/Basic/Variables.html": {"title": "變數", "content": "# 變數\n\n變數，是所有程式都會用到的基本元素，使用前會賦予變數一個名稱，可以用這個變數來表示文字、數字、陣列、顏色或邏輯。\n\n為什麼要使用變數呢？因為在編輯程式往往會遇到許多「重複」的部分，如果用變數或函式裝載這些重複的部分，就能很簡單的進行「一次性」新增、刪除或修改動作。\n\n舉例來說，如果一段文章出現了 50 次「A」，要把「A」修改為「B」，若不使用變數則得要手動修改 50 次才辦得到，使用變數的話就能夠一次將全部的「A」同時改為「B」。\n\n## 建立變數\n\n要使用「變量」積木前需要先建立變數 ( 將變數命名 )，點擊灰色的「建立變數」積木，跳出「新變數名稱視窗」，輸入想命名的變數名稱，按下確定，就可以看到新建立的變數了。\n\n![](../../assets/images/upload_0fce028e7d242c203e4960b091f11b2e.png)\n\n![](../../assets/images/upload_93ad649f0dab2b6289626cf5b8f8e88b.png)\n\n## 設定變數\n\n設定變數表示賦予變數一個值，可以將變數設定為一串英文字或數字。\n\n![](../../assets/images/upload_dc7c58f706e8ddf25f1c432993c043a0.png)\n\n為了要在 Web:AI 開發板的螢幕上顯示結果，我們需要搭配「LCD 顯示文字」積木。在設定完變數後，下方放入「LCD 顯示文字」積木，再將變數積木放入裡面，按下執行，就可以看到螢幕上顯示「100」了。\n\n![](../../assets/images/upload_7be72c49e8dd9ad0bfe9fc02598ad5f8.png)\n\n## 變數覆蓋性質\n\n由於程式語言有「後面覆蓋前面」的特性，所以如果變數名稱相同，後面設定的值會覆蓋掉前面設定的值。\n\n以下方的積木為例子，將「變數 Webduino」設定 3 次值，搭配「LCD 顯示文字」積木，按下執行，可以看到 LCD 螢幕最後呈現的結果為「Web:AI」\n\n![](../../assets/images/upload_44fb13ee1a82c6ec5c19673f2d48f2fa.png)\n\n## 變數改變\n\n變數改變表示「讓變數的值改變多少」，假設原本變數的值為 1，使用變數改變 1 之後，這個變數就會變成 2；同理，如果使用變數增加 -1，那麼這個變數就會變成 0。\n\n![](../../assets/images/upload_d180e41da4376d191440a13a6800d03a.png)\n\n設定變數的值為 100，使用「變數增加」積木將變數增加 1，可以看到螢幕顯示 101。\n\n![](../../assets/images/upload_400365feb4d61698a392357ce7baa995.png)"}, "/WebAI/zh_tw/Programming/Basic/Text.html": {"title": "文字", "content": "# 文字\n\n文字積木除了可以顯示有意義的詞彙，也可以透過相加的方式把文字組合，或是在一段詞彙中尋找對應的字詞或字母，甚至也可顯示語音辨識的內容或物聯網串感器的狀態。\n\n## 指定文字 ( 英文、數字 )\n\n「指定文字」積木可以輸入指定的英文數字，透過 LCD 螢幕顯示出來。\n\n![](../../assets/images/upload_7cc527f72f049af40d1eb726dc8fea57.png)\n\n如下方程式，螢幕顯示「Web:AI」。\n\n![](../../assets/images/upload_0d7af52d407ad9cccdd3ec14ee597a8f.png)\n\n## 字串組合\n\n「字串組合」積木可以把不同的文字積木組合成一段文字。\n點擊紫色的「設定」按鈕，將「項目」積木加入字串組合中，可以增加文字的數量。\n\n![](../../assets/images/upload_ba0366fd7d1d11b7c23e5d858166e8cb.png)\n\n### 範例：顯示 3 個字串\n\n在「字串組合」積木中放入 3 個文字積木，輸入 A、B、C，按下執行，可以看到 Web:AI 螢幕畫面顯示「ABC」。\n\n![](../../assets/images/upload_f08134e439e978452a3b87b89103dae2.png)\n\n## 在變數後方加入文字\n\n「在變數後加入文字」積木能夠在原本變數的內容後方增加額外文字。\n\n![](../../assets/images/upload_b4d3fe0e18f006473fb612187163a5a5.png)\n\n### 範例：在科目名稱後面顯示成績\n\n1. 設定「變數 score」，後方用「文字」積木放入科目名稱「Math:」\n2. 使用「在變數後加入文字」積木對「變數 score」加入科目分數「95」\n3. 按下執行，就可以看到 Web:AI 螢幕顯示「Math:95」\n\n![](../../assets/images/upload_673d6168873eb8b7ba7584bb6582c874.png)\n\n## 文字長度\n\n「文字長度」積木可以取得一串文字的總字數。\n\n![](../../assets/images/upload_5808319d598ea5b994d94138b5a35ee7.png)\n\n> 英文字以「字母」為單位，且空白、標點符號也算是一個字元。\n\n### 範例：算出有多少字元\n\n1. 設定「變數 length」，複製一串英文字母或文章貼上\n2. 使用「LCD 顯示文字」積木顯示「變數 length」\n3. 按下執行，就可以看到全部的字元數量，如英文字母有 26 個。\n\n![](../../assets/images/upload_e2abe019b553328bf839d0b5e44399a4.png)\n\n## 文字為空\n\n「文字為空」積木可以判斷積木內是否存在文字，若不存在文字，回傳「是 ( true )」，並執行後續動作。\n\n![](../../assets/images/upload_8fa632f24109f1ee35c2d18878a43166.png)\n\n### 範例：是否存在文字\n\n1. 使用邏輯積木，判斷是否存在文字\n2. 如果文字為空，執行 LCD 螢幕顯示「T」；如果存在文字，LCD 螢幕顯示「N」\n\n![](../../assets/images/upload_3e69fecaf61a1c2bbd68ca6ff34e482a.png)\n\n## 尋找文字出現位置\n\n「尋找字串出現位置」積木會回傳指定文字在一段文字中出現的位置，可以選擇第一個出現的位置或最後一個出現的位置。\n\n![](../../assets/images/upload_e3c41207af0cd8d944c9224b03a5004f.png)\n\n### 範例：找出 W 是第幾個字母？\n\n1. 設定「變數」積木為字串 A~Z\n2. 設定「變數 W」並放入「尋找字串出現位置」積木\n3. 使用「LCD 顯示」積木顯示「變數 W」\n4. 按下執行，可以看到 W 是第 23 個英文字母\n\n![](../../assets/images/upload_73710f9b24477d9b8ed6f6c9fad85abe.png)\n\n## 取得指定位置的文元\n\n「取得指定位置的文元」積木會取出指定位置的文元，下拉選單共有五種指定位置，分別是第幾個、倒數第幾個、第一個、最後一個和隨機位置。\n\n![](../../assets/images/upload_7457eeb7b38d2650066aca48ea87519d.png)\n\n### 範例：尋找第 23 個英文字母\n\n延續上面範例，找出第 23 英文字母，並用螢幕顯示出來。\n\n1. 設定「變數」積木為字串 A~Z\n2. 設定「變數 23」並放入「取得指定位置的文元」積木\n3. 使用「LCD 顯示」積木顯示「變數 23」\n4. 按下執行，可以看到第 23 個英文字母是 W\n\n![](../../assets/images/upload_353f0bc5c91a3753559cc25ccbca22ef.png)\n\n## 取得指定區間的文字\n\n「取得指定區間的文字」積木會取出一段指定區間內的文字，需注意的是**第一個空格的數字要比第二個空格內的數字小**。\n\n![](../../assets/images/upload_0feebf92704b1b61ed64f445d1608555.png)\n\n### 範例：在句子中找出指定區間的字元\n\n1. 使用「變數」積木和「文字」積木，並輸入一段句子 **Let's try Web:AI!**\n2. 設定取得第 10 字元 ~ 倒數第 2 字元\n3. 執行後可以看到 LCD 螢幕顯示 **Web:AI!**\n\n![](../../assets/images/upload_4a07b46184007fb2f33942e39f537a3e.png)\n\n## 轉換大小寫\n\n「轉換大小寫」積木可以針對「英文字」進行大小寫轉換，包含全部轉大寫、全部轉小寫或是首字母大寫。\n\n![](../../assets/images/upload_4d01cbf73ebf502d99461e0ac7161d2c.png)\n\n### 範例：讓英文字不斷變換大小寫\n\n1. 使用 2 個「LCD 顯示文字」積木，裡面分別放入「轉成英文大寫」積木及「轉成英文小寫」積木\n2. 在「轉換大小寫」積木內輸入英文字\n3. 使用「重複無限次」積木，並用「等待」積木設定間隔時間各 1 秒\n4. 按下執行，可以在 Web:AI 螢幕看到 **ABCDEFG** 不斷變換大小寫\n\n![](../../assets/images/upload_80e1c409393376666853fb69c3c0a794.gif)\n\n## 消除空格\n\n「消除空格」積木可以消除一段文字中左邊、右邊或左右兩邊的空白字元。\n\n![](../../assets/images/upload_51c9f50f67c12904166e7e09057479ed.png)"}, "/WebAI/zh_tw/Programming/Advanced/Image.html": {"title": "三、影像訓練", "content": "# 三、影像訓練\n\nWeb:AI 影像辨識分為 **影像分類** 以及 **物件追蹤**，可以使用 Web:AI 開發板拍攝影像上傳至 Webduino 影像訓練平台進行影像訓練，將訓練完成的模型下載，再使用程式積木執行影像辨識。\n\n## 影像辨識流程\n\n進行影像辨識的流程中，需要先分別建立影像分類，接著選擇要建立的模型種類 ( 影像分類、物件追蹤 )，並將分類放入模型中，就可以使用模型來進行影像辨識了。\n\n![](../../assets/images/upload_499be377eb3ef3848cd92334209b9b78.png)\n\n## A. 登入影像訓練平台\n\n1. 點擊連結進入 [Webduino 影像訓練平台](https://vision.webduino.io)。\n\n   ![登入畫面](../../assets/images/upload_c05bf863042a5e058ff175a0bdfc1ecf.png)\n\n2. 點擊「Register」按鈕註冊帳號或使用 Google、FB 帳號直接登入。\n\n   ![同意授權](../../assets/images/upload_5c92d56778b31b686d9116fe16d79bfd.png)\n\n3. 點擊「同意授權」，進入 Webduino 影像訓練平台。\n\n## B. 建立分類\n\n1. 在 Webduino 影像訓練平台中可以看到左側的側邊欄有「分類」和「模型」兩個選項，點擊「分類」進入分類列表。\n\n   ![分類列表](../../assets/images/upload_95f140f81372466c615d54ec195f0268.png)\n\n2. 點擊藍色「新增」按鈕，跳出「建立分類」視窗。\n\n   ![建立分類](../../assets/images/upload_8a3c86c0cd8325837d4ccdddf39badb0.png)\n\n    -  輸入分類名稱，**請勿輸入中文、空格、符號**\n    -  選擇分享狀態\n    -  影像上傳方式點選「Web:AI」，進入下一步\n\n   ![](../../assets/images/upload_51dee50233ff9b3067dbde3e1179b8e7.jpg)\n\n    - 輸入要拍照的數量\n    - 輸入 Web:AI 開發板的 DeviceID\n    - 選擇是否旋轉鏡頭\n        - 是：使用後鏡頭 ( 鏡頭在螢幕背面 )\n        - 否：使用前鏡頭 ( 鏡頭和螢幕在同一側 )\n     > 目前因為鏡頭旋轉功能外殼尚未上市，因此旋轉鏡頭選項**不需勾選**，敬請期待！\n\n3. 點擊「建立分類」按鈕\n\n   ![](../../assets/images/upload_26143c122bdc6adeac5cf1bb124805fa.png)\n\n4. 看到「傳送指令成功」訊息，就可以開始使用 Web:AI 開發板拍照。\n\n## C. 使用開發板拍攝影像\n\n傳送指令成功後，開發板會重新啟動，進入拍照模式。\n\n### 拍照模式\n\n- 左上角白色數字：目前拍照張數\n- L 按鈕：拍攝照片\n- R 按鈕：調整白框大小\n- 中間白色方框：拍照時，讓拍攝物件跟方框相當大小\n\n  ![](../../assets/images/upload_cf63b2e27ef9efa9f58fe5127e8447a7.png)\n\n讓**拍攝物件跟方框相當大小**時按下 **L 按鈕** 拍攝，並且稍微轉動角度，拍攝不同角度影像。\n\n### 上傳影像\n\n1. 拍完設定的照片數量後，畫面會變全黑，開始上傳圖片。\n\n   ![](../../assets/images/upload_bc218c4a4f6d483fed0da9390e9418d6.png)\n\n2. 等待上傳完成後，畫面中央會顯示白色 ok，正下方顯示上傳時間。\n\n   ![](../../assets/images/upload_746aa7aef3c1e1fb295eb7470ad46a11.png)\n\n\n3. 點擊視窗中的 ✕ 或「回到主畫面」，將視窗關閉。\n\n### 建立 2~4 個分類\n\n進行影像辨識時，模型內需要放入 2~4 個分類才能進行辨識，\n因此重複上述 **建立分類**、**使用開發板拍攝影像** 步驟，建立兩個以上的分類。\n\n## D. 建立模型\n\n1. 建立完分類後，在左側的側邊欄選擇「模型」，進入模型列表。\n\n   ![模型列表](../../assets/images/upload_23e1965f689c02c67697c9a98e97bb72.png)\n\n2. 點擊藍色「新增」按鈕，跳出「新增模型」視窗。\n\n   ![](../../assets/images/upload_4aee1e16f5e3bd4278a1d948575f85c7.png)\n\n    - 輸入模型名稱，**請勿輸入中文、空格、符號或使用過的名稱**\n    - 選擇模型種類 ( 影像分類、物件追蹤 )\n        ![](../../assets/images/upload_04e57bcc782a11a41b773fd0286a7fb7.png)\n    - 選擇分享狀態\n    - 模型建立方式點選「挑選分類」\n\n3. 從分類列表中點選 2~4 個要進行影像辨識的分類，點擊「建立模型」。\n\n   ![新增模型](../../assets/images/upload_3d978d4eed334b5f7460c9d2a847be91.png)\n\n4. 等待模型訓練完成後，就可以在模型列表中找到建立的模型，並且可以看到模型內的**分類名稱**以及**模型種類**。\n\n   ![](../../assets/images/upload_e70d83463d16c7cc32c71c18eed6018f.png)\n\n   > 因為物件追蹤的演算法較複雜，因此訓練時間較久是正常的！\n\n## E. 下載模型\n\n1. 點擊要進行影像辨識的模型，跳出「模型選項」視窗。\n\n    a. 點擊下載模型。\n\n      ![模型選項](../../assets/images/upload_421b3cf5d2bacd5a44e760e55acbaab2.png)\n\n    b. 輸入開發板 Device ID。\n\n    ![](../../assets/images/upload_85120262df264ff7c6ef18185de48ff0.jpg)\n\n    c. 點擊「下載模型」後傳送指令。\n\n   ![](../../assets/images/upload_8bb31a114b474f607cfd999f12b2de6d.png)\n\n2. 點擊「下載模型」按鈕，出現「傳送指令成功」訊息即開始下載模型。\n\n   ![下載模型](../../assets/images/upload_4c9f64a09ca70542b7bd7cf1a83c276b.png)\n\n3. 完成 100% 後，畫面會顯示 **ok** 字樣代表完成下載，就可以開始進行影像辨識了。\n\n## F. 使用程式積木執行影像辨識\n\n在程式積木平台中，可以分別使用影像分類和物件追蹤積木，來達到不同的影像辨識。\n\n### 影像分類\n\n1. 先依照上面步驟，將訓練過的影像分類模型下載到 Web:AI 開發板中。\n\n2. 開啟 Web:AI 程式積木平台。\n\n3. 使用「設定模型」積木，輸入模型名稱，\n在陣列內放入和分類數量相同的積木，按照模型列表的**分類順序**輸入**分類名稱**。\n並將寬、高都輸入 224。\n\n   >- 使用 Webduino 影像訓練平台訓練的模型尺寸為 224*224。\n   >- 自行使用其它工具訓練，則需輸入各別的尺寸。\n\n   ![](../../assets/images/upload_5f7a955964d7920ceeaad38699898af5.png)\n\n4. 在下方加入「無限重複」積木，裡面放入「開始辨識影像」積木和「LCD 顯示文字」積木。\n\n    ![](../../assets/images/upload_a000127272667e0c386638e579685627.png)\n\n5. 「LCD 顯示文字」積木內放入「字串組合」積木，後方放入「取得辨識到的影像 ( 名稱 )」積木、「文字」積木輸入底線、「取得辨識到的影像 ( 信心度 )」積木。\n\n    ![](../../assets/images/upload_7c33811336f28996d01ff70a6a7586cb.png)\n\n6. 程式編輯完成後，按下右上角綠色「執行」按鈕，出現「正在努力搬運 Blockly 中...」和「正在組裝積木...」，讀取結束後 Web:AI 開發板會自動開啟辨識畫面。\n\n7. 使用鏡頭對準辨識物件就能看到文字顯示辨識結果和信心度。\n\n   ![影像辨識結果](../../assets/images/upload_18ff3d4a326a6123cb54fb20940150f9.png)\n\n> 若要使用其它模型來進行影像辨識，需要回到步驟 **下載模型**，再次下載模型。"}, "/WebAI/zh_tw/Programming/Advanced/FileRW.html": {"title": "檔案讀寫", "content": "# 檔案讀寫\n\nWeb:AI 檔案讀寫功能能夠將鏡頭拍攝的圖片存入，並透過 LCD 螢幕顯示的功能將儲存的圖片展示出來。透過檔案讀寫功能，可以讓 Web:AI 開發板實現照相機、自拍等影像應用。\n\n> 更多相關應用，可以參考：[LCD 顯示圖片](https://bpi-steam.com/WebAI/zh_tw/Programming/WebAI/LCD.html#LCD-%E9%A1%AF%E7%A4%BA%E5%9C%96%E7%89%87)。\n\n## 寫入檔案\n\n「寫入檔案」積木可以將鏡頭捕捉到的影像儲存在開發板記憶體中，再配合其它積木展示。\n\n![](../../assets/images/upload_0467957e1aab1208df0cc8fb9732b98a.png)\n\n## 圖片 ( 檔案 )\n\n「圖片 ( 檔案 )」積木要使用的圖片，能夠根據圖檔的名稱加以讀取並使用。\n\n![](../../assets/images/upload_9844d06a3efc96392cd124fc7b783432.png)\n\n## 範例：自拍照相\n\n1. 先設定拍照狀態，使用「無限重複」積木讓開發板保持在拍照狀態。\n\n    ![](../../assets/images/upload_71ff8223a0f878a61c8e80c7fb05d899.png)\n\n2. 使用「變數 show」來表示相機的狀態，開發板一開始會保持在拍照狀態。\n \n   ![](../../assets/images/upload_5c5a38e6240f641e002335da3812879c.png)\n\n    - 真：展示拍攝的照片\n    - 假：拍照狀態\n\n3. 設定當 L 按鈕按下，會拍攝照片，並同時顯示「儲存中...」和「完成」。\n\n   ![](../../assets/images/upload_1f2b11380cf2372c9ca3672bd50efa3f.png)\n\n4. 設定當 R 按鈕按下，會顯示拍攝的照片。\n\n    ![](../../assets/images/upload_d7494a77b30b1496ed4d98822662f13e.png)\n\n5. 設定當 R 按鈕放開，「變數 show」為**假**，回到拍照狀態。\n\n    ![](../../assets/images/upload_90628981c80e3f7c9dde48fdf506bfe6.png)\n\n6. 完成後開始執行，按下開發板 L 按鈕拍照，按下 R 按鈕展示。\n\n    ![](../../assets/images/upload_4926d849dc1ccd16171bfbe981df306f.png)\n\n![](../../assets/images/upload_137463eb3594996be60e6b4514feba5e.gif)"}, "/WebAI/zh_tw/Programming/Advanced/QRCode.html": {"title": "掃描條碼", "content": "# 掃描條碼\n\nWeb:AI 具備條碼掃描功能，能夠透過開發板上的鏡頭偵測條碼，並將條碼內容顯示在螢幕上。\n\n## 照相畫面\n\n「拍攝照片」積木可以使用鏡頭拍攝一次畫面，配合「無限重複」積木就可以達成照相鏡頭的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「變數」積木替拍攝照片命名，透過命名來做出更多變化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上兩種積木組合方式執行後會達到相同的結果，差別在於若是要做出更多應用變化，就需要搭配「變數」積木的命名。\n\n### 畫面上畫文字\n\nWeb:AI 能夠在螢幕畫面或圖片上顯示文字，這時就需要搭配「圖片上畫文字」積木。\n\n> 請特別注意，「圖片上畫文字」積木需要放在「LCD 顯示圖片」積木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 讀取圖片的 QRcode\n\n「讀取圖片的 QRcode」積木能夠讀取圖片上的     QRcode 資訊，並透過「LCD 螢幕」積木顯示出來。\n\n![](../../assets/images/upload_fffaf7ffa609a3acfc3f5e733a88c047.png)\n\n\n## 範例：QRcode 掃描\n\n1. 使用「變數」積木將拍攝照片命名為「畫面」。 \n\n    ![](../../assets/images/upload_2faf10807186f50299cd8d55f2d87f65.png)\n\n2. 使用「圖片上畫文字」積木，填入「畫面」及「讀取圖片的 QRcode」積木，代表在畫面上顯示 QRcode 的資訊。\n\n    ![](../../assets/images/upload_0c662efb60008d34d600fcfcc2e91587.png)\n\n3. 放入「LCD 顯示圖片」積木，設定為「畫面」。\n\n    ![](../../assets/images/upload_247a402fccd1886ecd12846df20cd917.png)\n\n4. 前面步驟完成後代表能夠掃描一次 QRcode，為了能夠不斷掃瞄，在最外層放入「無限重複」積木。\n\n    ![](../../assets/images/upload_bf87cd1a75b15fbf75bc21d972fb1b25.png)\n\n5. 完成後按下執行，使用 Web:AI 的鏡頭掃描 QRcode，就可以看到螢幕顯示 QRcode 資訊了。\n\n   ![](../../assets/images/upload_d393959c360f2933fa83169f9791d172.png)\n\n    ![](../../assets/images/upload_dc36ceb0e810940ce6371095d09c5a09.png)"}, "/WebAI/zh_tw/Programming/Advanced/Face.html": {"title": "人臉追蹤", "content": "# 人臉追蹤\n\n在 AI 人工智慧中，最重要的就是人臉識別，可以根據人臉的特徵，如：眼睛、鼻子、嘴巴、鼻子等。透過這項技術，可以偵測到是否有人經過以及畫面中的人數，進一步做出監視器等應用。\n\n而 Web:AI 的人臉追蹤技術，可以做到追蹤人臉的座標位置，以及人臉在畫面中的寬度、高度，更配合疫情時事，增加了口罩辨識的功能，讓 AI 結合生活應用，更方便用於教學。\n\n## 照相畫面\n\n「拍攝照片」積木可以使用鏡頭拍攝一次畫面，配合「無限重複」積木就可以達成照相鏡頭的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「變數」積木替拍攝照片命名，透過命名來做出更多變化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上兩種積木組合方式執行後會達到相同的結果，差別在於若是要做出更多應用變化，就需要搭配「變數」積木的命名。\n\n### 畫面上畫文字\n\nWeb:AI 能夠在螢幕畫面或圖片上顯示文字，這時就需要搭配「圖片上畫文字」積木。\n\n> 請特別注意，「圖片上畫文字」積木需要放在「LCD 顯示圖片」積木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 取得圖片的人臉資訊\n\n「取得圖片的人臉資訊」積木能夠在畫面中判斷人臉特徵，並將偵測到的人臉用白框框起來。\n\n![](../../assets/images/upload_deef20fc56ca67c2a61f0dff7ffa4865.png)\n\n## 取得人臉資訊\n\n「取得人臉資訊」積木代表從鏡頭中的人臉讀取到的資訊，包含位置 ( x 座標、y 座標 )及大小 ( 寬度、高度 )。\n\n![](../../assets/images/upload_300c4b47308ba5100134338d8f53ce3e.png)\n\n## 判斷人臉有無戴口罩\n\n讀取到畫面的人臉後，可以進一步判斷是否配戴口罩，透過「判斷人臉有無戴口罩」積木，可以針對人臉是否戴著口罩回傳「是」或「否」，更能做出口罩偵測機的應用。\n\n![](../../assets/images/upload_bb7707e5b01fea74606915bc5f4cd6a7.png)\n\n## 範例：追蹤人臉座標\n\n1. 先使用「變數」積木將拍攝照片命名為「畫面」，做出鏡頭畫面。\n\n   ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 使用「變數」積木，將「取得圖片的人臉資訊」積木命名為「人臉資訊」。\n    現在執行後可以在畫面中框出人臉。\n\n    ![](../../assets/images/upload_396fb589d4157779453859ca5fe4c8e2.png)\n\n3. 使用「圖片上畫文字」積木，放入「文字」積木，做出人臉的 xy 座標。\n\n   ![](../../assets/images/upload_b96f96011107dd369cc944a6705d8edc.png)\n\n4. 按下執行，可以看到開始追蹤人臉，並同步顯示人臉的位置座標。\n\n## 範例：口罩偵測器\n\n1. 先使用「變數」積木將拍攝照片命名為「畫面」，做出鏡頭畫面。\n\n    ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 使用「變數」積木，將「取得圖片的人臉資訊」積木命名為「人臉資訊」。\n    現在執行後可以在畫面中框出人臉。\n\n    ![](../../assets/images/upload_396fb589d4157779453859ca5fe4c8e2.png)\n\n3. 使用「圖片上畫文字」積木，放入「文字」積木，顯示「口罩偵測中...」。\n\n    ![](../../assets/images/upload_ca1d491ec5330d6f497741e0a5d1cda9.png)\n \n4. 在這裡加入「邏輯」積木，用來判斷人臉是否配戴口罩。\n    - 配戴口罩 = 真\n    - 配戴口罩 = 假 \n\n    ![](../../assets/images/upload_8ce4a924ea5ece392c3c0e5f025cf75b.png)\n\n5. 在「邏輯」積木後放入後續要執行的動作，如：\n    - 配戴口罩 = 真：顯示綠色「安全」\n    - 配戴口罩 = 假：顯示紅色「警告！」\n\n    ![](../../assets/images/upload_80741458ce4b6175eeb718ce5cf239d1.png)\n\n6. 按下執行後，就能夠開始進行口罩辨識。\n可以看到沒配戴口罩時，螢幕顯示紅色「警告！」，配戴著口罩時，螢幕顯示綠色「安全」。"}, "/WebAI/zh_tw/Programming/Advanced/Object.html": {"title": "物件追蹤", "content": "# 物件追蹤\n\n1. 先依照上面步驟，將訓練過的物件追蹤模型下載到 Web:AI 開發板中。\n\n2. 開啟 Web:AI 程式積木平台。\n\n3. 使用「設定模型」積木，輸入模型名稱，\n在陣列內放入和分類數量相同的積木，按照模型列表的**分類順序**輸入**分類名稱**。\n並將寬、高都輸入 224。\n\n   >- 使用 Webduino 影像訓練平台訓練的模型尺寸為 224*224。\n   >- 使用開發板預設的模型請輸入 320*240。\n   >- 自行使用其它工具訓練，則需輸入各別的尺寸。\n\n   ![](../../assets/images/upload_ac15f02988b89b8dc37d75892320e602.png)\n\n4. 在下方加入「無限重複」積木，裡面放入「開始偵測物件」積木和「LCD 顯示文字」積木。\n\n   ![](../../assets/images/upload_4216bd52f357fbf566cc5f86857aeef5.png)\n\n5. 編輯物件追蹤的相關程式，讓偵測時可以讀取到模型 ( 陣列 ) 內的分類，並且在螢幕上顯示需要的數值，如下圖設定：\n\n   ![](../../assets/images/upload_22315fc7fc92b0ebb011c02fba679ebf.png)\n\n6. 將編輯好的程式放在「開始偵測物件」積木下方。\n\n   ![](../../assets/images/upload_89d2a0352b277bb63e702afa93c5285e.png)\n\n7. 程式編輯完成後，按下右上角「執行」按鈕，出現「正在努力搬運 Blockly 中…」和「正在組裝積木…」，讀取結束後 Web:AI 開發板會自動開啟辨識畫面。\n\n8. 使用鏡頭對準辨識物件就能看到白框顯示辨識結果和座標。\n\n   ![](../../assets/images/upload_530ef50e37b082fdaea2397df9d0832f.png)"}, "/WebAI/zh_tw/Programming/Advanced/Speech.html": {"title": "語音辨識", "content": "# 語音辨識\n\nWeb:AI 能夠將收錄到的聲音轉換成訊號，經過處理後儲存成聲音模型，當偵測到聲音時，會開始和開發板儲存的聲音模型比對音色、頻率，進而得到辨識結果。\n\n## 錄製語音\n\n「錄製語音」積木能夠透過開發板上的麥克風接收聲音訊號，並將訊號轉換成聲音模型儲存，開發板中最多可以同時儲存 10 個模型並做辨識。\n\n- 錄音的時間約 1.5 秒\n- 錄製完的聲音模型會一直存放在開發板中，除非經過韌體更新或是錄製相同編號模型覆蓋。\n\n![](../../assets/images/upload_35bfe0c86f4fe079f23d9c4ed1cf72e1.png)\n\n> 使用「錄製語音」積木建立聲音模型並不會覆蓋 **教學範例卡：語音互動** 中的聲音模型，可以放心使用！\n> \n> 歡迎參考：[教學範例卡使用教學: 語音互動](https://bpi-steam.com/WebAI/zh_tw/Unboxing/Card.html#B.-%E8%AA%9E%E9%9F%B3%E4%BA%92%E5%8B%95)。\n\n## 語音辨識\n\n當開發板的麥克風偵測到聲音時，如果符合聲音模型，就會自動執行「語音辨識」積木中的內容。\n\n![](../../assets/images/upload_84a175743d91231364e358a130dc5fe9.jpg)\n\n「語音辨識」積木的號碼和名稱會和「錄製語音」積木互相對應。\n\n![](../../assets/images/upload_e61839237fec9517099e535434064a9f.png)\n\n## 語音辨識門檻\n\n因為每個人的音色、頻率都不同，所以針對不同應用需要調整辨識門檻才能達到合適的效果。\n而「語音辨識門檻」是語音辨識的精準度，門檻越高代表聲音越像才會辨識成功。\n\n> 「語音辨識門檻」積木需要放在「語音辨識」積木之前！\n\n![](../../assets/images/upload_d5a69cbf6a0cff9e9bf5c5c66cb077a5.jpg)\n\n## 範例：聲控圖案\n\n### 錄音\n\n1. 結合「畫文字」積木和「錄製語音」積木，錄音時顯示「請說 XX」；錄音完成時顯示「錄音 XX 完成」。\n\n    ![](../../assets/images/upload_874d1de7d96a0bce1df0c6b344ea4c65.png)\n\n2. 做出另一組相同的積木，如下圖：\n\n    ![](../../assets/images/upload_278aa7293c58b306ce8359fda8feac76.png)\n\n3. 將 1. 和 2. 的兩組積木組合，並用「等待」積木和「清除 LCD 畫面積木」隔開，再放入「函式」積木中，將函式命名為「錄音」。\n\n    ![](../../assets/images/upload_277fede13002d8fcfe8e205a61494216.jpg)\n\n4. 將函式「錄音」放入「開發板」積木中，在下方再放入其它積木，如下圖即完成錄音程式。\n\n   ![](../../assets/images/upload_2074f0bf5244ad2996764e6ee4f5edd7.jpg)\n\n### 辨識\n\n1. 首先放入「語音辨識門檻」積木，可以根據辨識的狀況改變門檻高低。\n\n   ![](../../assets/images/upload_8b9cd5eb6eb2a855a7e8560c7b70c765.jpg)\n\n2. 使用「語音辨識」積木，當聽到錄製的單詞時，會做出後續的程式。\n\n    ![](../../assets/images/upload_608e2765058f13e124cedfcbe1521f1c.jpg)\n\n3. 複製 2. 的積木，並做出另一組積木。\n\n    ![](../../assets/images/upload_4b8c00e2106272522dfaaf87b8811d4f.jpg)\n\n4. 將積木組合，按下執行即可開始語音辨識。\n\n![](../../assets/images/upload_6a2118831450e68215943573fe374108.jpg)\n\n![](../../assets/images/upload_c072b055bcc2a28e37dfff15ff464567.gif)\n\n\n<!-- ## 範例：辨識 4 色語音\n\n### 錄音\n\n1. 結合「畫文字」積木和「錄製語音」積木，並用「函式」積木將積木組合。\n\n    ![](../../assets/images/upload_7f575d4dbc80a72fad033bfd904d5938.jpg)\n\n2. 複製出 3 組同樣的積木，更改成「藍色」、「綠色」、「黃色」，做出如下圖。\n\n> 記得更改：\n> - 函式名稱\n> - 畫文字\n> - 語音號碼\n> - 語音名稱\n\n![](../../assets/images/upload_4304cc17c12b575ab5e505487ce254c2.jpg)\n\n3. 將「函式」積木放入「開發板」積木中，並用「清除 LCD 畫面」積木區隔，避免文字被覆蓋。\n\n    ![](../../assets/images/upload_87fc803ae4e31489b44b56ea4525dee3.jpg)\n\n### 辨識 -->"}, "/WebAI/zh_tw/Programming/Advanced/Color.html": {"title": "顏色追蹤", "content": "# 顏色追蹤\n\n駕駛看到紅燈就知道要停、看到綠燈知道要前進，這是因為人類能夠透過眼睛大腦感測並判別顏色，進一步根據看到的顏色做出反應，而 Web:AI 開發板也有一樣的能力。\n\n我們可以使用 [Webduino 選色器](https://ai-blockly.webduino.io/pickerLABColor.html) 取出拍攝到的指定顏色，告訴程式偵測到此顏色時，需要做出什麼樣的互動，讓 Web:AI 能夠像駕駛一樣對不同顏色做出反應。\n\n## 照相畫面\n\n「拍攝照片」積木可以使用鏡頭拍攝一次畫面，配合「無限重複」積木就可以達成照相鏡頭的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「變數」積木替拍攝照片命名，透過命名來做出更多變化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上兩種積木組合方式執行後會達到相同的結果，差別在於若是要做出更多應用變化，就需要搭配「變數」積木的命名。\n\n### 畫面上畫文字\n\nWeb:AI 能夠在螢幕畫面或圖片上顯示文字，這時就需要搭配「圖片上畫文字」積木。\n\n> 請特別注意，「圖片上畫文字」積木需要放在「LCD 顯示圖片」積木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 偵測圖片顏色資訊\n\n「偵測圖片顏色資訊」積木可以輸入指定的 LAB 色碼，當 Web:AI 鏡頭拍攝到顏色時，就會將顏色區塊框起來。\n\n> 有關 LAB 色彩空間的原理，請參考：[CIELAB色彩空間維基百科](https://zh.wikipedia.org/wiki/CIELAB%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4)。\n\n![](../../assets/images/upload_61b20aeccd46f1fe52779a90f8f9d647.png)\n\n## Webduino 選色器\n\n### A. 進入 Webduino 選色器\n\n對著「偵測圖片顏色資訊」積木按下右鍵，點擊「小工具」即可進入 [Webduino 選色器](https://ai-blockly-staging.webduino.io/pickerLABColor.html)。\n\n![](../../assets/images/upload_9077f489b8b1b0a15a75af2fe6e84cd3.png)\n\n### B. 使用方式\n\nWebduino 選色器的介面及使用方式如下：\n\n1. 視訊畫面：左側畫面為電腦視訊鏡頭拍攝到的畫面，將被取色的物品放置在電腦鏡頭前方拍攝。( 記得開啟電腦攝影機權限！ )\n\n2. 選取顏色：右側畫面為選取到的顏色。\n    - 白色：選取的顏色\n    - 黑色：被過濾掉的顏色\n\n3. 調色拉桿：調動 6 個拉桿，讓 \" 選取顏色 \" 中僅剩選取的色塊是白色。( 拉桿分別控制：亮度、紅綠、藍黃 )\n\n4.  貼上色碼：當顏色選取完成後，下方色碼複製，貼到「偵測圖片顏色資訊」積木，即可完成顏色追蹤設定。\n\n    ![](../../assets/images/upload_a015678533396a35f35660849309191f.png)\n\n5. 查詢色碼：未來需要查詢特定色碼是何種顏色時，可以將色碼貼在 \" 查詢色碼 \" 欄位中，按下送出即可查看 \" 選取顏色 \"。\n\n![](../../assets/images/upload_4a10bebb64d2c24232564e6b91ee8f02.png)\n\n## 顏色資訊\n\n「顏色資訊」積木可以針對偵測的顏色，回報色塊的資訊，包含 x、y 座標、像素數量 ( 面積 )、旋轉角度。\n\n![](../../assets/images/upload_84cfa79bb468cf2f222ac47638c45c60.png)\n\n## 範例：追蹤紅色\n\n1. 先使用「變數」積木將拍攝照片命名為「畫面」，做出鏡頭畫面。\n\n    ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 取出「偵測圖片顏色資訊」積木，按下右鍵，點選選單中的「小工具」，進入 [Webduino 選色器](https://ai-blockly.webduino.io/pickerLABColor.html)。\n\n   ![](../../assets/images/upload_43053bf19337e8d198e460ae27143bd5.jpg)\n\n3. 使用選色器選取顏色，再將色碼貼到「偵測圖片顏色資訊」積木。\n\n    ![](../../assets/images/upload_2f8e15572550d5f43c0416f9159f09f1.png)\n\n    ![](../../assets/images/upload_3d56af3a2fc819eca79074beb9fb3571.jpg)\n\n4. 完成如下圖程式，執行後會將偵測到的紅色色塊用方框框起。\n\n    ![](../../assets/images/upload_206b75c80eed346c430a3ae416bfeaf7.png)\n\n5. 為了讓程式多一些互動，我們再設計讓開發板偵測到紅色時會告知「紅色」。\n\n> 設定 \" 像素素量 > 10 \" 是為了減少背景顏色的干擾，避免螢幕不斷顯示「紅色」。\n\n![](../../assets/images/upload_d30129fcd502c93120c41870009539ff.png)"}, "/WebAI/zh_tw/no_translate.html": {"title": "no_translate_title", "content": "---\ntitle: no_translate_title\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">no_translate_hint</div>\n<div>\n    <span id=\"visit_hint\">visit_hint</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}