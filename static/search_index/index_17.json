{"/PicoW_S3_doc/en/Arduino/Basic.html": {"title": "Use of onboard resources", "content": "# Use of onboard resources\n\nThis chapter mainly describes the basic usage of the peripherals of the PicoW-S3 main control board through some sample projects. Through the following projects, you can modify and complete your own projects.\nThe PicoW-S3 peripherals mainly include: UART, I2C, SPI, ADC, PWM, DAC, etc.\n\n## Preparation before starting\n\nThe MicorUSB on the BPI-PicoW-S3 development board uses the native USB interface of the ESP32-S3 instead of the traditional USB to TLL chip.\n\nIn order for your development board to download programs correctly, you need to set the BPI-PicoW-S3 to download mode, there are two methods:\n\n- Connect to the computer via USB, use tweezers to short the BOOT, then press the Reset button and release it, and finally disconnect the BOOT short.\n\n- In the state of disconnecting all power supplies, short-circuit BOOT, then plug the development board into the computer, and finally disconnect the BOOT-short circuit.\n\n![](../assets/images/PicoW-BOOT.png)\n\nAt this time, you can see more than one COM port in the device manager\n\n![](../assets/images/Device_manager.jpg)\n\nSelect this port in the IDE\n\n![](../assets/images/Device_manager_1.jpg)\n\n## Project 1 Serial port experiment\n\nIn the very first chapter, we uploaded a Blink program to test the LED status lights on the board. Now, we use the UART serial port and print the timing data every second.\n\n### Required components\n\nPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### Hardware connection\n\nNo other sensors are required for this project, so just connect the PicoW-S3 to a computer via USB.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it.\n\ncode show as below:  \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\nvoid setup()\n{\n  Serial.begin(115200); //Set serial communication baud rate\n}\nvoid loop()\n{\n  static unsigned long i = 0; //define variable i\n  Serial.println(i++); //output i after adding one\n  delay(1000); // delay 1 second\n}\n</code></pre>\n</details>\n\nAfter the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the PicoW-S3 motherboard. After the upload is complete, you need to press the reset button so that the code can run normally\n\n### Experimental phenomena\n\nAfter completing the upload in the previous steps, open the serial monitor that comes with the Arduino IDE, and you can see the following print information:\n\n![](../assets/images/Lesson1-1.png)\n\n## Project 2 PWM (breathing light)\n\nBreathing light, that is, let the PicoW-S3 drive the LED light through PWM to realize the brightness gradient of the LED, which looks like it is breathing. For an explanation of PWM, please read the Knowledge Extension section.\n\n### Required components\n\nPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\nLED X 1 (recommended to connect a resistor in series to limit current)\n\n![](../assets/images/led.png)\n\n### Hardware connection\n\nJust connect the LED to GPIO13 of PicoW-S3, the long one is connected to GPIO13, and the short one is connected to GND\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it.\ncode show as below: \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n#define LED_CHANNEL_0 0 //Set channel 0\n#define LED_TIMER_13_BIT 13 //Set 13-bit timer\n#define LED_BASE_FREQ 5000 //Set the timer frequency bit to 5000Hz\n#define LED_PIN 13 //Set LED light\n\nint brightness = 0; // LED brightness\nint fadeAmount = 1; // number of LEDs\n \n//Set the brightness of the led light\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255) {\n  //calculate duty cycle\n  uint32_t duty = (LED_BASE_FREQ / valueMax) * min(value, valueMax);\n  //set duty cycle\n  ledcWrite(LED_CHANNEL_0, duty);\n}\nvoid setup() {\n  ledcSetup(LED_CHANNEL_0, LED_BASE_FREQ, LED_TIMER_13_BIT); ledcAttachPin(LED_PIN, LED_CHANNEL_0);\n}\nvoid loop() {\n  ledcAnalogWrite(brightness); brightness += fadeAmount;\n \n  if (brightness <= 0 || brightness >= 255) {\n       fadeAmount = -fadeAmount;\n  }\n  delay(30);\n}\n\n</code></pre>\n</details>\n\nAfter typing, click the \"Compile\" button to check the code for errors. After confirming that there are no errors, you can start uploading, click the \"Upload\" button . The IDE will send the code to the PicoW-S3 board. After the upload is complete, you can see the LED light next to the Type-C start to \"breathe\"!\nNow let's review the code and hardware to see how it works.\n\n### Knowledge learning\n\nWhat is a PWM control signal?\n\nPWM (pulse-width modulation) pulse width modulation, the MCU (microcontroller) controls the on-off of the switching device, so that the output terminal gets a series of pulses of equal amplitude, and these pulses are used to replace the sine wave or the required waveform. As shown below:\n\n![](../assets/images/Lesson2-1.jpg)\n\nAmong them, tON is the high-level duration, tPWM is the period of the PWM wave, tPWM-tON is the low-level duration, and the duty cycle refers to the proportion of the high-level duration to the entire cycle, namely D=ton/tPWM.\n\n### Code Analysis\n\nThe PWM of the PicoW-S3 is much more advanced than the ordinary Arduino UNO. The analogWrite function cannot be simply used to drive the PWM, but the timer function and related frequency parameters need to be set to work.\n\n````\n#define LEDC_CHANNEL_0 0\n````\n\nDefines the channels used by the timer. PicoW-S3 has a total of 16 channels, and channel 0 is used here.\n\n````\n#define LEDC_TIMER_13_BIT 13\n````\n\nThe timer is defined as a 13-bit timer, that is, the maximum count of the timer is 2 to the 13th power.\n\n````\n#define LEDC_BASE_FREQ 5000\n````\n\nThis is the frequency at which the timer is set, in Hz. The next brightness and fadeAmount parameters represent the duty cycle of the PWM and the value for each change, respectively.\n\n````\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255)\n````\n\nThis function calculates the PWM duty cycle and sets the PWM duty cycle, similar to Arduino's analogWrite function. As you can see, the maximum value of the passed parameter is 255, which is for compatibility with analogWrite.\n\n````\nledcSetup(LEDC_CHANNEL_0, LEDC_BASE_FREQ, LEDC_TIMER_13_BIT);\nledcAttachPin(LED_PIN, LEDC_CHANNEL_0);\n````\n\nThese two functions are PicoW-S3 timer setting functions. The function prototype and principle are not described here. If you are interested, you can look at the underlying source code (source address: C:\\Users\\“your-PC”\\AppData\\Local\\Arduino15 \\packages\\esp32\\ hardware\\ adafruit_metro_esp32s2 \\0.0.3\\libraries\\ESP32\\), you only need to know how to use these functions to set the relevant timer.\n\nAbout what is a PWM signal, it has been explained before, and it will not be explained here.\n\n>Note: Any pin of PicoW-S3 can be configured as PWM output, you can try to modify the code to complete your project.\n\n## Project 3 ADC\n\nADC (analog-to-digital converter or A/D converter) refers to converting an analog signal into a digital signal. The ADC of PicoW-S3 is 13-bit, the maximum output value is 8191, while the Arduino UNO is 10-bit, and the maximum output value is 1023. Therefore, the accuracy is higher than that of Arduino UNO, and the conversion rate is faster, and in use Compatible with Arduino analogRead function, you can read it directly.\n\n### Required components\n\nAnalog angle sensor X 1\n\n![](../assets/images/Lesson3-1.png)\n\nBreadboard X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### Hardware connection\n\n Plug the potentiometer to the PicoW-S3 motherboard, and then plug the analog angle sensor to IO2 (IO2 is used in the experiment). After the components are connected, use the USB cable to connect the PicoW-S3 and the computer.\n\n ### Enter code\n\n Open the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. code show as below: \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n}\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  Serial.println(analogRead(2));\n  delay(100);\n}\n\n</code></pre>\n</details>\n\n After the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the PicoW-S3 motherboard. After the upload is complete, open the serial monitor of the Arduino IDE, rotate the analog angle sensor, and you can see the value changes in the serial monitor, as shown in the following figure:\n\n \n![](../assets/images/Lesson3-3.png)\n\n### Code Analysis\n\nSince the ADC of PicoW-S3 is fully compatible with Arduino, the analogRead function will not be explained too much here.\n \nNote: If you are not particularly familiar with the basic functions of Arduino, you can [click the link](https://www.arduino.cc/en/Tutorial/BuiltInExamples) to learn.\n\n## Project 4 I2C\n\nThe I2C of PicoW-S3 can be configured to any I/O port, and you can configure it by passing relevant parameters. For the convenience of use, we have configured I2C by default, which is fully compatible with Arduino, the default configuration pins can be seen in Chapter 1 Introduction. This project is based on I2C default configuration to drive OLED display.\n\nrequired components\n\nI2C OLED-12864 Display X 1\n\n![](../assets/images/Lesson4-1.png)\n\nBreadboard X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### Hardware connection\n\nPlug the PicoW-S3 motherboard into the breadboard, then plug the OLED display into the I2C port. (SDA is 33, SCL is 34) After the components are connected, use the USB cable to connect the PicoW-S3 and the computer.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. code show as below:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n#include <Wire.h>\n   int UG2864Address = 0x3C;//OLED UG2864 device 7-bit address\n \nprog_char F8X16[][16] PROGMEM =\n{\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0\n  0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1\n  0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//\"2\n  0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3\n  0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4\n  0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5\n  0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6\n  0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7\n  0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8\n  0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9\n  0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10\n  0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14\n  0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016\n  0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117\n  0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218\n  0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319\n  0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420\n  0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521\n  0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622\n  0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723\n  0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925\n  0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26\n  0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27\n  0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28\n  0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29\n  0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30\n  0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31\n  0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32\n  0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33\n  0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34\n  0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35\n  0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38\n  0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40\n  0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41\n  0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42\n  0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43\n  0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44\n  0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45\n  0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47\n  0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49\n  0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50\n  0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51\n  0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53\n  0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54\n  0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55\n  0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56\n  0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57\n  0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58\n  0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59\n  0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\\60\n  0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61\n  0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63\n  0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65\n  0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66\n  0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67\n  0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69\n  0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71\n  0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72\n  0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73\n  0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74\n  0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75\n  0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76\n  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77\n  0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79\n  0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80\n  0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81\n  0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83\n  0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84\n  0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86\n  0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87\n  0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89\n  0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90\n  0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91\n  0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92\n  0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93\n  0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94\n};\n \n \nchar ch_buf[17]={0};\nint RES = 6;//Gadgeteer PIN6\nint DC = 7;//Gadgeteer PIN3\n \nvoid Writec(unsigned char COM)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x00);\n  Wire.write(COM);\n  Wire.endTransmission();\n}\n \nvoid Writed(unsigned char DATA)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x40);\n  Wire.write(DATA);\n  Wire.endTransmission();\n}\n \nvoid SSD1306()\n{\n  Writec(0XAE);//display off\n  Writec(0X00);//set lower column address\n  Writec(0X10);//set higher column address\n  Writec(0X40);//set display start line\n  Writec(0XB0);//set page address\n  Writec(0X81);//set contract control\n  Writec(0XCF);// VCC Generated by Internal DC/DC Circuit\n  Writec(0XA0);//set segment remap  column address 127 is mapped to SEG0\n  Writec(0XA6);//normal / reverse   normal display\n  Writec(0XA8);//multiplex ratio\n  Writec(0X3F);//1/64\n  Writec(0XC0);//Com scan direction remapped mode. Scan from COM[N-1] to COM0\n  Writec(0XD3);//set display offset\n  Writec(0X00);\n  Writec(0XD5);//set osc division\n  Writec(0X80);\n  Writec(0XD9);//set pre-charge period\n  Writec(0X11);\n  Writec(0XDa);//set COM pins\n  Writec(0X12);\n  Writec(0X8d);/*set charge pump enable*/\n  Writec(0X14);\n  Writec(0Xdb);//Set VcomH\n  Writec(0X20);\n  Writec(0XAF);//display ON\n}\nvoid fill(unsigned char dat)\n{\n  unsigned char i,j;\n  \n  Writec(0x00);//set lower column address\n  Writec(0x10);//set higher column address\n  Writec(0xB0);//set page address\n  \n  for(j=0;j<8;j++)\n  {\n    Writec(0xB0+j);//set page address\n    Writec(0x00);//set lower column address\n    Writec(0x10);//set higher column address\n    for(i=0;i<128;i++)\n    {\n      Writed(dat);\n    }\n  }\n}\n \nvoid show_string(unsigned char x,unsigned char y,char *s)\n{\n  unsigned char i,j,lower,higher;\n  char *t;\n  t=s;\n  lower=y%16;\n  higher=y/16;\n  if((x>3) || (y>120))\n    return;\n  Writec(0xB0+x*2);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  for(j=0;*s!='\\0';j++)\n  {\n    \n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n  Writec(0xB0+x*2+1);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  s=t;\n  for(j=0;*s!='\\0';j++)\n  {\n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i+8]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n}\n \n \n \nvoid oled_init(void)\n{\n  pinMode(RES,OUTPUT);//RES\n  pinMode(DC,OUTPUT);//D/C#\n  \n  digitalWrite(DC,LOW);\n  Wire.begin();\n  digitalWrite(RES,HIGH);   delay(100);\n  digitalWrite(RES,LOW);    delay(100);\n  digitalWrite(RES,HIGH);   delay(100);\n  SSD1306();\n  fill(0x00);\n}\n \nvoid setup() {\n  oled_init();\n}\n \n \nvoid loop()\n{\n      fill(0x00);\n      show_string(0,12,\"BananaPi\");\n \n      show_string(2,12,\"banana-pi.org\");\n      while(1);\n}\n\n\n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  \t会把代码发送给 PicoW-S3 主板。上传完成后，OLED 显示屏会显示“BananaPi banana-pi.org”字样。\n\n### 代码分析\n\n本项目的代码相对于前面的项目较多，主要是基于 I2C 通信对 OLED 显示屏底层寄存器的直接驱动。\n\n```\nvoid Writec(unsigned char COM)\n```\n\n设置寄存器函数，通过 I2C 对 OLED 显示屏设置，I2C 使用方法完全兼容 Arduino。 \n\n```\nvoid Writed(unsigned char DATA)\n```\n\n写数据函数，I2C 使用方法完全兼容 Arduino。 \n\n>注意：PicoW-S3 的 I2C 与 Arduino 完全兼容，主要是调用 Wire 库文件使用。\n\n## 项目五 SPI\n\n在很多传感器中，都使用 SPI 通信，因为 SPI 通信速率相对于 I2C 更快，没有地址冲突的弊端。SPI，是  一种高速的、全双工、同步的通信总线，而 PicoW-S3 的 SPI 可以配置到所有 I/O，您可以阅览底层  代码进行使用（初学者不建议使用）。为了更好的使用体验，PicoW-S3 默认情况下配置了IO35、IO36、IO37 为 SPI 口，在使用上则完全兼容 Arduino。 本项目使用 PicoW-S3，通过 SPI 读取 BME280 温湿度传感器的数据，示例中使用的是BME280 库文件，关于 SPI 驱动您可以阅览 BEM280 库文件，[点击链接](https://github.com/DFRobot/DFRobot_BME280)下载 BME280 库文件。 \n\n### 所需元件 \n\nBME280 温湿度传感器 X 1\n\n![](../assets/images/Lesson5-1.png)\n\n>注意：BME280 传感器本身支持 I2C 和 SPI 通信，这里我们采用 SPI 通信。 \n\n面包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nPicoW-S3 主板 X 1\n\n![](../assets/images/PicoW-S3.png)\n\n### 输入代码\n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 （这个程序需要DFRobot_BME280库，需要在[GitHub](https://github.com/DFRobot/DFRobot_BME280)下载，解压到Arduino\\ Library 文件夹下 ）代码如下：\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n/*!\n * read_data_spi.ino\n *\n * Download this demo to test read data from bme280, connect sensor through spi interface\n * Connect cs pin to io 2\n * Data will print on your serial monitor\n *\n * Copyright   [DFRobot](http://www.dfrobot.com), 2016\n * Copyright   GNU Lesser General Public License\n *\n * version  V1.0\n * date  12/03/2019\n */\n\n#include \"DFRobot_BME280.h\"\n#include \"Wire.h\"\n\ntypedef DFRobot_BME280_SPI    BME;    // ******** use abbreviations instead of full names ********\n\n# define PIN_CS   2\n\nBME   bme(&SPI, PIN_CS);   // select TwoWire peripheral and set cs pin id\n\n#define SEA_LEVEL_PRESSURE    1015.0f\n\n// show last sensor operate status\nvoid printLastOperateStatus(BME::eStatus_t eStatus)\n{\n  switch(eStatus) {\n  case BME::eStatusOK:    Serial.println(\"everything ok\"); break;\n  case BME::eStatusErr:   Serial.println(\"unknow error\"); break;\n  case BME::eStatusErrDeviceNotDetected:    Serial.println(\"device not detected\"); break;\n  case BME::eStatusErrParameter:    Serial.println(\"parameter error\"); break;\n  default: Serial.println(\"unknow status\"); break;\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  bme.reset();\n  Serial.println(\"bme read data test\");\n  while(bme.begin() != BME::eStatusOK) {\n    Serial.println(\"bme begin faild\");\n    printLastOperateStatus(bme.lastOperateStatus);\n    delay(2000);\n  }\n  Serial.println(\"bme begin success\");\n  delay(100);\n}\n\nvoid loop()\n{\n  float   temp = bme.getTemperature();\n  uint32_t    press = bme.getPressure();\n  float   alti = bme.calAltitude(SEA_LEVEL_PRESSURE, press);\n  float   humi = bme.getHumidity();\n\n  Serial.println();\n  Serial.println(\"======== start print ========\");\n  Serial.print(\"temperature (unit Celsius): \"); Serial.println(temp);\n  Serial.print(\"pressure (unit pa):         \"); Serial.println(press);\n  Serial.print(\"altitude (unit meter):      \"); Serial.println(alti);\n  Serial.print(\"humidity (unit percent):    \"); Serial.println(humi);\n  Serial.println(\"========  end print  ========\");\n\n  delay(1000);\n}\n\n\n</code></pre>\n</details>\n\n After the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the PicoW-S3 motherboard. Open the Arduino serial monitor, you can see the print information as follows:\n\n![](../assets/images/Lesson5-2.png)\n\n### Code Analysis\n\n This project uses the BME280 library file, and the SPI bottom layer is not operated in the Item-5.ino file. However, the SPI of PicoW ESP32-S3 is fully compatible with Arduino.\n\n## Item Six WS2812\n\n PicoW-S3 integrates an RGB color light with model number WS2812. This project is an experiment to light up the RGB lights of PicoW-S3.\n\n### Required components\n\nLPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\n> Note: No other sensors need to be connected for this project.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. (This program requires the Adafruit_NeoPixel library, which needs to be downloaded from [GitHub](https://github.com/adafruit/Adafruit_NeoPixel) and unzipped to the Arduino\\ Library folder) The code is as follows:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n// NeoPixel Ring simple sketch (c) 2013 Shae Erisson\n// Released under the GPLv3 license to match the rest of the\n// Adafruit NeoPixel library\n\n#include <Adafruit_NeoPixel.h>\n#ifdef __AVR__\n #include <avr/power.h> // Required for 16 MHz Adafruit Trinket\n#endif\n\n// Which pin on the Arduino is connected to the NeoPixels?\n#define PIN 18 // On Trinket or Gemma, suggest changing this to 1\n\n// How many NeoPixels are attached to the Arduino?\n#define NUMPIXELS 1 // Popular NeoPixel ring size\n\n// When setting up the NeoPixel library, we tell it how many pixels,\n// and which pin to use to send signals. Note that for older NeoPixel\n// strips you might need to change the third parameter -- see the\n// strandtest example for more information on possible values.\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n\n#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels\n\nvoid setup() {\n  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.\n  // Any other board, you can remove this part (but no harm leaving it):\n#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)\n  clock_prescale_set(clock_div_1);\n#endif\n  // END of Trinket-specific code.\n\n  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)\n}\n\nvoid loop() {\n  pixels.clear(); // Set all pixel colors to 'off'\n\n  // The first NeoPixel in a strand is #0, second is 1, all the way up\n  // to the count of pixels minus one.\n  for(int i=0; i < NUMPIXELS; i++) { // For each pixel...\n\n    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255\n    // Here we're using a moderately bright green color:\n    pixels.setPixelColor(i, pixels.Color(0, 150, 0));\n\n    pixels.show(); // Send the updated pixel colors to the hardware.\n\n    delay(DELAYVAL); // Pause before next pass through loop\n  }\n}\n</code></pre>\n</details>\n\nAfter the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the PicoW-S3 motherboard. After reset, the WS2812 light will start to light up green,\n\n> Note: If you need other colors, you can modify the RGB values ​​in the code.\n\n### Code Analysis\n\nThis project uses the WS2812 light integrated in PicoW-S3, and the default GPIO is 48.\n\n````\n#define PIN 48\n````\n\nSet GPIO pin number\n\n````\n#define NUMPIXELS 1\n````\n\nSet the number of lights, if you want to connect more WS2812, you can change an IO and modify the number of lights.\n\n## Item 7 Touch Sensor\n\nThe PicoW-S3 provides up to 14 capacitive sensor GPIOs capable of detecting differences in capacitance caused by direct contact or proximity of fingers or other objects. This low-noise feature and high-sensitivity design of the circuit are suitable for smaller touchpads and can be used directly for touch switches. This project explains how to get the touch sensor status of PicoW-S3 through Arduino code and print the status.\n\n### Required components\n\nPicoW-S3 Motherboard X 1\n\n![](../assets/images/PicoW-S3.png)\n\n> Note: No other sensors need to be connected for this project.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it.\n\ncode show as below:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n void setup()\n{\n  Serial.begin(115200);\n      delay(1000); // give me time to bring up serial monitor\n      Serial.println(\"PicoW-S3 Touch Test\");\n}\nvoid loop(){\n  Serial.println(touchRead(T2)); // get value using T0->D9\n  delay(100);\n}\n\n</code></pre>\n</details>\n\nAfter the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the PicoW-S3 motherboard. Open the Arduino IDE serial monitor, and touch GPIO2 (T2 corresponds to GPIO2), you can see that the data that will be printed suddenly becomes smaller, as shown in the following figure:\n\n![](../assets/images/Lesson8-1.png)\n\n### Code Analysis\n\nTo get the GPIO status of the touch sensor, just call the touchRead function. The function prototype is as follows:\n\n````\n uint16_t touchRead(uint8_t pin)\n````\n\nReturns \"0\" for no touch and \"1\" for touch. The pins are T0~T9, and the pins corresponding to PicoW are shown in the following table:\n\n<table>\n   <tr>\n      <td></td>\n   </tr>\n   <tr>\n      <td>Touch Sensor Serial Number </td>\n      <td>The corresponding ESP32 hardware </td>\n      <td>PicoW-S3</td>\n      <td> </td>\n   </tr>\n   <tr>\n      <td>T1</td>\n      <td>GPIO1</td>\n      <td>IO1</td>\n   </tr>\n   <tr>\n      <td>T2 </td>\n      <td>GPIO2</td>\n      <td>IO2</td>\n   </tr>\n   <tr>\n      <td>T3 </td>\n      <td>GPIO3</td>\n      <td>IO3</td>\n   </tr>\n   <tr>\n      <td>T4 </td>\n      <td>GPIO4</td>\n      <td>IO4</td>\n   </tr>\n   <tr>\n      <td>T5 </td>\n      <td>GPIO5</td>\n      <td>IO5</td>\n   </tr>\n   <tr>\n      <td>T6 </td>\n      <td>GPIO6</td>\n      <td>IO6</td>\n   </tr>\n   <tr>\n      <td>T7 </td>\n      <td>GPIO7</td>\n      <td>IO7</td>\n   </tr>\n   <tr>\n      <td>T8 </td>\n      <td>GPIO8</td>\n      <td>IO8</td>\n   </tr>\n   <tr>\n      <td>T9 </td>\n      <td>GPIO9</td>\n      <td>IO9</td>\n   </tr>\n   <tr>\n      <td>T10</td>\n      <td>GPIO10</td>\n      <td>IO10</td>\n   </tr>\n   <tr>\n      <td>T11</td>\n      <td>GPIO11</td>\n      <td>IO11</td>\n   </tr>\n   <tr>\n      <td>T12</td>\n      <td>GPIO12</td>\n      <td>IO12</td>\n   </tr>\n   <tr>\n      <td>T13</td>\n      <td>GPIO13</td>\n      <td>IO13</td>\n   </tr>\n   <tr>\n      <td>T14</td>\n      <td>GPIO14</td>\n      <td>IO14</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr"}, "/PicoW_S3_doc/en/Arduino/Environment.html": {"title": "Environment build", "content": "# Environment build\n\nDue to the board size, the Arduino usage of PicoW-S3 will be more complicated, we do not recommend you to use PicoW-S3 to learn Arduino. This article will guide you through installing Arduino support for the PicoW-S3.\n![](../assets/images/logo_arduino.png)\n\n> Refer to [arduino-esp32 DOC Getting Started » Installing](https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html)\n\n## Install support using Arduino IDE\n\nHere's how to install the Arduino-ESP32 directly from the Arduino IDE.\n\n> Starting with Arduino IDE version 1.6.4, Arduino allows the use of the Boards Manager to install third-party platform packages. There are packages for Windows, macOS and Linux.\n\nArduino IDE download address: https://www.arduino.cc/en/software\n\n> The UI of Arduino IDE 2.0 is slightly different from that of Arduino IDE 1.8.x. This article is based on version 1.8.13, but it does not affect the reference of users who use version 2.0.\n\nTo install the esp32 platform package using Boards Managaer, follow these steps:\n\n- Install the current upstream Arduino IDE 1.8 or higher.\n\n- Start Arduino and open the File > Preferences window and find Additional Board Manager URLs.\n\n![](../assets/images/install_guide_preferences.png)\n\n- Stable version link:\n````\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n````\n- Development version link:\n````\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json\n````\n- Enter one of the above publish links after Additional Board Manager URLs. You can add multiple URLs, one per line.\n\n![](../assets/images/install_guide_boards_manager_url.png)\n\nOpen Tools > Board > Board Manager from the menu to search for and install the esp32 platform.\n\n![](../assets/images/install_guide_boards_manager_esp32.png)\n\nAfter restarting the arduino IDE, you can see that there are more ESP32 Arduino options in the development board options.\n\nSelect the model `ESP32S3 Dev Module`, and then configure it according to the content shown in the figure below. Improper configuration cannot be used. Please be sure to configure it according to the content shown in the figure below!\n\n![](../assets/images/Board_chose.jpg)"}, "/PicoW_S3_doc/en/CircuitPython/Basic.html": {"title": "", "content": "Processing"}, "/PicoW_S3_doc/en/CircuitPython/Environment.html": {"title": "", "content": "Processing"}, "/PicoW_S3_doc/en/CircuitPython/supported_by_circuitpython.html": {"title": "Supported by CircuitPython", "content": "# Supported by CircuitPython\n\n1. Supported by the adafruit/circuitpython GitHub repository.\n\n    https://github.com/adafruit/circuitpython/pull/7031 branch has been merged.\n\n2. Supported by the adafruit/tinyuf2 GitHub repository.\n\n    https://github.com/adafruit/tinyuf2/pull/250 branch has been merged.\n\n3. Supported by the adafruit/circuitpython-org GitHub repository.\n\n    https://github.com/adafruit/circuitpython-org/pull/1070 branch has been merged.\n\n    https://github.com/adafruit/circuitpython-org/pull/1077 branch has been merged.\n\n4. The circuitpython.org website can download circuitpython firmware and tinyuf2 firmware.\n\n     https://circuitpython.org/board/bpi_picow_s3/"}, "/PicoW_S3_doc/en/CircuitPython/Firmware.html": {"title": "", "content": "Processing"}, "/PicoW_S3_doc/en/index.html": {"title": "【 BPI-PicoW-S3 Development Board 】", "content": "# 【 BPI-PicoW-S3 Development Board 】\n\n## introduce\n\n![](assets/images/BPI-PicoW-S3_banner.jpg)\n\nBanana Pi BPI-PicoW is a low-power microcontroller, a development board designed for IoT development and Maker DIY. The same size as the Raspberry Pi Pico board, supports 2.4 GHz Wi-Fi and Bluetooth® LE dual-mode wireless communication, peripherals are compatible with low-power hardware design, and consumes only 10uA in deep sleep mode. In terms of programming, PicoW-S3 supports ESP-IDF, Arduino, micropython, CircuitPython and other methods\n\n## Programming with CircuitPython\n\n> BPI-PicoW-S3 has installed tinyUF2 and CircuitPython firmware before leaving the factory. It is recommended to use CircuitPython to quickly get started with the BPI-PicoW-S3 development board.\n\n![](assets/images/CircuitPython_Repo_header_logo.jpg)\n\nCircuitPython is a programming language designed to simplify programming experiments and learning on microcontroller development boards.\n\nCircuitPython programming with the Mu editor is the least difficult way to get started. Install the software and connect the device to start using it.\n\n## Programming with MicroPython\n\n![](assets/images/Mircopython.png)\n\nRegardless of the programmer is a beginner or not, MicroPython is considered to be less difficult to develop than other MCU programming languages.\n\nIts code is easy to understand compared to other programming languages, and it has various resources accumulated over the years by the open source community.\n\nJust like Python, it has strong vitality and application value.\n\nBy uploading the MicroPython firmware, you can use the Python language to program in the development board.\n\n## Programming with Arduino\n\nProvides software tools and best examples to get started with Arduino, lowering the barriers to entry into professional ESP32 embedded development.\n\n![](assets/images/Arduino_logo_1200x350.png)\n\n>Arduino will not explain too much basic content, please have the language development foundation of C/C++.\n\n## Information and resources\n\n- [Official WIKI](https://wiki.banana-pi.org/BPI-PicoW-S3_%E5%BC%80%E5%8F%91%E6%9D%BF)\n\n- [GitHub: BPI-PicoW-S3 development board schematic PDF](https://github.com/BPI-STEAM/BPI-PicoW-Doc/blob/main/sch/BPI-PicoW-V0.4.pdf)\n\n- [ESP32-S3 Datasheet](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 Technical Reference Manual](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)\n\n## Sample purchase\n\n- [Official AliExpress](https://www.aliexpress.com/item/1005004775634442.html?spm=5261.ProductManageOnline.0.0.15744edfAyCaNk)\n\n- [Official Taobao](https://item.taobao.com/item.htm?spm=a2126o.success.0.0.25b04831CHV1Nc&id=684134360199)\n\n- OEM&OEM customized service: sales@banana-pi.com"}, "/PicoW_S3_doc/en/Unboxing/Introduction.html": {"title": "【Introduction to development board】", "content": "# 【Introduction to development board】\n\nThe BPI-PicoW-S3 has an onboard ESP32-S3 chip that supports 2.4 GHz Wi-Fi and Bluetooth® LE dual-mode wireless communication. The board supports two power supply modes: USB and IO power supply, which can realize the function of automatic power switching under dual power supply. Small size, convenient interface, easy to use, and can be directly applied to low-power IoT projects.\n\nThe BPI-PicoW-S3 development board supports ESP-IDF, Arduino, MicroPython and other methods for programming and development in terms of software.\n\nAll IO pins corresponding to the chip are marked on the BPI-PicoW-S3 development board, and the shape is consistent with the Raspberry Pico W development board. Developers can add peripheral devices supported by the Raspberry Pico W to the BPI-PicoW- On the S3, the development board can also be plugged into the breadboard.\n\n## key features\n\n- ESP32-S3, Xtensa® 32 bit LX7\n- On-chip peripherals PSRAM, off-chip FLASH\n- Ultra-low power 10uA\n- 2.4G WIFI, Bluetooth 5, Bluetooth mesh\n- GPIO , ADC , TOUCH , PWM , I2C , SPI , RMT , I2S , UART , LCD, CAMERA , USB , JTAG\n- 1*MicroUSB\n- 1 * Full Color LED\n\n## hardware\n\n### Interface diagram\n\n![](../assets/images/PicoW-S3_board.png)\n\n### Hardware Specifications\n\n<table>\n   <tr>\n      <td>BPI-PicoW-S3 Spec Sheet</td>\n   </tr>\n   <tr>\n      <td>SoC main control chip</td>\n      <td>ESP32-S3, Xtensa® 32-bit LX7 Dual-Core Processor</td>\n   </tr>\n   <tr>\n      <td>Frequency</td>\n      <td>240MHz MAX</td>\n   </tr>\n   <tr>\n      <td>Operating Temperature</td>\n      <td>-40℃~+85℃</td>\n   </tr>\n   <tr>\n      <td>On-Chip ROM</td>\n      <td>384KB</td>\n   </tr>\n   <tr>\n      <td>On-chip SRAM</td>\n      <td>320KB</td>\n   </tr>\n   <tr>\n      <td>Off-chip FLASH ROM</td>\n      <td>8MB</td>\n   </tr>\n   <tr>\n      <td>On-Chip Peripherals PSRAM</td>\n      <td>2MB</td>\n   </tr>\n   <tr>\n      <td>WIFI</td>\n      <td>IEEE 802.11 b/g/n, 2.4Ghz band, 150Mbps</td>\n   </tr>\n   <tr>\n      <td>Bluetooth</td>\n      <td>Bluetooth 5, Bluetooth mesh</td>\n   </tr>\n   <tr>\n      <td>GPIO</td>\n      <td>BPI-PicoW-S3 has brought out 27 available GPIOs</td>\n   </tr>\n   <tr>\n      <td>ADC</td>\n      <td>2 × 12-bit SAR ADC supporting 20 analog channel inputs</td>\n   </tr>\n   <tr>\n      <td>TOUCH Capacitive Touch Sensor</td>\n      <td>14</td>\n   </tr>\n   <tr>\n      <td>SPI</td>\n      <td>4</td>\n   </tr>\n   <tr>\n      <td>I2C</td>\n      <td>2, supports master or slave mode</td>\n   </tr>\n   <tr>\n      <td>I2S</td>\n      <td>2, serial stereo data input and output</td>\n   </tr>\n   <tr>\n      <td>LCD</td>\n      <td>1, supports 8-bit ~16-bit parallel RGB, I8080, MOTO6800 interface</td>\n   </tr>\n   <tr>\n      <td>CAMERA</td>\n      <td>1, supports 8-bit ~16-bit DVP image sensor interface</td>\n   </tr>\n   <tr>\n      <td>UART</td>\n      <td>3, supports asynchronous communication (RS232 and RS485) and IrDA</td>\n   </tr>\n   <tr>\n      <td>PWM</td>\n      <td>8 independent channels, 14-bit precision</td>\n   </tr>\n   <tr>\n      <td>MCPWM</td>\n      <td>2</td>\n   </tr>\n   <tr>\n      <td>USB</td>\n      <td>1 × Full Speed ​​USB 2.0 OTG, MicroUSB Female</td>\n   </tr>\n   <tr>\n      <td>USB Serial/JTAG Controller</td>\n      <td>1, USB Full Speed ​​Standard, CDC-ACM, JTAG</td>\n   </tr>\n   <tr>\n      <td>Temperature Sensor</td>\n      <td>1, measuring from –20 °C to 110 °C, for monitoring chip internal temperature</td>\n   </tr>\n   <tr>\n      <td>SD/MMC</td>\n      <td>1 × SDIO host interface with 2 card slots, supports SD card 3.0 and 3.01, SDIO 3.0, CE-ATA 1.1, MMC 4.41, eMMC 4.5 and 4.51</td>\n   </tr>\n   <tr>\n      <td>TWAI® Controller</td>\n      <td>1, compatible with ISO11898-1 (CAN Specification 2.0)</td>\n   </tr>\n   <tr>\n      <td>Generic DMA Controller</td>\n      <td>5 receive channels and 5 transmit channels</td>\n   </tr>\n   <tr>\n      <td>RMT</td>\n      <td>4 channels transmit, 4 channels receive, shared 384 x 32-bit RAM</td>\n   </tr>\n   <tr>\n      <td>Pulse Counter</td>\n      <td>4 pulse count controllers (units), each with 2 independent channels</td>\n   </tr>\n   <tr>\n      <td>Timer</td>\n      <td>4 × 54-bit general-purpose timers, 16-bit clock prescaler, 1 × 52-bit system timer, 3 × watchdog timers</td>\n   </tr>\n   <tr>\n      <td>External Crystal</td>\n      <td>40Mhz</td>\n   </tr>\n   <tr>\n      <td>RTC and Low Power Management</td>\n      <td>Power Management Unit (PMU) + Ultra Low Power Coprocessor (ULP)</td>\n   </tr>\n   <tr>\n      <td>Low Power Current</td>\n      <td>10uA</td>\n   </tr>\n   <tr>\n      <td>Operating Voltage</td>\n      <td>3.3V</td>\n   </tr>\n   <tr>\n      <td>Input Voltage</td>\n      <td>3.3V~5.5V</td>\n   </tr>\n   <tr>\n      <td>Maximum Discharge Current</td>\n      <td>2A@3.3V DC/DC</td>\n   </tr>\n   <tr>\n      <td>Controllable full color LED</td>\n      <td>1</td>\n   </tr>\n</table>\n\n\n### Hardware Dimensions\n\n\n![](../assets/images/PicoW-S3_board_dimension.png)\n\n<table>\n   <tr>\n      <td>BPI-PicoW-S3 Size Chart</td>\n   </tr>\n   <tr>\n      <td>Pin spacing</td>\n      <td>2.54mm</td>\n   </tr>\n   <tr>\n      <td>Mounting Hole Spacing</td>\n      <td>11.4mm/ 47mm</td>\n   </tr>\n   <tr>\n      <td>Mounting Hole Dimensions</td>\n      <td>Inner Diameter 2.1mm/Outer Diameter 3.4mm</td>\n   </tr>\n   <tr>\n      <td>Motherboard Dimensions</td>\n      <td>21 × 51.88(mm)/0.83 x 2.04(inches)</td>\n   </tr>\n   <tr>\n      <td>plate thickness</td>\n      <td>1.2mm</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\nThe pin spacing is compatible with universal boards (hole boards, dot matrix boards), breadboards, and can be directly attached to other PCBs for easy debugging applications.\n\n## Information and resources\n\n- [GitHub: BPI-PicoW-S3 development board schematic PDF](https://github.com/BPI-STEAM/BPI-PicoW-Doc/blob/main/sch/BPI-PicoW-V0.4.pdf)\n\n- [ESP32-S3 Datasheet](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf)\n\n- [ESP32-S3 Technical Reference Manual](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_en.pdf)"}, "/PicoW_S3_doc/en/Unboxing/Gettingstart.html": {"title": "", "content": "Processing"}, "/PicoW_S3_doc/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}