{"/Triode-Car/en/introduction/hardware.html": {"title": "Hardware", "content": "# Hardware\n\n## Hardware information\n\n* Power: 3.6V~3.7V Batteries\n* Photoresistor(analog) * 2\n* SR04, SR04P ultrasonic sensor interface(5V) * 1\n* I2C interface(3.3V) * 1\n* IO extension port * 2(P5 P0 P3 P4 P6 P7 P8 P9 P10 P16 P11)\n* TT Motor * 2 (P14 P15)\n* Motors max speed: 90 rpm\n* Motors driving mode: PWM\n* M3 Lego extension hole * 6\n\n## Interface diagram\n\n![](../assets/Triode-Car-IO.png)\n\nOn the Triode-Car, there are many special designs:\n\n1. In the front of Triode-Car, there are two screw holes, which can be used to fix sensors such as obstacle avoidance sensors or line-following sensors.\n2. Next to the adjustable resistor, there are two pairs of special resistors, R11 and R13, R12 and R14. If you choose to weld R11 and R12, the LED will automatically display the state of the motor, whether it is forward or stopped. If you choose to weld R13 and R14, The LED will become a programmable LED light, P11 controls the left LED (D3), and P5 controls the right light (D4).\n3. Triode-Car has specially designed pads for manual soldering (Controller Socket marked position). Through this design, it is more convenient to manually solder the Bit Socket, and if you want to quickly confirm the position of the Pin during use, you don’t need to confirm repeatedly. Schematic diagram and pin number.\n4. Behind the Bit Socket, there is a switch that can switch between two control methods: IC switch and Bit switch.\n5. Behind the switch, there is a 30*15mm square hole, which is used to leave room for the speed sensor. After adding the speed sensor, the position of the battery box may be occupied. At this time, we recommend that you use copper pillars, plastic plates, etc. to elevate the battery box. [Recommended speed sensor](https://www.adafruit.com/product/3986)\n6. Just below the Triode-Car, there are some holes that can be welded at will. The leftmost one of the holes is connected to the positive pole of the power supply, the rightmost one is connected to the negative pole, Some IOs are placed in the upper row for use. You can add some sensors or buzzers in this area to make your car more versatile. Of course, there may be insufficient power supply after adding, it is recommended to use a lithium battery with a stronger current.\n\n## GPIO PIN define\n\n| Function | web:bit GPIO |\n| :----: | :----: |\n| Wheel(Left) | P14 |\n| Wheel(Right) | P15 |\n| ultrasonic (Trig) | P12 |\n| ultrasonic (Echo) | P13 |\n| Line Detecting(Left) | P2 |\n| Line Detecting(Right) | P1 |\n| Speed Detection(Left) | P11 |\n| Speed Detection(Right) | P5 |\n\n## Product standard list\n\n1. Triode-Car PCB * 1\n2. Various resistors\n3. Edge connector * 1\n4. LM393 comparator * 1\n5. TT motor * 2\n6. Front wheel * 1\n7. LED * 4\n8. Potentiometer * 2\n9. Capacitor * 2\n10. Triode * 2\n11. Switch * 2\n12. User Manual * 1\n13. Various screws\n\n## Resources\n\n### Schematic \n\n![](../assets/Triode-Car-Sch.png)\n\n[Schematic Download](https://github.com/BPI-STEAM/Triode-Car/blob/main/HardWare/Sch/BPi-BIT-Triode-Car-V1.0.3.pdf)\n\n### Referenced document\n* Triode Car #1 - A Beginning to Something Big \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qcR-Haovyr4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n* Triode Car #2 - Installing Colorful Resistors! \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/z6adIa8id5Y\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n* [Hackaday project](https://hackaday.io/project/178248-triode-car-line-follower)\n\n\n### Code on github\n\n[MakeCode extension for Micor:Bit](https://github.com/BPI-STEAM/pxt-triodecar)"}, "/Triode-Car/en/hardware/analysis&calibrate.html": {"title": "Hardware analysis and calibration", "content": "# Hardware analysis and calibration\n\n## Drive circuit\n\nThis is a basic circuit:\n\n<div align=center>\n<img src=\"../assets/Triode-Car-Sch1.png\" width=\"30%\"/>\n</div>\n\nBattery, diode, inductor and manual switch are connected in series,two loads are connected in parallel. \n\nOne load is a motor and the other load is a light-emitting diode. \n\nIn order to protect the light-emitting diode, a resistor for voltage division is connected in series.\n\nIn this circuit, the only one that can control the two loads is a manual switch.\n\nA **bipolar junction transistor (BJT)** is a type of transistor that uses both electrons and electron holes as charge carriers. In contrast, a unipolar transistor, such as a field-effect transistor, uses only one kind of charge carrier. A bipolar transistor allows a small current injected at one of its terminals to control a much larger current flowing between two other terminals, making the device capable of amplification or switching.\n\nA BJT consists of three differently doped semiconductor regions: the emitter region, the base region and the collector region. These regions are, respectively, p type, n type and p type in a PNP transistor, and n type, p type and n type in an NPN transistor. Each semiconductor region is connected to a terminal, appropriately labeled: emitter (E), base (B) and collector (C).\n\nPNP transistor：\n\n![](../assets/Triode-S8550.png)\n\n* pin 1 Emitter\n* pin 2 Base\n* pin 3 Collector\n\n> For more detailed information, you can continue to refer to[Wikipedia：Bipolar junction transistor](https://en.wikipedia.org/wiki/Bipolar_junction_transistor)\n\nAdd a PNP transistor to the circuit:\n\n![](../assets/Triode-Car-Sch2.png)\n\nAs shown in figure design circuit may control the PNP transistor of the Base, Base terminal level signal is given, the PNP transistor can be used as a switch.\n\nThe turn-on condition of Emitter and Collector is that the Emitter voltage is greater than the Collector voltage, the Emitter voltage is greater than the Base voltage, and when the Base voltage is greater than or equal to the Emitter voltage, it turns off. \n\nIn this way, the two loads can be controlled by the level signal received by the Base, and this level signal is provided by the output of the voltage comparator.Another button can also be used to switch to micro:bit or web:bit development boards to provide level signals. \n\nThe R7 resistor acts as a pull-up resistor here. When there is no control signal input to the Base, the control signal output terminal is left floating, neither high nor low, similar to an open circuit state. Through the pull-up resistor of R7, Base can also obtain a high level and keep the PNP off state, so that this circuit can only be turned on when Base obtains a low-level signal. \n\n> For more detailed information about \"high & low level\" and \"level signal\", please refer to [Wikipedia：Logic level](https://en.wikipedia.org/wiki/Logic_level)\n\n## Line detection circuit\n\nAt the bottom of the Triode-Car, there are two line detection circuits, each of which contains a photoresistor and an LED. When the light of the LED shines on the black and white materials, the resistance value of the photoresistor will change significantly due to the difference in reflectivity. \n\n<div align=center>\n<img src=\"../assets/Photoresistor-GL5506.png\"/>\n</div>\n\nOn Triode-Car, the photoresistor used is GL5506. The resistance of this model will decrease with the increase of light. The light resistance (10 Lux illumination) is 2-5KΩ, and the dark resistance is 0.2MΩ.\n\nLight resistance: The resistance value measured under 10 Lux illumination with a standard light source (color temperature of 2854K) after being irradiated with 400-600 Lux illumination for 2 hours.\n\nDark resistance: the resistance value measured at 10 seconds after turning off the 10 Lux illumination. \n\nDesign a circuit like this: \n\n<div align=center>\n<img src=\"../assets/Triode-Car-Sch3.png\" width=\"65%\"/>\n</div>\n\nIt can be seen that the branch composed of RV1 adjustable resistance, R3 resistance, and R5 photoresistor is connected in parallel with the branch composed of RV2 adjustable resistance, R4 resistance, and R6 photoresistor.\n\nAccording to the principle of parallel equal-voltage shunting, the voltages of the two branches are equal.\n\nOn the branch where the R5 photoresistor is located, according to the principle of series voltage division and equal current, the voltage at the LDR_L node is equal to the current value multiplied by the (R5+R3) resistance value.\n\nWhen the light received by the R5 photoresistor is weakened, its resistance will increase, and the voltage at the LDR_L node will increase accordingly, and vice versa when the light increases.\n\nThe same is true for LDR_R node voltage.\n\nAccording to the principle of series voltage division and equal current, if the resistance of the adjustable resistor of RV1 is increased, the voltage at the LDR_L node will decrease, and vice versa.\n\nThe RV2 adjustable resistor is the same.\n\nIn this way, the two adjustable resistors can be used to calibrate the voltage values of the two nodes of LDR_R and LDR_L, and try to ensure that the voltage values of the two nodes are equal under the same light intensity, so as to facilitate subsequent applications on the voltage comparator.\n\n## Voltage comparator \n\nThis is the schematic diagram of the LM393 voltage comparator: \n\n<div align=center>\n<img src=\"../assets/LM393_sch.jpg\" width=\"250\"/>\n</div>\n\n<div align=center>\n<img src=\"../assets/LM393-1.png\" width=\"400\"/>\n</div>\n\nTwo voltage comparators are integrated inside. When the positive input (IN+) of the voltage comparator is greater than the negative input (IN-) voltage, the output is high. Otherwise, the output is low.\n\nThe internal schematic diagram of its voltage comparator is like this: \n\n![](../assets/LM393-2.png)\n\nThis shows,the realization of such a relatively complex function is also designed and packaged based on basic components such as semiconductor diode and BJT. \n\n> If you are interested, you can refer to [Wikipedia：Comparator](https://en.wikipedia.org/wiki/Comparator)\n\nAdd LM393 voltage comparator to the circuit, and complement the drive circuit and line detection circuit：\n\n![](../assets/Triode-Car-sys.jpg)\n\n![](../assets/Triode-Car-Sch4.png)\n\nAt this point, we have basically constructed an automatic control system.\n\nUnder ideal working conditions, it can collect light and dark information on the left and right sides of the line through the photoresistor within a certain range.\n\nThe voltage comparator continuously controls the start and stop of the two wheels during the information change to correct the driving direction and achieve the purpose of automatic line tracking.\n\n## State relation table \n\n| Car lean Direction | Right LDR(R6) | Left LDR(R5) | LDR_R Potential | LDR_L Potential | P3 Input | P2 Input | P1 Output | P5 Input | P6 Input | P7 Output | M1 Left Motor | M2 Right Motor | Car Move Direction |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| Right | Bright | Dark | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 1 | 0 | Left |\n| Left | Dark | Bright | 1 | 0 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 1 | Right |\n\n> Conditions are black lines and white roads \n\nWhen the front of the car is biased to the right compared to the line:\n\n1. The R6 photoresistor on the right under the front of the car will come above the white road, and the R5 photoresistor on the left will come above the black line.\n2. The resistance of R6 decreases and the resistance of R5 increases, and the potential of the LDR_R node will be lower than the potential of the LDR_L node.\n3. The P3 pin potential of the A comparator will be lower than the P2 pin potential, and the P5 pin potential of the B comparator will be higher than the P6 pin potential.\n4. The P1 pin of the A comparator will output a low level, and the P7 pin of the B comparator will output a high level.\n5. Q2 PNP transistor turns on, M2 right motor starts, Q1PNP transistor turns off, M1 left motor stops.\n6. The car will drive to the left.\n\nWhen the front of the car is biased to the left compared to the line, the car will also drive to the right.\n\nIn this way, Triode-Car can automatically reverse correction regardless of the yaw to the left or right to achieve the purpose of tracking the line.\n\n## line detection circuit calibration \n\nIn order to make the line detection circuit have higher sensitivity to light and dark changes under the control of the LM393 chip alone, and to reduce the potential difference under the same illumination brightness, it is necessary to manually adjust the adjustable resistance for calibration. \n\nThe calibration steps are as follows: \n\n1. use a small object to lift up the back wheels slightly to prevent contact,point a stable light source towards the photoresistors.\n2. Adjust either side of potentiometers until both motors are operating simultaneously.\n3. After adjustments, put the car on the track to test the results.\n4. If the car is still likely to run out of the track, place the car on a white paper, repeat steps 2~3 for fine-tuning, and try to make the line detection circuit more sensitive to light and dark changes. \n\n<div align=center>\n<img src=\"../assets/Triodecar_calibration_1.jpg\" width=\"500\"/>\n</div>\n\n<div align=center>\n<img src=\"../assets/Triodecar_calibration_2.jpg\" width=\"500\"/>\n</div>"}, "/Triode-Car/en/index.html": {"title": "Triode-Car", "content": "# Triode-Car\nThe Banana Pi BPI-TriodeCar is a product designed for education on entry-level engineering. Supporting both the BBC Micro:bit and Web:bit(BPI:bit), the TrideCar can also be equipped with peripherals such as, buzzer, and ultrasonic sensor.\n\n![](assets/Triode-Car_webbit&microbit.png)\n\n\n\n## Key Features\n\n*Two switchable modes: a comparator(LM393) or with Micro:bit/ Web:bit.\n\n*Supports MakeCode, Webduino Blockly, and MicroPython programming.\n\n*Provides soldering area for more peripherals extension.\n*I2C Connector(3.3V) onboard.\n\n*Screwholes for LEGO blocks extension.\n\n*Line Tracking."}, "/Triode-Car/en/microbit_tutorial/radio_control.html": {"title": "Control the motors by radio", "content": "# Control the motors by radio\n\n## Example Blocks\n\n<div align=center>\n<img src=\"../assets/Triode-Car_radio_control_1.png\" width=\"400\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-Car_radio_control_1.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run.\n\n## Design description \n\nThe micro:bit supports radio communication. Use the radio extension to program in MakeCode, and after downloading the program into two micro:bits, you can establish radio communication between the two and control each other's hardware. \n\nDownload the routine into two micro:bits, plug one into the Triode-Car, hold the other in your hand, and connect the power to both of them, and you can control the start and stop of the Triode-Car's motor through the micro:bit button AB in your hand. \n\nPress A to turn left, press B to turn right, press AB at the same time to go straight, release the buttons to stop. \n\nThe four variables added are not superfluous. Although you can also fill in the values we need in the building blocks, using variable names to replace these specified values helps us to establish a clearer cognitive logic. The more complex the program, the more its value can be reflected."}, "/Triode-Car/en/microbit_tutorial/first_meeting.html": {"title": "First meeting with micro:bit", "content": "# First meeting with micro:bit\n\nThe [micro:bit](https://microbit.org/)(also referred to as BBC Micro Bit) is an open source hardware ARM-based embedded system designed by the BBC for use in computer education.This is jointly developed by partners such as Microsoft, Samsung, ARM, Lancaster University, etc. They currently have designed two models, V1 and V2, the latter has a slightly stronger performance than the former.\n\n![](../assets/microbit.png)\n\n## MakeCode editor\n\nMakeCode is a graphical code editor for programming education promoted by Microsoft. It is also the code editor for micro:bit's current mainstream applications. You don't need to download and install any local applications. You can open the webpage in the browser to program online. \n\n[micro:bit-MakeCode ](https://makecode.microbit.org/#)\n\nIn the MakeCode editor, you can start by building blocks with zero programming foundation, and you can use Extensions’ blocks that have encapsulated more complex programs, further reducing the threshold. Localization support for multiple languages is also an important advantage. \n\nThe editor is mainly composed of three parts, a graphical block editor, a simulation simulator, and a JavaScript code editor. \n\n![](../assets/microbit-MakeCode.png)\n\n## MicroPython editor\n\nMicroPython is a relatively advanced but not difficult to learn programming language.Micro:bit provides easier-to-use modules to reduce the difficulty of programming. The biggest difference between micro:bit and graphics programming is that it is transformed into abstract character codes.\n\n[micro:bit-micropython](https://python.microbit.org/v/2)\n\nAs the name suggests, it is a streamlined and efficient implementation of the Python 3 programming language. It contains a small subset of the Python standard library and is optimized to run on microcontrollers and in restricted environments. \n\nIf you have ever learned Python, it will be quite easy to get started. On the contrary, after learning MicroPython on the development board, you can switch to Python for further learning or application development almost without obstacles. \n\n![](../assets/microbit-micropython.png)"}, "/Triode-Car/en/microbit_tutorial/control_motor2.html": {"title": "Adjust motors speed", "content": "# Adjust motors speed\n\n## Example Blocks \n\n<div align=center>\n<img src=\"../assets/Triode-Car_motor_control_2.png\" width=\"500\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_motor_control_2.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run. \n\n## Design description \n\n1. Press button A once to increase the speed by 1 level.\n2. Press button B once to reduce the speed by 1 level.\n3. The micro:bit displays the current level value. \n\nIn the Triode-Car extension, there are blocks that can independently control the speed of the left and right motors, and can perform 10-level speed regulation. \n\nIn the example, the \"forever\" block will start an infinite loop after the execution of the \"on start\" block, and execute other event handlers, such as \"on button A/B pressed\", between each loop.\n\nA \"if\" judgment block is added. If the value of the variable \"speed\" is less than 0 or greater than 10, the value of the variable \"speed\" is set to 0, so that the value can be limited to the range of 0 to 10 without overflowing and reporting an error."}, "/Triode-Car/en/microbit_tutorial/new_project.html": {"title": "Create MakeCode project", "content": "# Create MakeCode project\n\n1.Open the web link ：\n\n[micro:bit-MakeCode](https://makecode.microbit.org/#)\n\n2. Click \"New Projects\" and then give the project a name to enter the editor. \n\n<div align=center>\n<img src=\"../assets/makecode-new.png\" width=\"150\"/>\n</div>\n\n3.In addition to saving the project as a `.hex` file, it can also be saved as a Github project, which requires a [Github](https://github.com/) account and associated login with MakeCode. \n\n<div align=center>\n<img src=\"../assets/makecode-save.png\" width=\"300\"/>\n</div>\n\n4.The links provided by all subsequent examples are links to `.hex` files, and you do not need to log in to your Github account to download them. In the webpage opened by the link, right-click the `Download` button, and then click `save link as` to download the `.hex` file to the local hard disk of the computer.\n\n<div align=center>\n<img src=\"../assets/makecode-save_2.png\" width=\"600\"/>\n</div>"}, "/Triode-Car/en/microbit_tutorial/Line_Follower.html": {"title": "Line Tracking", "content": "# Line Tracking\n\n## Design ideas\n\nAfter[Calibration line detection circuit](LDR_calibration.html), we can start to make effective use of the Line-Detecting Circuit.\n\nAccording to the principles described in the [Hardware analysis and calibration](../hardware/analysis&calibrate.html) chapter,line trackingrequires real-time light intensity detection by using the different reflectivity of dark lines and its two sides.\n\n## Example Blocks\n\n<div align=center>\n<img src=\"../assets/Triode-car_Line_Follower.png\" width=\"600\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_Line_Follower.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run.\n\n## Design description \n\n1. The \"on button A pressed\" block is used to control the start and stop of the tracking program. Each time button A is pressed, the variables set in it will change its state.\n2. The \"forever\" block will repeatedly execute its internal program, and each time the loop ends or the \"show\" or \"pause\" block is executed in the loop, the thread will allow other \"forever\" blocks or event-based loops, so this Three \"forever\" blocks and one \"on button A pressed\" block can run together in the background, so that the system has the ability to execute multiple programs at the same time. This is generally called \"multitasking\".\n3. The program in the first \"forever\" block is used to cyclically read the voltage analog values of the left and right LDRs, and then judge in the multi-level \"if\" conditional block, and change the variable when the corresponding conditions are met. The variable is used to control the motor .\n4. The multi-level \"if\" condition block in the second \"forever\" block judges the variable value changed in the first \"forever\" block, and directly outputs control signals to control the start, stop and speed of the left and right motors.\n5. First, the loop condition in the two \"forever\" blocks is the variable controlled by the \"on button A pressed\" block. The loop will execute only when the variable is \"true\".\n6. The third \"forever\" block is a bit ingenious. Its internal loop will only be executed once when the variable used to control the motor changes, corresponding to the content that the LED should display currently."}, "/Triode-Car/en/microbit_tutorial/LDR_calibration.html": {"title": "Calibration line detection circuit", "content": "# Calibration line detection circuit\n\n## Design ideas\n\nAs every component are not made exactly the same, despite being made according to the datasheet, they would vary from eachother ever so slightly. Calibration of the Line-Following Circuit improves the reaction time of the Triode-Car's line tracking feature. Adjust the resistance of the potentiometers connected to the photoresistors to increase the sensitivity. This process makes the Triode-Car less likely to run off course and maintains a stable analog voltage output.\n\nWe can directly use the [Collect the signals](read_LDR.html)guide from beginners tutorial to read the analog signals from the computer, then manually adjust the potentiometer with a screwdriver.\n\nThe micro:bit can detect analog voltage values from 0~1023, the closer the value is to the middle, the reaction from changes of brightness detected by the photoresistor will become more sensitive.\n\nTherefore, under a stable brightness environment, try to calibrate the resistance as close to 512 as possible. This would create more stable energy output and reduce their analog value difference.\n\nThe above steps mentioned requires constant connection with triode-car connected to micro: bit and then to the PC. In a real use case scenerio, one would best be using manual adjustments to increase the sensitivity.\n\nWe cannot be sure to have the micro: bit connected to the PC all the time, therefore, we need to write a program to guide us how to properly calibrate the sensitivity.\n\nCalibration Steps:\n\n1. Adjust the left potentiometers first, to make its analog value out close to the median.\n2. Adjust the right potentiometer on the premise that the previous condition is met, so that the parallel photoresistor output voltage analog quantity on the corresponding pin of Micro:Bit is close to the other photoresistor.\n\nWe can achieve this by creating a simple \"if\" statement program. For those people who adjust manually, we could add different image patterns to indicate if we have adjusted properly.\n\n## Example Blocks:\n\n<div align=center>\n<img src=\"../assets/Triode-car_LDR_calibration_1.png\" width=\"600\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_LDR_calibration_2.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run.\n\n## Design description \n\n1. The whole calibration code is organized into a self-defined function, this could be easily called or maintained later on and would cause less confusion as many other functions would be added.\n2. The code consists within a while loop block. By adding loop conditions, the loop would exit after the potentiometers have finished calibration.\n3. Before entering the while loop, the micro:bit would display a directional arrow, indicating which potentiometers requires adjustment.\n4. The code within the first while loop block is to calibrate the left photoresistor, the \"if\" statement conditions are set to make the left photoresistor's analog voltage value in the range of minimum of 450 to 550 max.\n5. When the \"if\" statement contitions are met in the 4th point, the micro:bit would display a \"checked\" symbol to give a visual feedback as its been calibrated. At this moment one should stop adjusting the left potentiometer. After 1 second, the code would run the \"if\" statement again to check if the values are disrupted due to slight tremor of the hand. When the code double checked if conditions are met, the loop will end.\n6. The second while loop contains blocks to adjust the right photoresistor. The \"if\" statement within is to make the analog voltage values differce of both potentiometers less than 25. This is achieved by subtracting the values of both left and right photoresistors."}, "/Triode-Car/en/microbit_tutorial/control_motor.html": {"title": "Use buttons to control the motors", "content": "# Use buttons to control the motors\n\n## Example Blocks \n\n<div align=center>\n<img src=\"../assets/Triode-Car_motor_control_1.png\" width=\"300\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_motor_control_1.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run. \n\n## Design description \n\n1. Stop when starting or resetting. \n2. Press the button A and B  at the same time to go straight.\n3. Press button A to turn right. \n4. Press the button B to turn left. \n\nIn[Hardware analysis and calibration: Drive circuit](../hardware/analysis&calibrate.html#Drive-circuit),There is a switch in the drive circuit, which can switch the drive circuit from LM393 voltage comparator control to micro:bit control. The micro:bit control method of the drive circuit is the same as the LM393 voltage comparator, starting at low level and stopping at high level."}, "/Triode-Car/en/microbit_tutorial/bluetooth_control.html": {"title": "Control the motors by Bluetooth", "content": "# Control the motors by Bluetooth\n\n## Introduce \n\nThe bluetooth feature can be enabled through MakeCode extensions, we can control the micro: bit with our smartphones through certain applications.\n\n* iOS users:[Micro:bit App on App Store](https://apps.apple.com/cn/app/micro-bit/id1092687276)\n\n* Android users:[Microbit-blue GitHub link](https://github.com/microbit-foundation/microbit-blue/raw/master/releases/ble_demo_v1_5_4.apk)&[Kitronik Move on Google Play Store](https://play.google.com/store/apps/details?id=com.kitronik.blemove) \n\n> There is an official release of the Micro: bit App on both the iOS App Store and Android's Google Play Store, however, the iOS version has support for bluetooth connection, whereas the Google Play store's does not. This is why we require third party apps on Android devices that supports bluetooth connection.\n\n## Bluetooth pairing process and notes:\n\n* In the MakeCode editor, open the extensions on the bottom of advanced tab, click on the bluetooth extension icon to apply.Bluetooth and Radio extensions cannot coexist, choosing bluetooth will automatically remove radio extension.\n\n<div align=center>\n<img src=\"../assets/Makecode_bluetooth_extension.jpg\" width=\"200\"/>\n</div>\n\n* When pairing the micro: bit with android third-party app, one could turn on \"Passkey pairing: Paring requires 6 digit key to pair.\" option in Project settings.\n* To enter pairing mode, connect micro: bit to power, press reset button once while holding A+B button.\nDo NOT let go of A+B buttons while the progress bar is running, it would interrupt the pairing process and one would need to start over.\n* Android devices need to turn on GPS and bluetooth to have a stable connection.\n* On Android devices, navigate to bluetooth settings, find and pair with the micro: bit. Once the pairing process starts, micro: bit will hint to press button A once, then it would scroll a 6 digit pairing code. Enter the code on the Andriod device to complete the pairing process.\n* Press the reset button on the Micro: bit after pairing to restart.\n* iOS devices does not require to enter bluetooth settings. To pair with the micro: bit, please follow the pairing instructions in the official micro: bit app.\n\n## Example Blocks\n<div align=center>\n<img src=\"../assets/TriodeCar_bluetooth_control_1.png\" width=\"500\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_bluetooth_control_1.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run. \n\n## Design description \n\nWhen paired successfully with bluetooth, display a red heart, whereas a disconnection would display an \"X\" symbol. Press the buttons inside the app to control the Triode-Car wirelessly. Press button A to go forward, C to turn left, and D to turn right, release the buttons to stop.\n\nThe \"on event from()with value()\" block can be found in the Control tab in Makecode."}, "/Triode-Car/en/microbit_tutorial/import_extension.html": {"title": "Import extensions", "content": "# Import extensions\n\n1.In the MakeCode editor, click the gear icon in the upper right corner of the webpage, and click Extensions. \n\n<div align=center>\n<img src=\"../assets/makecode-extensions_1.png\" width=\"200\"/>\n</div>\n\n2.Enter a page to retrieve various extensions. \n\n<div align=center>\n<img src=\"../assets/makecode-extensions_2.png\" width=\"500\"/>\n</div>\n\n3.Enter `triodecar` in the search bar above.You can see the extensions dedicated to Triode-Car.\n\n<div align=center>\n<img src=\"../assets/makecode-extensions_3.png\" width=\"500\"/>\n</div>\n\n4.Click to add it to the project, and you can see several extension blocks in the block list of the MakeCode editor.\n\n<div align=center>\n<img src=\"../assets/makecode-extensions_4.png\" width=\"500\"/>\n</div>"}, "/Triode-Car/en/microbit_tutorial/read_LDR.html": {"title": "Collect the signals", "content": "# Collect the signals\n\n## Example Blocks\n\n<div align=center>\n<img src=\"../assets/Triode-car_read_LDR.png\" width=\"600\"/>\n</div>\n\n[Example project file on Github](https://github.com/Wind-stormger/Makecode/blob/master/microbit-Triode-car_read_LDR.hex)\n\n> After the project file is downloaded locally, it can be imported into MakeCode for viewing and re-editing, or it can be burned directly to micro:bit via USB to run. \n\n## Design description \n\n1. The voltage analog values of the two sensors are sent to the computer through the USB serial port every 100ms. \n2. You can open the console in MakeCode to view the information received in real time. \n\nRefer to [](../hardware/analysis&calibrate.html).\n\nThe \"Read (index) line tracking sensor\" block in Triode-Car extensions can collect analog values from the photoresistors.\n\nMicro: bit pins' voltage can be set from 0~3.3v, and has 1024(10bit) precision levels, therefore, the \"read left/right line tracking sensor\" block will input an analog value to adjust its voltage ranging from 0~1023."}, "/Triode-Car/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}