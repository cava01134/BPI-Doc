{"/WebAI/zh/MoonCar/MoonCar.html": {"title": "五、操控 MoonCar", "content": "# 五、操控 MoonCar\n\n![](../assets/images/upload_3873f6904888518d624142d07ba04302.png)\n\n![](../assets/images/upload_326bf9bc32fc249a00653000a153f85d.png) ![](../assets/images/upload_8e98c3d36fd19f13f6d1b663e752e86c.png)\n\n## 颜色侦测\n\n这个例子中，颜色侦测使用的是 MoonCar 上面的 TCS34725 传感器，可用来侦测颜色。\n先使用 class TCS34725 驱动传感器，进行打光和读取颜色值。\n\n![](../assets/images/upload_4d4613a146aca71af6b235cb1e420a0c.png) ![](../assets/images/upload_3d0d9b773a839bc6f1b0389e497370a4.png) ![](../assets/images/upload_3d97627ea1cbecae280f35770f7fa107.png)\n\n~~~python=\nfrom webai_blockly import TCS34725\nfrom webai import *\nfrom machine import I2C\n\ni2c = I2C(id=3, freq=100000, scl=17, sda=15) #1920\n\npinB=16 # light\nfm.fpioa.set_function(pinB,fm.fpioa.GPIO6)\ngpioB=GPIO(GPIO.GPIO6,GPIO.OUT)\ngpioB.value(0)\n\ns = TCS34725(i2c)\nimg = webai.snapshot()\nimg.clear()\nv = 100\nwhile True:\n   time.sleep_ms(200)\n   try:\n      data = s.read(raw=True)\n      data = (data[0]+v,data[1]+v,data[2]+v)\n      print(data)\n      img.draw_string(2,2, \"Color\", color=data, scale=11)\n      lcd.display(img)\n   except Exception as e:\n      print(e)\n~~~\n\n## 循迹行驶\n\n让小车沿着黑线行驶。\n\n<iframe src=\"https://www.youtube.com/embed/D6cet80DZvM\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n~~~python=\nfrom webai import *\n\nspeed = 60\ncarType = 1\n\ndef tracking(pin):\n    global carType,speed\n\n    left = p15.value()\n    right = p16.value()\n    msg = str(left)+\" : \"+str(right)\n\n    if left == 0 and right == 0:\n        if carType == 1:\n            mcar.forward(speed)\n        elif carType == 2:\n            mcar.move(0,speed)\n        elif carType == 3:\n            mcar.move(speed,0)\n\n    if left == 1 and right == 1:\n        carType = 1\n        mcar.forward(speed)\n    \n    if left == 1 and right == 0:\n        carType = 2\n        mcar.move(0,speed)\n    \n    if left == 0 and right == 1:\n        carType = 3\n        mcar.move(speed,0)\n\np15 = webai.io.pin(15,pull_mode=webai.io.PULL_NONE)\np15.irq(tracking,GPIO.IRQ_BOTH)\np16 = webai.io.pin(16,pull_mode=webai.io.PULL_NONE)\np16.irq(tracking,GPIO.IRQ_BOTH)\n~~~\n\n## 循迹 + 物件追踪\n\n沿着黑线移动，看见红色小怪兽停车，看见绿色小怪兽继续前进。\n\n<iframe src=\"https://www.youtube.com/embed/PNbYPFdmBk0\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n- 第 58 行 ～ 第 61 行：判断处\n\n~~~python=\nfrom webai import *\n\nspeed = 60\ncarType = 1\n\ndef tracking(pin):\n    global carType,speed\n \n    left = p15.value()\n    right = p16.value()\n    msg = str(left)+\" : \"+str(right)\n\n    if left == 0 and right == 0:\n        if carType == 1:\n            mcar.forward(speed)\n        elif carType == 2:\n            mcar.move(0,speed)\n        elif carType == 3:\n            mcar.move(speed,0)\n\n    if left == 1 and right == 1:\n        carType = 1\n        mcar.forward(speed)\n    \n    if left == 1 and right == 0:\n        carType = 2\n        mcar.move(0,speed)\n    \n    if left == 0 and right == 1:\n        carType = 3\n        mcar.move(speed,0)\n    \n    #webai.draw_string(140,100,msg,scale=2)\n\np15 = webai.io.pin(15,pull_mode=webai.io.PULL_NONE)\np15.irq(tracking,GPIO.IRQ_BOTH)\np16 = webai.io.pin(16,pull_mode=webai.io.PULL_NONE)\np16.irq(tracking,GPIO.IRQ_BOTH)\n\n\nfrom webai_blockly import ObjectTracking\nfrom time import sleep\nfrom webai_blockly import Lcd\n\nobjGroup = None\nobj = None\n\nview = Lcd()\n\n_deviceID = '6e5596'\n\n\notb = ObjectTracking(flip=1, model='monster', classes=['green','red','yellow','blue'], threshold=0.1, w=320, h=224)\nwhile True:\n  otb.checkObjects()\n  green = otb.getObjects('green')\n  red = otb.getObjects('red')\n  if (len(red)) >= 1:\n    mcar.stop()\n  if (len(green)) >= 1:\n    tracking(None)\n\n  sleep(0.001)\n~~~\n\n## 马达控制\n\n### 前进\n\n```python\nmcar.forward() # 100% 动力前进\n\nmcar.forward(100) # 100% 动力前进\n\nmcar.forward(50) # 50% 动力前进\n```\n\n### 后退\n\n```python\nmcar.backward() # 100% 动力后退\n\nmcar.backward(100) # 100% 动力后退\n```\n\n### 停止\n\n```python\nmcar.stop() # 停止\n\nmcar.forward(0) # 停止\n\nmcar.backward(0) # 停止\n```\n\n### 左转\n\n```python\nmcar.left(100) # 100% 动力左转\n\nmcar.left(30) # 30% 动力左转\n```\n\n### 右转\n\n```python\nmcar.right(100) # 100% 动力右转\n\nmcar.right(30) # 30% 动力右转\n```\n### 左右轮\n\n- ==mcar.move( 左轮 , 右轮 )==\n- 数值区间：-100 ~ 100\n\n~~~python=\nfrom webai import *\nmcar.move( 100 , 100) # 100% 前进\n~~~\n\n#### 参考设定\n\n~~~python\nmcar.move( -100 , -100) # 100% 后退\n\nmcar.move( 45 , -45 ) # 向右转\n\nmcar.move( -45 , 45 ) # 向左转\n\nmcar.move(0,0) # 停止\n~~~\n\n## 相关传感器\n\n### 超音波：距离侦测\n\n利用发送超音波碰撞物体之后反射回来的时间差，来得出传感器与物体之间的距离。\n\n> 使用前请记得先接上超音波传感器！\n\n~~~python=\nfrom fpioa_manager import *\nfrom modules import hcsr04\nimport time\nfm.register(6, fm.fpioa.GPIO0, force = True)\nfm.register(11, fm.fpioa.GPIO1, force = True)\n\ndevice = hcsr04(fm.fpioa.GPIO0,fm.fpioa.GPIO1)\n\nwhile True:\n    try:\n        print(device.measure(hcsr04.UNIT_CM,100000))\n        time.sleep(0.05)\n    #except IDE interrupt\n    except Exception as e:\n        print(e)\n        if(str(e)==\"IDE interrupt\"):\n            break\n~~~\n\n### 红外线：无线控制\n\n![](../assets/images/upload_74c8803f271749db2115168b09413649.png)\n\n接收遥控器发射的红外线信号，并显示到屏幕上。\n\n~~~python=\nimport lcd, image, utime\nfrom Maix import GPIO\nfrom fpioa_manager import fm\n\nimg = image.Image()\nfm.register(25, fm.fpioa.GPIOHS1)\npin=GPIO(GPIO.GPIOHS1,GPIO.IN,GPIO.PULL_UP)\n\ndef read_data():\n   a = []\n   while pin.value() == 1:\n       pass\n   utime.sleep_us(13560)\n   for i in range(1000):\n       v = pin.value()\n       a.append(v)\n       utime.sleep_us(56)\n   a_c = []\n   count = 0\n   for i in a:\n       if i == 1:\n           count += 1\n\n       elif i == 0:\n           if count > 0 :\n               a_c.append(count)\n           count =0\n   for i in range(len(a_c)):\n       if a_c[i] > 10:\n           a_c[i] = \"1\"\n       else:\n           a_c[i] = \"0\"\n   B1 = \"\".join(a_c)\n   if(len(B1)==33):\n       print(B1[1:len(B1)])\n       hstr = '%0*X' % ((len(B1[1:len(B1)]) + 3) // 4, int(B1[1:len(B1)], 2))\n       print(hstr)\n       print(\"=====\")\n       img.clear()\n       img.draw_string(50, 100, hstr, scale=5)\n       lcd.display(img)\n   return B1\n\nwhile True:\n   f = read_data()\n~~~\n\n\n### 控制 LED 灯：魔幻 LED\n\n![](../assets/images/upload_c4fb10302e37e3b658d2b6e666042baf.png) ![](../assets/images/upload_08ed64231aeb00a936398be7f7b257dd.png) ![](../assets/images/upload_af8033adf5c9a7e373e13eadf490c257.png)\n\n- MoonCar 的 ws2812 Pin 脚为编号 22，总共有 8 颗灯\n- 程序内容：魔幻 LED 示例。\n    - 第 4 行：设定 Pin 脚为 22、LED 数量为 8 颗灯。\n\n~~~python=\nfrom modules import ws2812\nimport time\n\nclass_ws2812 = ws2812(led_pin=22,led_num=8)\ncolor = [(30,0,0),(0,30,0),(0,0,30),(30,30,0),(30,0,30),(0,30,30) ,(30,30,30),(0,0,0)]\nwhile True:\n    for x in color :\n        for i in [0,1,2,3,4,5,6,7] :\n            class_ws2812.set_led(i,x)\n            class_ws2812.display()\n            time.sleep(0.05)\n~~~\n\n### 蜂鸣器：播放音乐\n\n- MoonCar 的蜂鸣器 Pin 脚为编号 24。\n- 程序内容：播放 3 个音符。\n    - 第 3 行：设定发音频率\n    - 第 4 行：设定发音时间 ( 秒 )\n\n~~~python=\nfrom webai_ext import Buzzer\nbuzzer = Buzzer()\ntune = [392,692,440]\nsec = [0.25,0.25,0.5]\nfor i in [0,1,2] :\n    buzzer.bee(tune[i],sec[i])\n~~~\n\n## 万用遥控器控制登月小车\n\n执行程序后开发板屏幕会显示 QRcode，使用手机扫描后即可用 Webduino 万用遥控器控制小车。\n\n> 万用遥控器的使用方式可以参考：[万用遥控器控制登月小车](https://bpi-steam.com/WebAI/zh/MoonCar/MoonCar.html#%E4%B8%87%E7%94%A8%E9%81%A5%E6%8E%A7%E5%99%A8%E6%8E%A7%E5%88%B6%E7%99%BB%E6%9C%88%E5%B0%8F%E8%BD%A6)。\n\n![](../assets/images/upload_755911840efc039cab699de0c0465ec0.png)\n\n~~~python=\nfrom webai import *\nimport machine , ubinascii , os , time , gc , sensor\n\nmcar.init()\ndef cmd(name,msg):\n    webai.cmdProcess.sub(name,msg)\n    if msg == 'up':\n        webai.show(file='mrun.jpg')\n        mcar.forward(50)\n    if msg == 'down':\n        webai.show(file='m02.jpg')\n        mcar.backward(50)\n    if msg == 'left':\n        webai.show(file='mleft.jpg')\n        mcar.left(50)\n    if msg == 'right':\n        webai.show(file='mright.jpg')\n        mcar.right(50)\n    if msg == 'reset':\n        webai.show(file='m01.jpg')\n        mcar.stop()\n    if msg == '开心':\n        webai.speaker.play(filename=\"logo.wav\")\n\nwebai.show(file='mooncar.jpg')\nwebai.mqtt.sub('PING',cmd,includeID=True)\n~~~"}, "/WebAI/zh/index.html": {"title": "【 Web:AI 教学大纲 】", "content": "# 【 Web:AI 教学大纲 】\n\n## 一、开箱 Web:AI 开发板\n\n- [Web:AI 介绍](https://bpi-steam.com/WebAI/zh/Unboxing/Introduction.html)\n    - 产品内容\n    - Web:AI 开发板\n    - Webduino 教育平台\n- [初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)\n- [安裝版更新固件](https://bpi-steam.com/WebAI/zh/Unboxing/Update.html)\n- [开发板 Wi-Fi 设定](https://bpi-steam.com/WebAI/zh/Unboxing/SettingWIFI.html)\n- [操作模式](https://md.kingkit.codhttps://bpi-steam.com/WebAI/zh/Unboxing/Mode.html)\n    - 主程序模式\n    - QRcode 模式\n    - 恢复预设状态\n- [教学示例使用教学](https://bpi-steam.com/WebAI/zh/Unboxing/Card.html)\n\n## 二、Web:AI 图形编程\n\n- [图形编程平台介绍](https://bpi-steam.com/WebAI/zh/Programming/Introduction.html)\n- 基础功能\n    - [变量](https://bpi-steam.com/WebAI/zh/Programming/Basic/Variables.html)\n    - [逻辑](https://bpi-steam.com/WebAI/zh/Programming/Basic/Logic.html)\n    - [循环](https://bpi-steam.com/WebAI/zh/Programming/Basic/Loops.html)\n    - [数学](https://bpi-steam.com/WebAI/zh/Programming/Basic/Math.html)\n    - [文本](https://bpi-steam.com/WebAI/zh/Programming/Basic/Text.html)\n    - [数组](https://bpi-steam.com/WebAI/zh/Programming/Basic/Lists.html)\n    - [函数](https://bpi-steam.com/WebAI/zh/Programming/Basic/Functions.html)\n- 進階功能\n    - [文件读写](https://bpi-steam.com/WebAI/zh/Programming/Advanced/FileRW.html)\n    - [二维码扫描](https://bpi-steam.com/WebAI/zh/Programming/Advanced/QRCode.html)\n    - [颜色追踪](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Color.html)\n    - [人脸追踪](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Face.html)\n    - [影像分类](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Image.html)\n    - [物件追踪](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Object.html)\n    - [语音辨识](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Speech.html)\n    - 侦测\n- Web:AI\n    - [开发板](https://bpi-steam.com/WebAI/zh/Programming/WebAI/Board.html)\n    - [LCD 屏幕](https://bpi-steam.com/WebAI/zh/Programming/WebAI/LCD.html)\n    - [按钮开关](https://bpi-steam.com/WebAI/zh/Programming/WebAI/Button.html)\n    - [麦克风](https://bpi-steam.com/WebAI/zh/Programming/WebAI/Mic.html)\n    - [I/O 脚位](https://bpi-steam.com/WebAI/zh/Programming/WebAI/IO.html)\n- 扩充功能\n    - [网络广播](https://bpi-steam.com/WebAI/zh/Programming/Expand/MQTT.html)\n    - [舵机](https://bpi-steam.com/WebAI/zh/Programming/Expand/Servo.html)\n    - [扬声器](https://bpi-steam.com/WebAI/zh/Programming/Expand/Speaker.html)\n\n## [三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)\n\n- Web:AI 影像辨识介绍\n- 影像辨识流程\n- A. 登录影像训练平台\n- B. 建立分类\n- C. 使用开发板拍摄影像\n- D. 建立模型\n- E. 下载模型\n- F. 使用图形编程积木执行影像辨识\n\n## [四、使用 IDE 开发 Web:AI](https://bpi-steam.com/WebAI/zh/IDE/Dev.html)\n- 开发环境介绍\n- 使用 kflash_gui 更新固件\n- 使用 MaixPy IDE 运行代码\n- 程序示例\n\n## [五、操控 MoonCar](https://bpi-steam.com/WebAI/zh/MoonCar/MoonCar.html)\n\n- 颜色侦测\n- 循迹行驶\n- 循跡 + 物件追踪\n- 马达控制\n- 相关传感器\n- 万用遥控器控制登月小车\n\n\n## 七、附录\n\n- MaixPy 文件 [[简体](https://wiki.sipeed.com/soft/maixpy/zh/index.html)] [[英文](https://wiki.sipeed.com/soft/maixpy/en/)]\n- MaixPy 程序示例 [[github](https://github.com/sipeed/MaixPy_scripts)]"}, "/WebAI/zh/Train/Train.html": {"title": "三、影像训练", "content": "# 三、影像训练\n\nWeb:AI 影像辨识分为**影像分类** 以及**物件追踪**，可以使用Web:AI 开发板拍摄影像上传至Webduino 影像训练平台进行影像训练，将训练完成的模型下载，再应用图形编程设计程序来执行影像辨识。\n\n## 影像辨识流程\n\n进行影像辨识的流程中，需要先分别建立影像分类，接着选择要建立的模型种类 ( 影像分类、物件追踪 )，并将分类放入模型中，就可以使用模型来进行影像辨识了。\n\n![](../assets/images/upload_499be377eb3ef3848cd92334209b9b78.png)\n\n## A. 登录影像训练平台\n\n1. 点击此链接进入 [Webduino 影像训练平台](https://vision.webduino.io)。\n\n   ![登录画面](../assets/images/upload_c05bf863042a5e058ff175a0bdfc1ecf.png)\n\n2. 点击「Register」按钮注册帐号或使用 Google、FB 帐号直接登录。\n\n   ![同意授权](../assets/images/upload_5c92d56778b31b686d9116fe16d79bfd.png)\n\n3. 点击「同意授权」，进入 Webduino 影像训练平台。\n\n## B. 建立分类\n\n1. 在 Webduino 影像训练平台中可以看到左侧的侧边栏有「分类」和「模型」两个选项，点击「分类」进入分类列表。\n\n   ![分类列表](../assets/images/upload_95f140f81372466c615d54ec195f0268.png)\n\n2. 点击蓝色「新增」按钮，跳出「建立分类」视窗。\n\n   ![建立分类](../assets/images/upload_8a3c86c0cd8325837d4ccdddf39badb0.png)\n\n    - 输入分类名称，**请勿输入中文、空格、符号**\n    - 选择分享状态\n    - 影像上传方式点选「Web:AI」，进入下一步\n\n   ![](../assets/images/upload_51dee50233ff9b3067dbde3e1179b8e7.jpg)\n\n    - 输入要拍照的数量\n    - 输入 Web:AI 开发板的 DeviceID\n    - 选择是否旋转镜头\n        - 是：使用后镜头 ( 镜头在屏幕背面 )\n        - 否：使用前镜头 ( 镜头和屏幕在同一侧 )\n     > 目前因为镜头旋转功能外壳尚未上市，因此旋转镜头选项**不需勾选**，敬请期待！\n\n3. 点击「建立分类」按钮\n\n   ![](../assets/images/upload_26143c122bdc6adeac5cf1bb124805fa.png)\n\n4. 看到「传送指令成功」讯息，就可以开始使用 Web:AI 开发板拍照。\n\n## C. 使用开发板拍摄影像\n\n传送指令成功后，开发板会重新启动，进入拍照模式。\n\n### 拍照模式\n\n- 左上角白色数字：目前拍照张数\n- L 按钮：拍摄照片\n- R 按钮：调整白框大小\n- 中间白色方框：拍照时，让拍摄物件跟方框相当大小\n\n  ![](../assets/images/upload_cf63b2e27ef9efa9f58fe5127e8447a7.png)\n\n让**拍摄物件跟方框相当大小**时按下 **L 按钮** 拍摄，并且稍微转动角度，拍摄不同角度影像。\n\n### 上传影像\n\n1. 拍完设定的照片数量后，画面会变全黑，开始上传图片。\n\n   ![](../assets/images/upload_bc218c4a4f6d483fed0da9390e9418d6.png)\n\n2. 等待上传完成后，画面中央会显示白色 ok，正下方显示上传时间。\n\n   ![](../assets/images/upload_746aa7aef3c1e1fb295eb7470ad46a11.png)\n\n\n3. 点击视窗中的 ✕ 或「回到主画面」，将视窗关闭。\n\n### 建立 2~4 个分类\n\n进行影像辨识时，模型内需要放入 2~4 个分类才能进行辨识，\n因此重复上述 **建立分类**、**使用开发板拍摄影像** 步骤，建立两个以上的分类。\n\n## D. 建立模型\n\n1. 建立完分类后，在左侧的侧边栏选择「模型」，进入模型列表。\n\n   ![模型列表](../assets/images/upload_23e1965f689c02c67697c9a98e97bb72.png)\n\n2. 点击蓝色「新增」按钮，跳出「新增模型」视窗。\n\n   ![](../assets/images/upload_4aee1e16f5e3bd4278a1d948575f85c7.png)\n\n    - 输入模型名称，**请勿输入中文、空格、符号或使用过的名称**\n    - 选择模型种类 ( 影像分类、物件追踪 )\n        ![](../assets/images/upload_04e57bcc782a11a41b773fd0286a7fb7.png)\n    - 选择分享状态\n    - 模型建立方式点选「挑选分类」\n\n3. 从分类列表中点选 2~4 个要进行影像辨识的分类，点击「建立模型」。\n\n   ![新增模型](../assets/images/upload_3d978d4eed334b5f7460c9d2a847be91.png)\n\n4. 等待模型训练完成后，就可以在模型列表中找到建立的模型，并且可以看到模型内的**分类名称**以及**模型种类**。\n\n   ![](../assets/images/upload_e70d83463d16c7cc32c71c18eed6018f.png)\n\n   > 因为物件追踪的演算法较复杂，因此训练时间较久是正常的！\n\n## E. 下载模型\n\n1. 点击要进行影像辨识的模型，将弹出「模型选项」视窗。\n\n    a. 点击下载模型。\n\n      ![模型选项](../assets/images/upload_421b3cf5d2bacd5a44e760e55acbaab2.png)\n\n    b. 输入开发板 Device ID。\n\n    ![](../assets/images/upload_85120262df264ff7c6ef18185de48ff0.jpg)\n\n    c. 点击「下载模型」后传送指令。\n\n   ![](../assets/images/upload_8bb31a114b474f607cfd999f12b2de6d.png)\n\n2. 点击「下载模型」按钮，出现「传送指令成功」时Web:AI 开发板开始下载模型。\n\n   ![下载模型](../assets/images/upload_4c9f64a09ca70542b7bd7cf1a83c276b.png)\n\n3. 完成 100% 后，画面会显示 **ok** 字样代表完成下载，就可以开始进行影像辨识了。\n\n## F. 应用图形编程设计程序以执行影像辨识\n\n在图形编程平台中，可以分别使用影像分类和物件追踪积木，来达到不同的影像辨识功能。\n\n> 有关更详细积木的使用，欢迎参考：\n>- [影像分类](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Image.html)\n>- [物件追踪](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Object.html)\n\n### 影像分类\n\n1. 先依照上面步骤，将训练过的影像分类模型下载到 Web:AI 开发板中。\n\n2. 开启 Web:AI 图形编程平台。\n\n3. 使用「设定模型」积木，输入模型名称，\n在数组内放入和分类数量相同的积木，按照模型列表的**分类顺序**输入**分类名称**。\n并将宽、高都输入 224。\n\n   >- 使用 Webduino 影像训练平台训练的模型尺寸为 224*224。\n   >- 自行使用其它工具训练，则需输入各别的尺寸。\n\n   ![](../assets/images/upload_5f7a955964d7920ceeaad38699898af5.png)\n\n4. 在下方加入「无限循环」积木，里面放入「开始辨识影像」积木和「LCD 显示文字」积木。\n\n    ![](../assets/images/upload_a000127272667e0c386638e579685627.png)\n\n5. 「LCD 显示文字」积木内放入「字串组合」积木，后方放入「取得辨识到的影像( 名称)」积木、「文字」积木输入底线、「取得辨识到的影像( 信心度) 」积木。\n\n    ![](../assets/images/upload_7c33811336f28996d01ff70a6a7586cb.png)\n\n6. 程序编辑完成后，按下右上角绿色「执行」按钮，出现「正在努力搬运Blockly 中...」和「正在组装积木...」，读取结束后Web:AI 开发板会自动开启辨识画面。\n\n7. 使用镜头对准辨识物件就能看到文字显示辨识结果和信心度。\n\n   ![影像辨识结果](../assets/images/upload_18ff3d4a326a6123cb54fb20940150f9.png)\n\n> 若要使用其它模型来进行影像辨识，需要回到步骤 **下载模型**，再次下载模型。\n \n### 物件追踪\n\n1. 先依照上面步骤，将训练过的物件追踪模型下载到 Web:AI 开发板中。\n\n2. 开启 Web:AI 图形编程平台。\n\n3. 使用「设定模型」积木，输入模型名称，\n在数组内放入和分类数量相同的积木，按照模型列表的**分类顺序**输入**分类名称**。\n并将宽、高都输入 224。\n\n   >- 使用 Webduino 影像训练平台训练的模型尺寸为 224*224。\n   >- 使用开发板预设的模型请输入 320*240。\n   >- 自行使用其它工具训练，则需输入各别的尺寸。\n\n   ![](../assets/images/upload_ac15f02988b89b8dc37d75892320e602.png)\n\n4. 在下方加入「无限循环」积木，里面放入「开始侦测物件」积木和「LCD 显示文字」积木。\n\n   ![](../assets/images/upload_4216bd52f357fbf566cc5f86857aeef5.png)\n\n5. 编辑物件追踪的相关程序，让侦测时可以读取到模型 ( 数组 ) 内的分类，并且在屏幕上显示需要的数值，如下图设定：\n\n   ![](../assets/images/upload_22315fc7fc92b0ebb011c02fba679ebf.png)\n\n6. 将编辑好的程序放在「开始侦测物件」积木下方。\n\n   ![](../assets/images/upload_89d2a0352b277bb63e702afa93c5285e.png)\n\n7. 程序编辑完成后，按下右上角「执行」按钮，出现「正在努力搬运 Blockly 中…」和「正在组装积木…」，读取结束后 Web:AI 开发板会自动开启辨识画面。\n\n8. 使用镜头对准辨识物件就能看到白框显示辨识结果和座标。\n\n   ![](../assets/images/upload_530ef50e37b082fdaea2397df9d0832f.png)"}, "/WebAI/zh/Unboxing/Introduction.html": {"title": "Web:AI 介绍", "content": "# Web:AI 介绍\n\nWeb:AI 使用 AI 芯片 ( K210 ) 以及 Wi-Fi 芯片 ( ESP8285 )，能够做出人脸追踪，影像分类，物件追踪，语音辨识，QRcode扫描等应用，只需要一块开发板就能让AI人工智能融入生活。\n\n不论是联网或是离线，只要通过[Webduino 教育平台](https://account.webduino.io/dashboard)，就能够用最简单的方式上手AIoT人工智能物联网。\n\n## 产品内容\n\n除了 Web:AI 开发板外，也包含了扬声器和 USB 线，让开发板能够立即使用扬声器播放音频效；另外更附赠了教学示例卡，只要进入QRcode模式进行二维码识别，就能马上使用内建的程序示例，搭配小怪兽卡做出各种不同的互动效果。\n- Web:AI 开发板\n- USB 线\n- 扬声器\n- 教学示例卡 ( 部分示例需要搭配扬声器及登月小车 )\n- 小怪兽卡\n\n![](../assets/images/upload_f9d0e0034687439edf1e2b51711b90d9.jpg)\n\n## Web:AI 开发板\n\n### 硬件规格\n\nWeb:AI 开发板硬件内含摄像镜头和LCD屏幕，可即使做出影像互动；板载的麦克风与扬声器插座能够做出录音，播放音频等语音互动；和 Web:Bit 兼容的金手指引脚可以直接接上 Web:Bit 扩充版，用于连接各类传感器，控制器等外设，完美达成AI与IoT的结合。\n\n- 尺寸：51.6 x 67mm\n- LCD 屏幕：8bit MCU 2.3\"，分辨率 320x240\n- 电源输入:\n    - Micro USB ( 5VDC / 2A )\n    - 锂电池插座 ( 3.7~4.2V )\n- CPU：双核 64bit RISC-V，内建浮点运算器、神经网络处理器，标准频率 400MHz\n- 鏡頭：500万像素\n- 插座：金手指兼容 ( Web:Bit / micro:bit )、TF card、扬声器、锂电池\n- 按钮：L 按钮、R 按钮、Reset 按钮\n- 无线网络：内建 ESP8285 模组，支持 2.4G 802.11.b/g/n\n- 音频：内建 MEMS 麦克风，扬声器插座支持 3W 扬声器输出\n\n![](../assets/images/upload_690adf72aa0b8a3d0fc4f3a0f8c726ed.jpg)\n\n### 腳位定義\n\n有关 Web:AI 的引脚和使用的芯片如下：\n\n![](../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n### 主芯片 ( K210 ) & Wi-Fi 芯片 ( ESP8285 )\n\n![](../assets/images/upload_44609bc24a5a34baf5a7e554ef92bd8e.png)\n\n### 开发板指示灯\n\n![](../assets/images/upload_5f90a5b39c8911dddb7cd8cb5aa26dc9.png)\n\n- 蓝灯：通电中，不论是接电池或是电源都会闪烁。\n- 黃灯：电源开时灯亮，电源关时熄灭。\n- 紅灯：电池缺电。\n- 綠灯：电池蓄满或没接上电池。\n\n## Webduino 教育平台\n\nWeb:AI 的开发和程序编程可以通过图形编程平台以及IDE来进行，图形编程平台可以让人从最简单的方式入门程序编程；而IDE则是能够让有编程基础的人编写程序代码并下载到开发板上。\n\n### 操作环境\n\n首先进入 [Webduino 教育平台](https://account.webduino.io/dashboard)。\n\n![](../assets/images/upload_13e1bb76387fb4c6eab824e71951a4b8.png)\n\n### Web:AI 图形编程\n\n选择「Web:AI 图形编程」，进入图形编程平台。\n\n   >- 链接：[图形编程平台](https://ai-blockly.webduino.io/)。\n\n   ![](../assets/images/upload_18082d1a3d97ce4893aafb92a70997eb.png)\n\n### Webduino 影像训练平台\n\n选择「Webduino 影像训练平台」。\n\n>- 关于影像训练平台的使用，欢迎参考：[三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)。\n\n   ![](../assets/images/upload_48339186b99e357a04e4f64061681b4b.png)\n\n### MaixPy IDE 下载\n\n选择「MaixPy IDE 下载」。\n\n>- 关于IDE的开发使用，欢迎参考：[四、使用 IDE 开发 Web:AI](https://bpi-steam.com/WebAI/zh/IDE/Dev.html)。\n\n   ![](../assets/images/upload_443f3bd4facb8552328c0e336bf3d4d7.png)"}, "/WebAI/zh/Unboxing/Card.html": {"title": "教学示例卡使用教学", "content": "# 教学示例卡使用教学\n\n教学示例卡是Web:AI为各教育单位提供的程序示例，只要使用开发板扫描QRcode，就能立即体验AI人工智能，并快速在课堂中进行示例演示。\n\n## 教学视频\n\n欢迎参考下方教学视频：\n\n<iframe src=\"https://www.youtube.com/embed/Qgtthh7d9xQ\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 介绍\n\n教学示例包含：\n\nA.人脸追踪\n\nB.语音互动\n\nC.小怪兽追踪\n\nD.口罩侦测\n\nE.登月小车追踪小怪兽\n\nF.万用遥控器控制登月小车\n\n>「登月小车追踪小怪兽」及「万用遥控器控制登月小车」示例需要搭配登月小车作使用。欢迎参考：[MoonCar登月小车](https://store.webduino.io/products/webbit-mooncar)。\n\n![](../assets/images/upload_86e43decc1a7d68c02e3d29b8afa6486.png)\n\n## 使用教学\n\n1.使用Web:AI开发板进入QRcode模式\n\n>关于如何进入QRcode模式，欢迎参考：[操作模式：QRcode模式教学](https://bpi-steam.com/WebAI/zh/Unboxing/Mode.html#QRcode%E6%A8%A1%E5%BC%8F)。\n\n2.拿出教学示例卡，翻到背面的QRcode。\n\n![](../assets/images/upload_c79aff377c0b1565abb23ab50cdf9a90.png)\n\n3.使用Web:AI开发板的镜头扫描卡片上的QRcode。\n\n![](../assets/images/upload_47965ccb81eed22dda80d6dec5796d9e.png)\n\n5.扫描成功后即可应用教学示例。\n\n## A.人脸追踪\n\n以人脸的五官来作为模型，经过机器学习后可以辨识出画面中的人脸。\n\n不限定人脸数量，但可能会受到环境光照的影响而产生些许误差。\n\n![](../assets/images/upload_fc87a0d0fbc684b427ac1f6884f322fe.png)\n\n>-关于人脸追踪，欢迎参考：[人脸追踪积木](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Face.html)。\n\n## B.语音互动\n\n基于「语音辨识」的原理实现的语音互动，开发板中放入了男性、女性、Google小姐等语音，侦测到声音频率变化而做出对应的效果。\n\n![](../assets/images/upload_a963ed1f635edc162946092166344927.png)\n\n包含3种不同互动，只要对着Web:AI说出「你好吗？」、「自拍」、「你是谁？」，就会产生不同的互动效果\n\n>因为每个人的声音模型都不同，如果侦测不灵敏，可以使用Google小姐来说出指令。\n\n### 1.你好吗？\n\nLCD屏幕随机显示1只小怪兽及情绪，并通过麦克风发出对应的音效。\n\n### 2.自拍\n\nWeb:AI开发板开启摄像镜头，对着自己拍一张照片并显示在LCD屏幕上。\n\n### 3.你是谁？\n\n梦想成为科技教具的Web:AI会自我介绍给大家听!\n\n>-关于语音辨识，欢迎参考：[语音辨识积木](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Speech.html)。\n\n## C.小怪兽追踪\n\n采用「物件追踪」的技术辨识并追踪4只小怪兽，根据画面中的小怪兽显示信息。\n\n![](../assets/images/upload_2964da9e487533253728e42b692106fd.png)\n\n###下载物件追踪模型时：\n\n示例小卡使用的小怪兽模型是预设在开发板中的物件追踪模型，如果从[图像训练平台](https://vision.webduino.io/)下载物件追踪模型会将小怪兽模型覆盖。\n\n若是要再次使用，就需要将开发板恢复固件。\n\n>-关于物件追踪，欢迎参考：[四、训练图像分类、物件追踪](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Object.html)。\n\n>-关于恢复固件，欢迎参考：[初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n## D.口罩侦测\n\n配合疫情时事，以人脸模型和配戴口罩的人脸模型做出的口罩侦测。\n\n-当侦测到人脸配戴口罩，显示「安全!」。\n\n-当侦测到人脸**未**配戴口罩，显示「危险!」。\n\n![](../assets/images/upload_49f5f3bf9c0c9758d2afc71cdbbbd849.png)\n\n>-关于口罩侦测，欢迎参考：[人脸追踪积木](https://bpi-steam.com/WebAI/zh/Programming/Advanced/Face.html)。\n\n## E.登月小车追踪小怪兽\n\n登月小车结合「物件追踪」技术，辨识4只颜色的小怪兽，让魔幻LED发出相对应颜色的光，并且依据LCD屏幕中小怪兽的位置来控制登月小车的前进、左转、右转，让小车追着小怪兽行驶。\n\n![](../assets/images/upload_a53a4388615c70d2dff2596ed0c7350b.png)\n\n## F.万用遥控器控制登月小车\n\n想要直接操控登月小车吗？\n\n「Webduino万用遥控器」可以直接滑动网页中的小车图案，用最简单的方式控制小车的移动。\n\n![](../assets/images/upload_4ec04f8ec8a7eed76cda49db003b6e3c.png)\n\n### 操作步骤\n\n1.使用Web:AI开发板扫描「万用遥控器控制小车QRcode」，进入「万用遥控器控制小车」模式。\n\n进入后可以看到屏幕显示QRcode及「请用手机扫描」。\n\n![](../assets/images/upload_18b796b949623c844f4c3c82e4f33546.png)\n\n2.使用手机扫描屏幕上的QRcode，进入Webduino万用遥控器界面。\n\n(也可以直接点击[Webduino万用遥控器](https://webduinoio.github.io/webduino-remote/index.html)连接进入)\n\n![](../assets/images/upload_16b89d4576479a4cb74d65eff5f5ec3c.png)\n\n3.点击右上角菜单按钮，开启设定画面。\n\n![](../assets/images/upload_65a2c6e74428129cd5c55c8c4ba1c9ea.png)\n\n4.在「发送」字段输入**DeviceID/PING**。\n\n(如：DeviceID为**1a23b4**，则是输入**1a23b4/PING**)\n\n![](../assets/images/upload_ccc8072293fc841a1176e178dbb53206.png)\n\n5.输入完毕后，点击右上角✕符号关闭，即可滑动中央的小车图案来操控小车移动。\n\n![](../assets/images/upload_40883633de2dcda3b46109841967b441.gif)"}, "/WebAI/zh/Unboxing/Mode.html": {"title": "操作模式", "content": "# 操作模式\n\n当Web:AI做完Wi-Fi设定及固件更新后，就可以开始运行各种AIoT应用了。\n\n而使用Web:AI开发板时，有一些操作方式需要先了解，清楚之后可以尽情使用Web:AI了!\n\n>关于Wi-Fi设定及固件更新，欢迎参考：[初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n## 开机\n\n1.首先需要将Web:AI开发板接上电源，只要接上电源就会自动开机。\n\n2.一开机会显示Webduino Logo\n\n![](../assets/images/upload_39d9a3c14177e2a3a00be66ce2d14caf.png)\n\n3.接着进入倒数画面，这时可以选择要进入**主程序模式**或是**QRcode模式**。\n\n## 关机\n\n拔掉电源后会自动断电关机，最后运行过的程序也会被储存在开发板中。\n\n再次重新插上电源后，可以马上运行已下载的程序。\n\n>直接移除电源并不会导致开发板损坏，请安心使用!\n\n## 重启\n\n当编写了有问题的程序、网络信号不稳导致开发板出现意外的状况，或是想要重新运行程序时，就需要重启。\n\n### 重启方式：\n\n使用下列2种方式，都能够让开发板马上重新启动。\n\n-按下开发板背面的Reset按钮\n\n![](../assets/images/upload_11597dde7f02d711163102895c346df9.png)\n\n-移除电源再重新插上\n\n>反复重启并不会导致开发板损坏，请安心使用!\n\n## 主程序模式\n\n开机后会进入倒数的画面，在这时候做出以下其中一种动作，就会进入主程序模式。\n\n- **在倒数画面不做任何动作，等待倒数结束**\n\n- **在倒数画面按下“L按钮”**\n\n![](../assets/images/upload_f9ef2d253302384ede2a83a16efac3f7.png)\n\n进入主程序后，就会直接运行已下载的程序。\n\n## QRcode模式\n\n在Wi-Fi设定或使用教学示例小卡时，需要用到QRcode模式。\n\n###步骤\n\n开机后会进入倒数的画面，这时候**按下“R按钮”**，就会进入QRcode模式，即可开始扫描QRcode。\n\n![](../assets/images/upload_80075f62e13de57602897782d53ce31e.png)\n\n>- [初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)\n\n>- [教学示例使用教学](https://bpi-steam.com/WebAI/zh/Unboxing/Card.html)\n\n##恢复预设状态\n\n恢复预设状态功能可以将Web:AI的程序和Wi-Fi设定恢复到设备初始状态。\n\n### 用途\n\n当程序写错或遇到异常错误时(例如：使用大量错误的循环积木)，容易造成程序卡死，这时就需要使用恢复预设状态功能来让开发板回到预设状态。\n\n### 预设状态\n\n- Wi-Fi状态：无联机\n\n- LCD屏幕：显示「请前往网址，设定Wi-Fi」，画面如下：\n\n![](../assets/images/upload_8b1389ecc47f7cfa583dcb399bfe48bd.png)\n\n### 步骤\n\n1. **“按住”** Web:AI开发板L按钮。\n\n2.按下Reset按钮。\n\n3.当屏幕出现红色全屏画面，放开L按钮。\n\n4.开发板重启，完成恢复预设状态。\n\n>恢复预设状态之后的设定，请参考：[初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。"}, "/WebAI/zh/Unboxing/SettingWIFI.html": {"title": "开发板Wi-Fi设定", "content": "# 开发板Wi-Fi设定\n\n若需要更改联机的Wi-Fi，则要对开发板进行Wi-Fi设定，完成后就能够让开发板通过新设定的wifi与网络连接。\n\n## 步骤\n\n1.在Web:AI图形编程平台中，点击「WiFi设定」按钮，\n\n![](../assets/images/upload_968fc0eceabcccc185b7bc2a546b1d71.jpg)\n\n2.跳出「WiFi设定」视窗，输入SSID和密码后，点击「设定」，进入QRcode页面。\n\n- SSID：Wi-Fi名称\n\n- 密码：Wi-Fi密码\n\n![](../assets/images/upload_6f7e320080816647d62cb09c622b046b.png)\n\n![](../assets/images/upload_9bbf3a19c931f8b93d79f517ac190dd9.png)\n\n3.按下开发板上的**Reset按钮**，在5秒内按下**R按钮**，进入QRcode扫描模式。\n\n![](../assets/images/upload_66a49e02553990d76e2a2d7739e9c6c9.jpg)\n\n4.使用开发板镜头对准QRcode扫描，进入Wi-Fi设定流程。\n\n5.设定完成后开发板会重新启动，画面会**显示SSID信息、Wi-Fi状态为OK**，即完成Wi-Fi设定，开发板就能连接新设定的wifi了。\n\n![](../assets/images/upload_93bbda39b7df5db3b8fa2ee6d5fa19f6.jpg)"}, "/WebAI/zh/Unboxing/Initialization.html": {"title": "初始化设定 ( 第一次使用请看这里 )", "content": "# 初始化设定 ( 第一次使用请看这里 )\n\nWeb:AI 开发板的固件分为2种芯片的固件，分別是主芯片 ( K210 ) 和 Wi-Fi 芯片 ( ESP8285 )。\n第一次使用 Web:AI 开发板之前，需要先设定 Wi-Fi 及对芯片进行固件更新，將开发板固件升级到最新版本，才能顺利使用最全面的功能。\n\n#### [Wi-Fi 设定页面](https://webai.webduino.io) ( 需要通过电脑的Chrome浏览器打开此网页 )\n\n## 教学影片\n\n欢迎参考下方教学影片：\n\n<iframe src=\"https://www.youtube.com/embed/ZSGkZUQQXcI\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 教学步骤：Wi-Fi 设定\n\n当拿到 Web:AI 开发板后，只要按照教学步骤或上方影片一步步操作，就可以完成初始化设定咯!\n\n1. 首先使用电脑打开 Chrome 浏览器进入 [Wi-Fi 设定页面](https://webai.webduino.io)。\n\n    > 如果 Chrome 版本低于 89，需要先將浏览器更新到最新版本!\n\n2. 將 Web:AI 开发板通过 USB 数据线连接到电脑。\n\n3. 按下「点击开始设定」。\n    ![](../assets/images/upload_02a4681ffc6dfd1aa921e27afe17f2f5.png)\n\n4. 点击「开始连接」。\n\n    ![](../assets/images/upload_792d00f7981cf19f3ffad15bf3930abf.png)\n\n5. 选择连接 Web:AI 的 USB，点击「连接」。\n\n    ![](../assets/images/upload_4892028c07de2478564d8705933f5580.png)\n\n6. 电脑连接上 Web:AI 后会出现开发板的 Device ID 和现在的固件版本。\n\n    ![](../assets/images/upload_44766cf13211c94964896050340ceb25.jpg)\n\n\n7. 在 Wi-Fi 连接画面，选择 Wi-Fi 并输入密码，按下「储存连接」。\n\n    ![](../assets/images/upload_ddcfed56e5b16ca8494e8c37dc6b9bed.jpg)\n\n8. 成功完成 Wi-Fi 设定!\n\n    ![](../assets/images/upload_4938d84b09b19e6ff298bb8808661543.jpg)\n\n> 如果需要进行固件更新，则要接着进行后续步骤。\n\n## 教学步骤：更新固件\n\n1. 设定完 Wi-Fi 后，如果画面有「已有新版本，点击更新」，代表有新版本可以更新。\n\n   点击「更新固件」。\n\n    ![](../assets/images/upload_417de60a4f044c3973890328c1ce6987.png)\n\n2. 等待固件更新，开发板屏幕会显示更新进度，在此期间请勿中断USB连接或是停止供电。\n\n    ![](../assets/images/upload_73e353a9e9a08eb82c1884c0b2c8bba2.png)\n    ![](../assets/images/upload_d1a8539e1deef8d0c520d7bfc5fb2b0e.png)\n\n3. 更新完成后，重新开机就可以开始使用 Web:AI 了!\n\n    ![](../assets/images/upload_8dbf16901021d914270ba5134b478694.png)\n\n## 小提醒\n\n- 当开发板LCD屏幕呈现下图所示的**相同内容**时，才能在 Wi-Fi 设定页面进行初始化设定。\n\n    ![](../assets/images/upload_9c75be672cbd440d6ee3fdb4f04b77c9.png)\n\n- 想要再次设定 Wi-Fi 时，请先将开发板 [恢复预设状态](https://bpi-steam.com/WebAI/zh/Unboxing/Mode.html#%E5%9B%9E%E5%BE%A9%E9%A0%90%E8%A8%AD%E7%8B%80%E6%85%8B)，当开发板显示和上图相同时就可以进行操作。\n\n- 如果通过上述步骤无法更新固件，可以參考：[安装版更新固件](https://bpi-steam.com/WebAI/zh/Unboxing/Update.html) 来完成设定!\n\n- 如果设定页面文字显示为「网络：人工智能」，如下图，代表 Chrome 浏览器有经过网页自动翻译。网页自动翻译可能会造成 Wi-Fi 设定出错，需要将语言设定到「英文」并重新加载网页才能正常使用。\n\n    ![](../assets/images/upload_f35bd1f701c2304cac254c885f1ef660.jpg)\n\n    ![](../assets/images/upload_698b723317d3f9e955ac643af178d3fe.jpg)"}, "/WebAI/zh/Unboxing/Update.html": {"title": "安装版更新固件", "content": "# 安装版更新固件\n\nWeb:AI开发板的固件中使用了2种芯片，分别是主芯片(K210)和Wi-Fi芯片(ESP8285)。\n\n第一次使用Web:AI开发板之前，需要先对芯片做固件更新，将开发板升级到最新版本，才能顺利使用最全面的功能。\n\n#### 连接：[Web:AI安装版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)\n\n![](../assets/images/upload_d8caf85eb964dda018799fe2f9b8476d.png)\n\n## 教学视频\n\n欢迎参考下方教学视频：\n\n<iframe src=\"https://www.youtube.com/embed/vl6XY0iCCuM\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n## 通过Web:AI安装版进行固件更新\n\n1.首先下载[Web:AI安装版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)。\n\n2.下载后点击执行，安装完成后就可以启动Web:AI安装版了。\n\n![](../assets/images/upload_4c0c19b4782014407c134e49323fa2f4.png)\n\n-启动Web:AI安装版，可以看到窗口最上方显示「正在搜寻装置…」，代表并未连接上开发板。\n\n![](../assets/images/upload_6e38bcc632aad5ef625c43833b4cd579.png)\n\n-通过USB线将Web:AI开发板连接上电脑，当Web:AI安装版窗口显示「已侦测到装置」，代表成功读取到开发板信息。\n\n![](../assets/images/upload_01d95577c2800de0b1686ecf195a160d.png)\n\n3.侦测到装置后，点击左上角「工具」>「更新固件」，开始进行主芯片固件更新，窗口上方会显示目前更新进度。\n\n![](../assets/images/upload_7ba6a2e5f255c8ec78d61b4937d64f06.png)\n\n:::danger\n恢复原厂固件时，请勿按下Reset按钮及拔除电源!\n:::\n\n4.固件更新完成后，开发板会重启。这时LCD屏幕画面如下图，需要进一步完成Wi-Fi设定才能开始使用。\n\n![](../assets/images/upload_cffca67e2ed07221bf1445851c16c967.png)\n\n>完成固件更新后，欢迎参考[初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)来完成Wi-Fi设定。"}, "/WebAI/zh/IDE/Dev.html": {"title": "四、使用 IDE 开发 Web:AI", "content": "# 四、使用 IDE 开发 Web:AI\n\nWeb:AI 开发板除了可以用图形编程平台操作外，甚至也支持直接在 IDE 上编写 Python 程序，并通过开发板执行。\n\n> IDE：Integrated Development Environment ( 整合开发环境 )，一种辅助开发软体的应用程序，是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。\n\n\n\n### 脚位定义\n\n![](../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n### 主芯片 ( K210 ) & Wi-Fi 芯片 ( ESP8285 )\n\n![](../assets/images/upload_44609bc24a5a34baf5a7e554ef92bd8e.png)\n\n\n## 开发环境介绍\n\nWeb:AI 开发板可配合[Sipeed公司](https://maixpy.sipeed.com/) 推出的MaixPy IDE 使用，该IDE 虽然没有开源，但提供了程序编写整合开发环境，可以编写MicroPython代码并传送到Web:AI开发板中执行，欢迎参考下方操作步骤。\n\n开发环境画面如下：\n\n![MaixPy](../assets/images/upload_81c4247711446de3b89009483a0f36e5.png)\n\n## 使用 kflash_gui 更新标准版固件\n\n需要先使用 kflash_gui 将 Web:AI 固件文件烧录至开发板中，才能通过 MaixPy IDE 使用 Web:AI 功能。\n\n> 烧录前请先通过 USB 线将 Web:AI 开发板接上电脑。\n\n### 使用 kflash_gui 烧录\n\n1. 下载 Web:AI 固件文件 [固件文件](https://drive.google.com/file/d/1c819ka2ng8UgqVvTEjVFMPiEBrzDYyxO/view?usp=sharing)。\n\n2. 下载 [kflash_gui](https://github.com/sipeed/kflash_gui/releases/tag/v1.6.7)，点击执行，开启 webai.kfpkg 固件文件，等待下载完毕后就烧录完成了。\n\n   ![](../assets/images/upload_ce3be2497b3bbb94d08f5d14df8ffc09.png)\n\n3. kflash_gui 参数设定画面如下，如果烧录异常，可尝试调整烧录的速度\n\n   ![](../assets/images/upload_7e9b1dddd437cb218a9afe4119ad4db1.png)\n\n## 使用 MaixPy IDE 执行指令\n\n### 1. 下载 MaixPy IDE：\n\n点击 [MaixPy IDE](https://drive.google.com/drive/u/0/folders/1AhEgANgd8PxQOlZgmxWc8JhbpstaIXDS) 下载，安装后开启 MaixPy IDE 应用程序，进入开发环境画面。\n\n![MaixPy IDE 界面](../assets/images/upload_ef24ff8d1880128fa54c87a49cc5105f.png)\n\n### 2. 新建文件：\n\n点击左侧侧边栏「新建文件」按钮 ( 白色资料图示 )，在页面中可以自行输入 Python 程序码。可以直接复制下方的程序码示例，粘贴在编辑画面中，执行示例演示。\n\n### 3. 选择开发板：\n\n点击上方「工具」>「选择开发板」>「Sipeed Maix Bit ( with Mic )」，代表选择控制 Web:AI 开发板。\n\n![](../assets/images/upload_5cf48d37570d61c20fa0f3cc0f94debe.png)\n\n### 4. 开启终端\n\n1. 点击上方「工具」>「开启终端」>「新终端」\n\n   ![](../assets/images/upload_3abe5bed046bbf41d2914681d4fd0daf.png)\n\n2. 选择「连线到序列埠」\n\n   ![](../assets/images/upload_6add55ea4c6d108b5fe3cad6542724db.png)\n\n\n### 5. 开启 Web:AI\n\n1. 开启终端后，会看到如下画面：\n\n   ![](../assets/images/upload_e59c37efecb5c1b2527510b9a2889417.png)\n\n2. 在 IDE 中输入程序码，按下执行，即可在直接终端中查看执行结果。\n\n## 程序示例\n\n使用 Python 程序时，可以直接复制下方的程序码示例，粘贴在编辑画面中，执行示例演示。\n\n## 传感器\n\n![](../assets/images/upload_22df52e5a1be1ec587fe04a042634959.png)\n\n### 示例：摄像头 Sensor\n\n- 程序内容：使用 Web:AI 内建的摄像头捕捉画面，实时显示到 LCD 屏幕中。\n\n~~~python=\nfrom webai import *\n\npic = webai.snapshot()\nwebai.show(img=pic)\n~~~\n\n![](../assets/images/upload_f733579dd18caea93542ce6b2d672d00.png)\n\n## 屏幕 LCD 显示\n\n![](../assets/images/upload_9a95715444776fa01a7afcef8c36b4d5.png)\n\n### 示例：显示文字\n\n- 程序内容：输入指定的文字、位置、样式，并显示在 LCD 屏幕上。\n\n- ==lcd.draw_string( x 座标 , y 座标 , \" 文字 \" , 文字颜色 , 背景颜色 )==\n\n~~~python=\nfrom webai import *\n\nwebai.draw_string(30,10,\"测试 OK\",scale=2)\n~~~\n\n![](../assets/images/upload_a8feb305b558a728a5191fc20c98ab12.png)\n\n\n### 示例：画线\n\n- 程序内容：设定线段的 2 个端点位置、颜色、宽度，绘制在 LCD 屏幕上。也可同时绘制多条线段。\n\n- ==img.draw_line( x 座标 , y 座标 , x 座标 , y 座标 , 颜色 , 线段宽度 )==\n\n~~~python=\nfrom webai import *\n\nwebai.img = image.Image()\nwebai.img.draw_line(10,150,310,150,color=lcd.RED,thickness=20)\nwebai.show(img=webai.img)\n~~~\n\n![](../assets/images/upload_bd152fa8f05d75d8a0404446c60be2af.png)\n\n## 按钮\n\n### 示例：按钮控制\n\n- 程序内容：按 L 按钮显示 A，按 R 按钮显示 B。\n\n- ==webai.draw_string( x 座标 , y 座标 , \" 英文数字 \", 文字缩放 )==\n\n~~~python=\nfrom webai import *\n# state=1:click_down , state=2:click_up , state=3:long_press\ndef click(name,state):\n    webai.img.clear()\n    if name == 'btnL' and state == 1:\n        webai.draw_string(60, 100, \"A\", scale=4)\n    if name == 'btnR' and state == 1:\n        webai.draw_string(280, 100, \"B\", scale=4)\n\nwebai.img = image.Image()\nwebai.addBtnListener(click)\n~~~\n\n![LR按钮](../assets/images/upload_1ebffb83a09532397e2dd8f9092721f2.png)\n\n### 示例：按钮控制 - 监听所有按钮事件\n\n按键事件总共有 7 种事件\n\nL(左键): name=='btnL' , state==1:按下 , state==2:放开 , state==3:长按超过2秒\nR(右键): name=='btnR' , state==1:按下 , state==2:放开 , state==3:长按超过2秒\nL + R : state == 4 (左右按键一起按)\n~~~python=\nfrom webai import *\n# state=1:click_down , state=2:click_up , state=3:long_press\ndef click(name,state):\n    webai.img.clear()\n    # 按下左键\n    if name == 'btnL' and state == 1:\n        webai.draw_string(60, 100, \"A\", scale=4)\n    # 放开左键\n    if name == 'btnL' and state == 2:\n        webai.draw_string(60, 100, \" \", scale=4)\n    # 长按左键超过2秒\n    if name == 'btnL' and state == 3:\n        webai.draw_string(50, 100, \"A!\", scale=4)\n\n    # 按下右键\n    if name == 'btnR' and state == 1:\n        webai.draw_string(220, 100, \"B \", scale=4)\n    # 按下右键\n    if name == 'btnR' and state == 2:\n        webai.draw_string(220, 100, \" \", scale=4)\n    # 长按右键超过2秒\n    if name == 'btnR' and state == 3:\n        webai.draw_string(210, 100, \"B!\", scale=4)\n        \n    # 左键+右键一起按\n    if state == 4:\n        webai.draw_string(50, 100, \"A + B\", scale=4)\n        \nwebai.img = image.Image()\nwebai.addBtnListener(click)\n~~~\n\n\n### 示例：按钮拍照显示照片\n\n- 示例程序：\n    1. 按下 L 按钮进行拍照并写入文件 \n    2. 长按 R 按钮将照片显示在 LCD 屏幕上\n    3. 再按一下 R 按钮恢复拍摄模式\n\n~~~python=\nfrom webai import *\n\ndef click(name,state):\n    global show\n    if name == 'btnL' and state == 2:\n        webai.img = webai.snapshot()\n        webai.img.save('myImg.jpg')\n        print(\"save OK\")\n    if name == 'btnR' and state == 1:        \n        show = False\n    if name == 'btnR' and state == 3:\n        show = True\n        webai.show(file = 'myImg.jpg')\n\nshow = False\nwebai.addBtnListener(click)\nwhile True:\n    if not show:\n        webai.img = webai.snapshot()\n        webai.show(img = webai.img)\n~~~\n\n![](../assets/images/upload_12a14b46fe9eede0762043451dc8dead.png)\n\n## 脚位控制\n\n### 示例：读取脚位的模拟量\n\n![](../assets/images/upload_1bf8dec7eceade62de536f34c0b58f74.png)\n\n- 读取 pin4 模拟量信号，数值介于 0~1023 ，电压是 0~1V。\n\n- 程序内容：用手触碰引脚 ( pin4 )，就可以看到屏幕显示数值上升到 1023。\n\n![](../assets/images/upload_3bdfbbf6eeae5225db112f9998e95362.png)\n\n~~~python=\nfrom webai import *\nwhile True:\n    val = webai.adc()\n    img = image.Image()\n    img.draw_string(120, 100, str(val), scale=4)\n    lcd.display(img)\n    time.sleep(0.1)\n    lcd.clear()\n~~~\n\n## 外接扬声器、T-Flash存储卡\n\n### 使用扬声器播放音频文件\n\n![](../assets/images/upload_6e7808c81c364f6a2f5900f878fa8347.png)\n\n- 程序内容：播放 wav 格式的音频文件。\n\n~~~python=\nfrom webai import *\nwebai.speaker.setVolume(100)\nwebai.speaker.play(filename='logo.wav',sample_rate=11025)\n~~~\n\n## Wi-Fi 设定\n\n### 设定开发板连线 Wi-Fi\n\n- 程序内容：通过 Wi-Fi 连上网络，如果试了三次都连不上，就显示异常。\n    - 第二行：设定 Wi-Fi 的 SSID 和 PWD\n    - 第六行：储存 Wi-Fi 设定\n    - 第七行：开发板重开机\n\n~~~python=\nfrom webai import *\nwifi = {\n'ssid':'webduino.io',\n'pwd':'webduino'\n}\nwebai.cfg.put('wifi', wifi)\nwebai.reset()\n~~~\n\n## MQTT\n\n> 建议使用 Webduino 提供的程序库，比较方便使用。\n\n### MQTT 订阅资料\n\n- 程序内容：订阅频道 \" subTest \"。\n    - 第三行：在屏幕上显示广播讯息\n\n可通过Web:Bit示例程序发布讯息进行测试。\nhttps://webbit.webduino.io/blockly/?demo=default#7qZr95m27k8qO\n~~~python=\nfrom webai import *\ndef msg(topic, msg):\n    webai.lcd.clear()\n    webai.draw_string(130, 100, \"%s\"%msg, scale=2, x_spacing=10)\nwebai.mqtt.sub('subTest', msg)\n~~~\n\n### MQTT 发行资料\n\n- 程序内容：向频道 \" subTest \" 传送 \" Hello Web:AI \"。\n    - 第一行：完成 MQTT 连线\n    - 第二行：传送一份资料\n\n~~~python=\nfrom webai import *\nwebai.mqtt.pub('subTest','Hello Web:AI')\n~~~\n\n\n## 下载文件(模型文件、SPIFFS..等) 烧录到指定的 flash address\n\n下面这示例程序是更新webAI文件系统。\n~~~python=\nurl = 'http://share.webduino.io/storage/download/0605_143342.696_m_0x400000_maixpy_spiffs.img'\nwebai.cloud.download(url,address=0x400000,redirect=False,showProgress=True)\n~~~\n## 通过 UART 和 Arduino通信\n\nArduino 可以通过 UART 和 Web:AI 连线传送资料，下面程序示例是让 ESP8266 传送字符给 Web:AI 进行显示。\n\n<iframe src=\"https://www.youtube.com/embed/c9VH46zGpps\" allowfullscreen width=\"100%\" style=\"aspect-ratio:728/410;border:none \" ></iframe>\n\n~~~python=\nfrom machine import UART\nimport sensor, image, time, lcd\nfrom fpioa_manager import fm\nfrom Maix import GPIO\n\n\nfm.register(24, fm.fpioa.UART1_TX, force=True)\nfm.register(25, fm.fpioa.UART1_RX, force=True)\nuart = UART(UART.UART1, 57600, timeout=5000,read_buf_len=2048)\nlcd.init()\nimg = image.Image()\nimg.draw_string(100,100,'Go',scale=3)\nlcd.display(img)\nwhile True:\n    while uart.any():\n        myLine = uart.readline()\n        img.draw_string(100,100,myLine,scale=3)\n        lcd.display(img)\n        img.clear()\n~~~\n\nArduino\n~~~c=\nvoid setup() {\n  Serial.begin(57600);\n  pinMode(15, OUTPUT);\n}\n\nvoid loop() {\n  Serial.println('A');\n  digitalWrite(15, HIGH);\n  delay(500);\n  Serial.println('B');\n  digitalWrite(15, LOW);\n  delay(500);\n}"}, "/WebAI/zh/Programming/Introduction.html": {"title": "图形编程平台介绍", "content": "# 图形编程平台介绍\n\nWeb:AI图形编程分成网页版和安装版两种，可通过Wi-Fi和USB进行控制，使用上功能几乎相同，可以选择符合自己需求的版本作使用。\n\n![](../assets/images/upload_32ec1f0da0cbb09fdf25b6e3e78da96d.png)\n\n关于**网页版**与**安装版**的区别，欢迎参考以下介绍：\n\n## 网页版\n\n网页版不需要安装任何软件，只要电脑有连接上网络，通过浏览器打开就能使用，不论是Windows或Mac都能运作，适合快速体验的使用者。\n\n#### -网页版链接：[Web:AI图形编程](https://ai-blockly.webduino.io)\n\n### 分享功能(网页版专属)\n\n「分享」功能可以快速存盘产生一段「网址」，下次再开启这个网址就可以开启此项目。因为安装版无法开启网址，所以无法使用该选项。\n\n![](../assets/images/upload_ee1785fa20430a92283f1c84dc497e16.png)\n\n>网页版限定Google Chrome浏览器，目前**不支持USB联机**控制!\n\n## 安装版\n\n安装版可以在没有网络的环境下使用，下载后运行，将Web:AI开发板通过USB连接即可使用。\n\n#### -安装版连接：[Web:AI安装版](https://drive.google.com/file/d/1m4qGyWGae-2yytYrSorrJKaP-XBBarHR/view)\n\n>安装版目前仅限定在**Windows系统**使用。\n\n## 界面\n\n### 基本功能\n\nWeb:AI图形编程平台的操作界面分成下列几个功能区：\n\n- **积木编辑区**：所有图形编程的组装、编辑都会在这个区域内执行。\n\n- **积木清单**：包含基本功能、进阶功能、Web:AI开发板操控和扩充功能积木。\n\n- **主功能菜单**：包含各种常用功能以及程序的下载。\n\n-文件：开启、储存json文件，以及将积木做成网址储存分享。\n\n-示例：多种现成的积木示例，可以直接打开使用。\n\n-扩充：具有特殊功能的积木，可以将积木加入使用。\n\n-教学：前往教学手册。\n\n-清空：将积木编辑区的积木全部清除。\n\n-更多：包含Wi-Fi设定、网页互动区、进入商城、下载安装版、切换语言。\n\n-执行：将积木编辑区做好的积木下载至Web:AI开发板中。\n\n- **积木/代码切换**：将写好的程序转换为python代码，让学习程序更简单。\n\n- **功能按钮**：够快速缩放画面或删除积木。\n\n![](../assets/images/upload_5502fb59e0b0bcc9151d0f959a55d6d6.png)\n\n## 积木介绍\n\n「积木」是翻译自「block」这个英文单字，其操作方式类似「组装积木」或「拼图」的概念。通过互相堆叠和搭配组合，就能判断不同程序的逻辑或依据指定的排列顺序，实现对应的程序功能。\n\n![](../assets/images/upload_07aa0c945738c4f6a0ae6f1af56a5595.gif)\n\n### 编辑积木\n\n使用鼠标在指定的积木上按**右键**，就能开启积木的功能列表，功能如下：\n\n-复制：复制这块积木。\n\n-加入注释：如同程序的注释功能，替这块积木加入注释。\n\n-外部输入/单行输入：切换积木的样式。(不影响程序执行)\n\n-收合积木/展开积木：当积木编辑区有太多积木时，可以将积木收合，减少画面中的积木数量。\n\n-删除积木：删除这块积木。\n\n-教学：查看积木的教学说明。\n\n-小工具：特定积木需要配合小工具以作进阶功能使用，点击后可以打开。\n\n![](../assets/images/upload_f62c60356d347ec7e2fea40fd2221711.png)\n\n## 开始执行第一支程序\n\n1.首先从左侧的**积木清单**中找到「Web:AI」，下方有「开发板」。\n\n![](../assets/images/upload_c6db40883fdb05fc429f4f58a8ab57bf.jpg)\n\n2.点击「开发板」，可以看到「开发板」积木，将积木拉出。\n\n![](../assets/images/upload_c406c25ec8b794c4c21fddf2963b2636.gif)\n\n3.在「开发板」积木中输入当前所要使用的开发板Device ID。\n\n![](../assets/images/upload_5e9768158864380f4612cc2516820864.jpg)\n\n>关于开发板的Device ID，欢迎参考：[初始化设定 ( 第一次使用请看这里 )](https://bpi-steam.com/WebAI/zh/Unboxing/Initialization.html)。\n\n4.从左侧的**积木清单**中找到「Web:AI」，点击下方的「LCD屏幕」。\n\n![](../assets/images/upload_e45ca69a09bec6a69a1fc9d03b7d48c0.jpg)\n\n5.拉出「LCD显示文字」积木，放进「开发板」积木内。\n\n![](../assets/images/upload_89b92fd79b17976d89e90eb32ed9817e.gif)\n\n6.按下右上角「执行」，即可将程序下载到Web:AI中。\n\n![](../assets/images/upload_66cfe68177b328caefa52b71c4b055ca.jpg)\n\n7.当下载成功后，可以看到Web:AI开发板的LCD屏幕显示「Hello World」。\n\n![](../assets/images/upload_509900dc9341e45fa477c4dbbf2ed5fd.png)\n\n8.成功执行第一支程序后，就可以开始体验后续的更多更强大的Web:AI程序了!"}, "/WebAI/zh/Programming/WebAI/Button.html": {"title": "按钮开关", "content": "# 按钮开关\n\n「按钮开关」积木可以感应 **按下**、**放开** 两种按钮操作，通过接收按钮开关的动作，触发后续的行为。\n\n![](../../assets/images/upload_4fa2ff8031a7174c2b0c0526c33576f5.png)\n\n### 示例：用按钮公布解答\n\n1. 先用「LCD 显示文字」积木输入数学问题「192+358=?」。\n2. 用「变数」积木设定为解答。\n3. 设定当 L 按钮被按下时，清除 LCD 画面，并显示解答 ( 变数 x )。\n4. 设定当 L 按钮被放开时，清除 LCD 画面，并显示数学问题「192+358=?」。\n5. 执行后，可以使用 L 按钮不断切换问题与答案。\n\n![](../../assets/images/upload_8c3be197b908850ecc8f30da9a66833e.gif)\n\n## 取得按钮状态\n\n按下或放开按钮时，会传送对应的指令到开发板中，使用「取得按钮状态」积木可以显示接收到的按钮状态，并以 1 和 0 的方式表示。\n\n>- 按下：0\n>- 放开：1\n\n![](../../assets/images/upload_ccdcc76aa827e0be9153cff2793e38b4.png)"}, "/WebAI/zh/Programming/WebAI/LCD.html": {"title": "LCD 屏幕", "content": "# LCD 屏幕\n\nWeb:AI 内建一块 2.3 吋 LCD 屏幕，可以使用积木配合传感器、控制器、按钮开关等物联网相关硬体设备，将执行的结果显示在屏幕上，达成各种跨领域应用。\n\n## LCD 显示文字\n\n「LCD 显示文字」积木能够让 Web:AI 的屏幕上显示指定的英文字、数字，更可以搭配其它积木的互动，让程序执行结果展示在 LCD 屏幕上。\n\n![](../../assets/images/upload_64ba9c874d571b6d92c59695fcd7fc98.png)\n\n## LCD 画文字\n\n「LCD 画文字」积木是将 Web:AI 的屏幕以画布的方式画上指定的文字，更可以通过积木组合，让文字显示在图片上面。\n\n![](../../assets/images/upload_0da89bf996dae9e03a2713330e99f77a.png)\n\n> 因为「LCD 画文字」积木在程序逻辑是将屏幕设定一张画布，所以如下方的积木会让「LCD 显示文字」积木的「ABCDE」被覆盖。\n>\n> ![](../../assets/images/upload_164ff827c96864577c04d5aaf57fefce.png)\n\n## 清除 LCD 画面\n\n「清除 LCD 画面」积木可以将 LCD 画面原本的显示的任何文字或执行结果清除，方便继续执行后续步骤。\n\n![](../../assets/images/upload_b284d9517e9c6fa43936cf0411e05823.png)\n\n### 示例：3 秒后清除 LCD 画面\n\n1. 使用「LCD 显示文字」积木让 LCD 屏幕显示 Hello World。\n2. 下方放入「等待」积木设定 3 秒，并加入「清除 LCD 画面」积木。\n3. 按下执行，可以看到屏幕显示 **Hello World**，等待 3 秒之后，屏幕画面中的文字消失。\n\n![](../../assets/images/upload_fcd60076a7eb25a9cdb1a61aee3c9b01.gif)\n\n## LCD 画直线\n\n「LCD 画直线」积木可以同时在屏幕中画出 **多条** 直线，并可以设定线段的起点、终点、颜色、线粗、箭头。\n\n> 箭头的端点位在终点位置。\n\n![](../../assets/images/upload_12efd2968130e3ba9a19c835af690a0a.png)\n\n### 示例：画出紫色箭头\n\n1. 使用「LCD 画直线」积木，设定起点、终点的 x、y 位置、颜色、线粗，箭头选择「显示」。\n2. 按下执行，可以看到 LCD 屏幕显示紫色箭头线段。\n\n![](../../assets/images/upload_74c3d2ea383065a440e09677a03d1ee3.png)\n\n## LCD 画圆\n\n「LCD 画直线」积木可以同时在屏幕中画出 **多个** 圆形，并可以设定圆形的位置、半径、颜色、线粗、是否填满。\n\n![](../../assets/images/upload_cf596f58390915dfe8eef9515e142567.png)\n\n### 示例：画一张脸\n\n1. 如下方程序示例，使用「LCD 画圆」积木设定座标、半径及是否填满，做出眼睛和鼻子。\n2. 使用「LCD 画直线」积木做出嘴巴。\n3. 按下执行，可以看到完成一张脸在 LCD 屏幕上。\n\n![](../../assets/images/upload_7c0d98b094d1722a2e2dabbb5443b8e1.png)\n\n## LCD 画矩形\n\n「LCD 画直线」积木可以同时在屏幕中画出 **多个** 矩形，并可以设定矩形的位置、宽高、颜色、线粗、是否填满。\n\n> 矩形的起点 x、y 是依据矩形左上角的座标而定。\n\n![](../../assets/images/upload_9e1a4f1e2acc28236b862cf6eabe8aa1.png)\n\n## LCD 显示图片\n\n「LCD 显示图片」积木可以让 LCD 屏幕显示出拍摄的图片，或是存放在 Web:AI 开发板中的图片。\n\n![](../../assets/images/upload_b2a3c9fe65109efb72b278e87e430268.png)\n\n### 开发板预设的图片：\n- logo：Webduino Logo\n- m01：笑脸\n- m02：闭眼\n- mleft：向左看\n- mright：向右看\n- mrun：>o<\n- red：红色小怪兽\n- blue：蓝色小怪兽\n- yellow：黄色小怪兽\n- green：绿色小怪兽\n\n### 示例：照相画面\n\n1. 使用「LCD 显示图片」积木，里面放入「拍摄图片」积木。\n2. 因为这样的程序设计只能显示一次固定的画面，因此需要让程序不断执行。\n3. 在最外层放入「无限循环」积木。\n4. 按下执行，可以看到开发板开启照相镜头功能，显示镜头拍摄的画面。\n\n![](../../assets/images/upload_0c373ab6bb919c3edab14ac253040cfb.png)\n\n> 关于照相画面的更多应用变化，可以参考：[照相画面](https://bpi-steam.com/WebAI/zh/Programming/WebAI/LCD.html#%E7%85%A7%E7%9B%B8%E7%94%BB%E9%9D%A2)。\n\n### 示例：改变表情\n\n1. 使用「建立数组」积木放入各种图片名称。\n2. 在外层使用「取出数组元素并执行」积木，让程序会根据数组中的元素逐项执行。\n\n![](../../assets/images/upload_769a6e525a60cfcecd6c1d65f9db08bc.png)\n\n3. 放入「LCD 显示图片」积木，显示图片、图片名为「变量 i」\n4. 让表情每 1 秒改变一次，因此放入「等待 1 秒」积木。\n5. 目前的程序执行到最后一个项目就会停止，并不会永久重复，所以在最外层放入「无限循环」积木。\n6. 按下执行，可以看到屏幕不断变换表情。\n\n![](../../assets/images/upload_6defc8fd16ac282a5e78d8b819acfbf4.gif)\n\n## 照相画面\n\n「拍摄照片」积木可以使用镜头拍摄一次画面，配合「无限循环」积木就可以达成相机取景器的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「变量」积木替拍摄照片命名，通过命名来做出更多变化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上两种积木组合方式执行后会达到相同的结果，差别在于若是要做出更多应用变化，就需要搭配「变量」积木的命名。\n\n## LCD 画图片\n\n「LCD 画图片」积木内建了各种使用积木画出的示例图案，可以直接选用并直接显示在屏幕上，不需要使用大量积木来画出。\n\n![](../../assets/images/upload_a8300664a8a7d9ac27bb311655b7808a.jpg)\n\n### 示例：画出人脸\n\n1. 放入「LCD 画图片」积木，选单选择人脸。\n2. 按下执行，可以看到屏幕显示人脸。\n\n![](../../assets/images/upload_0d0ca1959cb45161c1fc85278563f219.png)"}, "/WebAI/zh/Programming/WebAI/Board.html": {"title": "开发板", "content": "# 开发板\n\nWeb:AI 提供了两种控制开发板的方式，分别是 **USB** 和 **Wi-Fi**，通过这两种不同操控方式的互相搭配，不论各种情境都能随心所欲的控制。\n\n- USB：可以在没有网络的情况下，通过 USB 连线操控。\n- Wi-Fi：可以进行无线远端遥控。\n\n![](../../assets/images/upload_aa2f2afd7ec1b7287a44bdb6bd877b0b.jpg)\n\n## 使用方式\n\n### 输入 Device ID\n\n每块开发板都会有各自的Device ID，[图形编程平台](https://ai-blockly.webduino.io/#/) 及[影像训练平台](https://vision.webduino.io/)都是藉由Device ID 来进行控制。\n\n当开发板完成固件更新后，重新开机就会看到一组 Device ID，将这组 Device ID 填入开发板积木中\n\n![](../../assets/images/upload_a37bf088a59ae14a3639fa19bbe83548.png)\n\n### 放入积木并执行\n\n先拿一块积木作为测试，从左侧积木栏位中点击「LCD 屏幕」，抓取「LCD 显示图片」积木放入「开发板」积木中。\n\n![](../../assets/images/upload_f2a4ecff047bbb8fd316146882dace08.png)\n\n组合如下图，按下右上角「执行」，即可在屏幕上看到「Webduino」。\n\n![](../../assets/images/upload_76d6626876e21dddf2c1a45a9bf4d4ca.png)"}, "/WebAI/zh/Programming/WebAI/Mic.html": {"title": "麦克风", "content": "# 麦克风\n\nWeb:AI 开发板内建了麦克风，藉由麦克风录音将音频录制到 SD 卡中，做出各种和声音有关的物联网应用。\n\n![](../../assets/images/upload_94de51447f2033b2800a8c4fb3b8077c.png)\n\n## 录音\n\n「录音」积木可以将麦克风录制到的声音录下，储存到T-Flash存储卡中。\n\n> 因为开发板的存储器容量有限，因此使用录音积木前需要搭配T-Flash存储卡作使用。\n\n![](../../assets/images/upload_2f079962f761ffd4ad00b39770201da9.jpg)\n\n### 范例：录音并播放\n\n1. 使用「录音」积木，在前后放入「LCD 画文字」积木，完成录音程序。\n\n    ![](../../assets/images/upload_52cba37624dc005f27ceced42242a169.jpg)\n\n2. 放入「等待」积木、「LCD 画文字」积木、「扬声器播放」积木，即可在录音完后播放音频文件。\n\n    ![](../../assets/images/upload_76c6b2ec27ef2c32bd0739e3b1b3614a.jpg)\n\n3. 完成后按下执行，即可录音并播放声音。"}, "/WebAI/zh/Programming/WebAI/IO.html": {"title": "I/O 引脚", "content": "# I/O 引脚\n\n在 Web:AI 开发板边缘有一排有 25 个金属接触点，这些金属接触点称为「引脚」，或通俗一点也可称呼「金手指」。引脚包含了 5 个标注 0、1、2、3V 和 GND 的大引脚，以及其他 20 个未标示号码的小引脚。\n除了可以使用鳄鱼夹操作大引脚，也可以使用扩充板搭配杜邦线操作小引脚，通过引脚的搭配，就能灵活的操作各种外接元件与传感器。\n\n## I/O 引脚对照表\n\n有关 Web:AI 开发板的脚位规格，可以参考以下的对照表。\n\n- P0 ~ P20：信号脚位，负责输入输出信号\n- 3V3：供电 3.3V\n- GND：电路接地 ( 电压 0V )\n\n![](../../assets/images/upload_86f5831686be2d9682c479ea7d912837.png)\n\n## 读取信号 ( 数字输入 )\n\n使用「读取数值」积木，读取到的数值为数位信号，会有 1 和 0 两种数值，\n\n- 输入电压 > 0V：数字信号值为 1\n- 输入电压 = 0V：数字信号值为 0\n- 完全没有接传感器或电组：数字信号值为 1 \n\n> 因为预设只会读取一次信号，所以要不断读取脚位信号的话，需要搭配 **「无限循环」积木**。\n\n![](../../assets/images/upload_1fcd592f0ffdcd32783aa60237ff6384.png)\n\n### 范例：读取脚位输入信号\n\n1. 使用杜邦线、面包板、电阻完成接线图。 ( 电阻的一端接 GND、一端接 3V3 )\n2. 使用「LCD 显示文字」积木让屏幕显示读取数值，这样可以读取 1 次输入信号。\n3. 为了能让脚位不断读取信号，加入「无限循环」积木，让屏幕可以随时显示改变的信号数值。\n4. 按下执行后，改变信号脚位读取的电路位置，可以看到屏幕的数字信号改变。\n\n![](../../assets/images/upload_09689bd3be1d7032daed8f3a2bdbe2a4.png)\n\n## 输出信号 ( 数字输出 )\n\n输出信号的积木分成两种 ( 数字输出 0,1 相当于 PWM输出占空比0%，100% )：\n\n- 数字输出：输出 **0** 或 **1**\n- PWM 输出：输出占空比 **0～100%**\n\n\n使用不同的输出方式，可以适合在不同的场合，做出各种应用变化。\n\n### 输出信号 ( 数字输出 )\n\n通过积木控制，从指定脚位传递出 0 或 1 的信号。\n\n1. 使用 LED 灯为例，LED 灯的一端接地、一端接信号脚，完成接线。\n2. 使用「数字输出」积木，输出至指定的脚位，选择输出 1。\n3. 按下执行，可以看到 LED 灯亮起。\n\n> 如果输出信号选择 0，代表脚位电压为 0V，因此 LED 灯的两端皆为 0V，LED 灯不会亮起。\n\n![](../../assets/images/upload_96bd7f4e31094faf2d4151eb2e0c1627.png)\n\n![](../../assets/images/upload_d7de82173645e4affcd2826bd48480ef.png)\n\n### 输出信号 ( PWM输出 )\n\n通过积木控制，从指定脚位传递出占空比 0～100% 的PWM信号。\n\n![](../../assets/images/upload_a3a07800c41fb4cd3ef4f83cb813c8ca.png)\n\n1. 使用 LED 灯为例，LED 灯的一端接地、一端接信号脚，完成接线。\n2. 使用「PWM输出」积木，输出至指定的脚位，选择输出 30。\n3. 按下执行，可以看到 LED 灯微亮，亮度明显低于输出100时的亮度。\n\n![](../../assets/images/upload_d7de82173645e4affcd2826bd48480ef.png)"}, "/WebAI/zh/Programming/Expand/Speaker.html": {"title": "扬声器", "content": "# 扬声器\n\nWeb:AI 开发板能够搭配外接扬声器及 T-Flash存储卡，将指定的音频文件播放出来，并且藉由编辑各类积木程序控制触发条件和音量，达成在任何情境下的声音互动。\n\n## 扬声器播放\n\n「播放」积木代表执行播放的动作，输入指定的名称，就可以播放 T-Flash存储卡内的 wav 文件。\n\n> 「播放」积木的音频文件支持格式为 **.wav**。\n\n![](../../assets/images/upload_877afa4b024423a0363351f8c31296fe.png)\n\n## 播放音量\n\n「音量」积木可以控制播放的音量，音量大小为 0~100，预设值为 5。因为程序是顺序执行，所以「音量」积木必须放在「播放」积木之前。\n\n> 请先设定音量，再播放音频文件。\n\n![](../../assets/images/upload_70c34d4ff54a405fad332e898178bddf.png)\n\n### 示例：按钮播放音乐\n\n1. 将存放音频文件的 T-Flash存储卡插入 Web:AI 开发板中，并接上扬声器。\n\n![](../../assets/images/upload_d7d9cbd3157d999f5745179adda3016b.png)\n\n3. 设定「播放」积木内要播放的音频文件名称，示例中使用 logo 这个内建音频文件。\n4. 放入「音量」积木设定要播放的音量。\n5. 在最外层加上「按钮」积木，让开发板能够用按钮播放音乐。\n6. 执行后，按下 L 按钮，可以听到扬声器放出音乐。\n\n![](../../assets/images/upload_c056e3869240b47d896b85e6e9e633ac.png)\n\n![](../../assets/images/upload_eaa4c8056d7ddfb2baed6c24810c3c48.gif)"}, "/WebAI/zh/Programming/Expand/Servo.html": {"title": "舵机", "content": "# 舵机\n\n舵机会依照指示命令动作，由程式控制舵机的旋转角度，舵机就会转几度，搭配各种不同的齿轮组合，就能实际应用在玩具、模型屋、机械夹臂...等应用，实现许多有趣好玩的创意与想法。\n\n## 舵机 接线图\n\n将舵机的橘色线 ( 信号线 ) 接在扩充板的 1 号脚，红色线接到 3.3V，棕色线接到 GND。\n\n> 注意，因 Web:Bit 扩充板输出电压为 3.3V，请确认舵机为支持 3.3V 的型号。\n\n![](../../assets/images/upload_e83df9d09c4ef68c56adb73e4040cd9d.png)\n\n## 控制旋转角度\n\n使用「按钮开关」的积木，设定：\n\n- 按下 L 按钮：舵机旋转至 180 度\n- 按下 R 按钮：舵机旋转至 0 度\n\n程序执行后，就可以通过 L、R 按钮控制舵机。\n\n![](../../assets/images/upload_100bc9a33d09c55aaf369f0179b0e7fa.png)\n\n![](../../assets/images/upload_4a2408255814d5eee6d0a2ad6b8469f5.gif)"}, "/WebAI/zh/Programming/Expand/MQTT.html": {"title": "网络广播", "content": "# 网络广播\n\nWeb:AI 的网络广播功能，不仅能让 Web:AI 与 Web:AI 开发板彼此信息互动，更可以和 Webduino 的其它平台之间连动。实现一对多、多对一、虚实互动、远距广播...等多样化的操控情境，通过广播功能的实现，便能将物联网的应用发挥到极致。\n\n\n## 发送广播讯息\n\n「发送广播讯息」积木可以指定一个频道名称，并对这个频道发送讯息文字，只要频道名称相同，所有在该频道上的装置都能收到广播讯息。不论是实体装置、虚拟装置、没有开发板的程序...等，都能够向指定频道发送广播讯息。\n\n> 执行程序时遇到「发送广播讯息」积木会暂停，直到发送广播讯息后才会再继续。\n\n![](../../assets/images/upload_c88532e5120c700bfcf05e60f04c99b1.png)\n\n### 示例：向 Web:Bit 教育版发送讯息\n\n1. 使用「发送广播讯息」积木，设定向「channel」频道传送讯息「Hello!」，按下执行。\n\n   ![](../../assets/images/upload_8650137f8c6e3a009d5ce1653ebdac9d.png)\n\n2. 开启 [Web:Bit 教育版](https://webbit.webduino.io/blockly)\n3. 放入「接收广播讯息」积木，设定从频道「channel」接收广播讯息。\n4. 放入「绿色怪兽说话」积木让舞台中的小怪兽说出广播讯息。\n5. 按下执行，可以看到小怪兽舞台的小怪兽说出来自 Web:AI 发送的讯息。\n\n>- Web:Bit 教育版的网络广播积木位在 **扩充功能 > 网络广播**。\n>- Web:Bit 教育版的小怪兽说话积木位在 **进阶功能 > 怪兽控制**。\n\n![](../../assets/images/upload_09e5eb963c47a4f78acb13c615351799.png)\n\n## 接收广播讯息\n\n「接收广播讯息」积木可以指定一个频道名称，不断收听这个频道的变化，并通过广播讯息的积木显示。接收广播讯息不限制只有实体装置能接收，不论是实体装置、虚拟装置、没有开发板的程序...等，都能够接收指定频道的讯息。\n\n> 「接收广播讯息」积木不需要放在循环积木内，就会自行不断收听频道讯息。\n\n![](../../assets/images/upload_3866a2c19e7bf44bb6226584cd4503c9.png)\n\n### 示例：接受来自 Web:Bit 教育版的讯息\n\n1. 开启 [Web:Bit 教育版](https://webbit.webduino.io/blockly)\n2. 使用「发送广播讯息」积木，设定向「channel」频道传送讯息「Hello!」，按下执行。\n\n   ![](../../assets/images/upload_77702faa143913ce68f8d197e0a82b12.png)\n\n3. 打开 Web:AI 程序积木平台。\n4. 使用「接收广播讯息」积木，设定从「channel」接收广播讯息。\n5. 放入「LCD 显示文字」积木显示「收到的广播讯息」。\n6. 按下执行，可以看到 Web:AI 开发板屏幕显示广播讯息「Hello!」\n\n   ![](../../assets/images/upload_9ec090d270752bd264fa827568388471.png)"}, "/WebAI/zh/Programming/Basic/Loops.html": {"title": "循环", "content": "# 循环\n\n在程序领域里，循环(循环)是常常使用的基本功能，能够控制循环执行的过程，也可以将需要循环执行的代码放在循环内，就能指定次数、延迟时间，或是无穷尽的执行。\n\n## 等待\n\n「等待」积木可以让程序暂停一段时间，当程序积木执行到「等待」积木，就会等待指定的时间过后才会进行接续的动作。\n\n![](../../assets/images/upload_14051453cdcb767d80b160b5ad1b10b6.png)\n\n### 示例：文字闪烁\n\n下方的示例让Web:AI的屏幕中的文字每秒颜色闪烁。\n\n![](../../assets/images/upload_48343e9596b015ec712d86a3cf15a0db.gif)\n\n## 循环(循环几次、无限循环次)\n\n「循环」积木分为「循环几次」积木及「无限循环次」积木，功能分别如下：\n\n-「循环几次」积木：指定循环内的积木程序循环的次数，预设次数为10次。\n\n-「无限循环次」积木：无止尽的执行循环内容，除非使用「中断循环」积木，循环的事件才会停止。\n\n![](../../assets/images/upload_acc38cc8518f6a375cdfba2208b5a3d1.png)\n\n### 示例：文字闪烁10次\n\n1.以相同的文字颜色闪烁为例，将「无限循环」积木替换成「循环10次」积木，按下执行，可以看到Web:AI屏幕显示Webduino文字颜色闪烁。\n\n2.当执行完第10次后，会停止执行程序，Webduino的文字颜色停留在红色不再改变。\n\n![](../../assets/images/upload_263b347ab87292fd9a6dde4c4f08d4c4.png)\n\n## 判断为真，就循环无限次\n\n「判断为真，就循环无限次」积木等同于「循环无限次」积木加上「逻辑」判断，只要空格内的逻辑判断为「真」(true)，就会开始进行无限循环。\n\n![](../../assets/images/upload_67d738e94f23852ac2a2d983b2dc07aa.png)\n\n### 示例：随机取数，是偶数就停止\n\n1.设定一变量「number」为1~100随机数字，如果number是偶数时，就循环后续动作无限次。\n\n![](../../assets/images/upload_b2765fc857de3a37590e42d42b723222.png)\n\n2.完成积木后按下执行，可以在Web:AI屏幕看到number的取得的数值。\n\n-如果number为奇数，屏幕显示白色数字\n\n-如果number为偶数，屏幕显示数字颜色不断闪烁。\n\n![](../../assets/images/upload_ddbde1a3a7c675073e1bfd80a36f492d.png)\n\n## 计数\n\n「计数」积木类似「循环执行几次」积木，差别在于计数积木使用了一个变量(i)，通过改变这个变量的数值，来决定循环几次、如何循环以及循环的间隔。\n\n>以预设的「计数」积木为例，「变量i」的数值会由1，2，3，…，10的方式改变。\n\n![](../../assets/images/upload_8d06b1db227a0a01349f10e31d233aff.png)\n\n### 示例：依序显示1，2，3，……，10\n\n在「LCD显示文字」积木内放入「变量i」积木，让Web:AI屏幕显示i的数值，并且设定「等待1秒」，按下执行，可以看到屏幕显示1，2，3，…，10。\n\n![](../../assets/images/upload_d5d81e32c4195fc8c5c3750af633b00a.gif)\n\n## 取出数组元素并执行\n\n「取出数组元素并执行」积木是以数组长度作为循环次数的依据，因此空格内必须放入数组积木，执行后就会依序取出数组内容并执行对应动作。\n\n![](../../assets/images/upload_b4b8436236ed918a0f343c316de11985.png)\n\n### 示例：依序显示A B C\n\n使用「数组」积木建立列表，放入「文字」积木A、B、C，「变量i」代表列表中的每一个项目，设定让LCD显示「变量i」，按下执行，就可以看到Web:Bit屏幕依序显示A、B、C。\n\n![](../../assets/images/upload_5725ac932f2eedf1774358b8a16fb75d.gif)\n\n## 停止这个循环\n\n在循环的过程中，可以使用「停止这个循环」积木来终止目前的循环。\n\n![](../../assets/images/upload_2d3eaf4cf2ec60ff58993948eeca005d.png)\n\n### 示例：数到20就停止\n\n下方示例是Web:AI屏幕显示从1数到50，当「变量i」= 20时会停止循环，所以屏幕上的数字会停在20。\n\n![](../../assets/images/upload_41ad4328cc597d1ca61cfda7aab53e35.png)"}, "/WebAI/zh/Programming/Basic/Math.html": {"title": "数学式", "content": "# 数学式\n\n数学积木包含了许多数学运算，从基本的加减乘除，到四舍五入、平均值、中位数...等应有尽有，不论是简单的程序或复杂应用，都能通过各式各样的数学运算实现。\n\n## 指定数字\n\n「指定数字」积木用来让我们输入数字，可输入整数或是带有小数点的浮点数，常用于运算式或判断式。\n\n![](../../assets/images/upload_b9659220e1e8883d8ee9012855e02e75.png)\n\n## 数学运算\n\n「数学运算」积木可以针对数字进行加、减、乘、除和次方五种运算。\n\n![](../../assets/images/upload_b2e4fcf2caa70838f354c84553b4533b.png)\n\n## 常用数学函数\n\n「常用数学函数」提供常用的数学计算积木，常用数学函数包含以下几种：开根号、绝对值、负数(-)、对数函数(ln)、log10 函数(log10)、指数函数(e^)和10 的几次方(10^)。\n\n![](../../assets/images/upload_c7f1a0c467b02cc9ed16885874df0619.png)\n\n### 示例：算出根号 25\n\n![](../../assets/images/upload_46b1b8c4c63345d2e70a4fce5c99df8c.png)\n\n## 三角函数\n\n「三角函数」积木里头提供了两种三角函数用法，分别是角度 ( sin、cos、tan ) 以及径度 ( asin、acos、atan )，三角函数可以从下拉选单中选择切换。\n\n![](../../assets/images/upload_028701e00fb9da60ea3b72bb74adaf4c.png)\n\n### 示例：算出 sin(30)\n\n![](../../assets/images/upload_f35ec3f5b972801b532c03b7a1fd3ad6.png)\n\n## 常数\n\n「常数」积木会表现是一个不会变动的常数数值，常数包含了以下几种：圆周率(π)、指数(e)、黄金分割率(φ)、sqrt(2)、sqrt(½) 和无限大(∞)。\n\n![](../../assets/images/upload_805d5423c92f7105529bde34fb83a6b8.png)\n\n## 数学性质判定 ( 是否 )\n\n 「数学性质判定」积木可以判断数字的性质，包含偶数、奇数、质数、整数、正值、负数、可被整除。如果数字符合这项性质 ( 是、true )，能够执行后续动作。\n\n![](../../assets/images/upload_7cd038abab300054ebcc01b341b8caf0.png)\n\n## 四舍五入 ( 进位、舍去 )\n\n「四舍五入」积木可以对带有小数点的数字进行四舍五入、无条件舍去或无条件进位三种运算，舍去或进位到整数。\n\n![](../../assets/images/upload_c2e07b9a0ad2ccf030aee545376fb838.png)\n\n## 数组运算\n\n「数组运算」积木能针对以数字组成的数组，进行加总、取出最小值、取出最大值、计算平均值、取得中位数、取得比较众数、计算标准差和随机抽取的计算。\n\n![](../../assets/images/upload_b4a20e43de0cb4865e22b29a7cc0b50b.png)\n\n### 示例：算出数字总和\n\n![](../../assets/images/upload_4dc0517d4d3decec3ca9b048bf828b5f.png)\n\n## 取得余数\n\n「取得余数」积木可以取得两个数字相除的余数。\n\n![](../../assets/images/upload_a5c1cbc272294d03948376041f1c300b.png)\n\n## 限制数字范围\n\n「限制数字范围」积木可以将设定最大值与最小值，并将数字限制在这个指定的范围内。\n\n![](../../assets/images/upload_4c52c9671ba566547347febc2224fb21.png)\n\n## 随机取数 ( 整数 )\n\n指定一个数字范围，在每次执行时，就会从这个数字范围内取出随机的整数。\n\n![](../../assets/images/upload_aee8c752196384d636fbef6bb5cf2a7a.png)\n\n## 随机取数 ( 分数 )\n\n每次执行这块积木时，随机取得一个 0 到 1 之间的浮点数。\n\n![](../../assets/images/upload_24d1b96336d6b715f348710680b5e2bf.png)"}, "/WebAI/zh/Programming/Basic/Logic.html": {"title": "逻辑", "content": "# 逻辑\n\n在日常生活里，不论是写程序、数学计算，法庭攻防，甚至是路上交通、买卖东西或要不要起床，都包含许多「逻辑」的成分。逻辑可做许多的条件和判断，当满足了某些条件就会执行某件事，例如听见闹钟响就该起床、看到绿灯才可以行进…等状况，就是一些简单的逻辑判断。\n\n## 逻辑判断\n\n如果事件满足判断条件(判断返回值为「真」或「ture」)，就会执行对应的内容。\n\n-如果：接**判断条件**\n\n-执行：接**执行内容**\n\n![](../../assets/images/upload_a05837f4247b76cc747cae670b17c274.png)\n\n### 增加条件\n\n点选左上方的「蓝色小齿轮」，可以新增逻辑判断的条件，点一下可以打开，再点一下可以关闭。\n\n![](../../assets/images/upload_a41d68cd2082f3aae5f3981cce24bafd.gif)\n\n### 判断条件：如果、否则如果、否则\n\n「否则」的判断条件为当「如果」和「否则如果」的条件都没有满足，就会执行「否则」的内容。\n\n逻辑判断条件位置：\n\n-「如果」：在第一层\n\n-「否则如果」：位在中间\n\n-「否则」：在最后\n\n![](../../assets/images/upload_b3f5e79c33f6a4da74e1cfdda2ebb287.jpg)\n\n如果只有两个条件，例如非A即B，就可以单纯使用「如果」和「否则」就可以，甚至可以不使用「否则」，这样在条件外就不会进行任何动作。\n\n![](../../assets/images/upload_1ae4c3d5215d2847040889b4f71d6b38.png)\n\n## 判断条件式\n\n判断条件式主要会放在逻辑的「判断条件」缺口内，提供不同情境的逻辑判断。\n\n判断的条件主要分为：等于(=)、不等于(≠)、小于(<)、小于等于(≦)、大于(>)、大于等于(≧)。\n\n![](../../assets/images/upload_151cd59aee9c176b287ce540bca112f1.png)\n\n将「判断条件式」放入「如果」、「否则如果」、「否则」积木后方，即可设定执行条件。\n\n### 示例：判断成绩是否及格(1)\n\n1.以下方「判断成绩是否及格」为示例，设定「变量score」为随机0~100数值，并判断是否及格。\n\n-变量score≧60：显示PASS\n\n-变量score < 60：显示FAIL\n\n2.完成后按下执行。\n\n![](../../assets/images/upload_1e85e92c48d4fb5daa301dd6958f63b0.png)\n\n## 逻辑运算符\n\n「逻辑运算符」积木为逻辑判断提供了更弹性的判断条件，当中包含了「和」与「或」。\n\n-和：必须2个判断条件式都满足，才会执行动作，\n\n-或：只要满足其中一个判断条件式，就会执行动作。\n\n![](../../assets/images/upload_09d829bd597417299d5c3af90fcc06a8.png)\n\n逻辑判断出现「如果否则」的时候，常会用到逻辑运算符，而逻辑运算符可以搭配判断条件的积木使用。\n\n![](../../assets/images/upload_2a1786bb136c7d6963686ef657300388.png)\n\n### 示例：判断成绩是否及格(2)\n\n1.这次的示例多增加一个项目是当成绩是100时，让屏幕显示「PERFECT」。\n\n2.判断条件如下：\n\n-「变量score」= 100:PERFECT\n\n- 100 >「变量score」≧60:PASS\n\n- 60≧「变量score」：FAIL\n\n3.在「否则如果」后方放入「逻辑运算符」，让条件为score介于60~100之间。\n\n![](../../assets/images/upload_320f34108c2e8af436530a11cb9dac30.jpg)\n\n4.完成后按下执行，可以看到屏幕显示成绩与结果。\n\n![](../../assets/images/upload_81169a6841a1f2669a5caa457c9df3a5.png)\n\n## 真/假\n\n「真/假」积木主要表示ture(真)与false(假)两个值，目的是在数字、文字之外多一些判断的条件，同时也可以将ture和false提交给变量。\n\n![](../../assets/images/upload_fa06fa865565e57465d43d9339c79600.png)\n\n## 空\n\n编辑程序的时候，会遇到某个变量或是某个数值变成空值(null)的情况，这时就可以使用空值的积木判断，用法和「真/假」积木类似。\n\n![](../../assets/images/upload_d30f4b5bd5ef23d876f24a2ebf330b95.png)\n\n## 非\n\n「非」积木表示「不是什么」，通常会和「真/假」或「空值」的积木搭配使用。\n\n![](../../assets/images/upload_c2cb18419e3e47f48a474c09271a6c23.png)\n\n如果把积木接在「非」的积木后面，状态就会相反过来，例如空就会变成非空、真就会变假，假就会变真，依此类推。\n\n![](../../assets/images/upload_875ea95493d2be2cb3dc3969cab55f9b.png)\n\n## 三元逻辑运算符\n\n「三元逻辑运算符」积木是针对只有「两种条件」，并针对根据条件传回「两个表达式」的其中一个。\n\n![](../../assets/images/upload_3aff7970399de7bb7847496926e5de52.png)\n\n### 示例：判断成绩是否及格(3)\n\n1.使用相同的「判断成绩是否及格」示例，因为判断结果只有「及格」、「不及格」2种，所以可以使用「三元逻辑运算符」积木。\n\n2.设定「变量result」储存结果，\n\n-测试：「变量score」≧60\n\n-如果为真：显示PASS\n\n-如果为假：显示FAIL\n\n3.开始执行后，按下L按钮，屏幕会显示分数及结果。\n\n![](../../assets/images/upload_5d9e920f7b6009c74466629b41380cc7.png)"}, "/WebAI/zh/Programming/Basic/Lists.html": {"title": "数组", "content": "# 数组\n\n数组可以将数字、文本、列表或变量，按照顺序组合起来，这些按序排列资料集合就称作数组。一个数组可以再细分为多个项目，或是一个数组内还包含其他数组。在进行比较复杂的运算时，也会通过数组的操作来实现。\n\n## 建立数组、空数组\n\n- 「建立数组」积木可以通过指定位置放入对应的内容，建立一个带有数值的数组。\n- 「空数组」积木会建立一个数组容器，但会是一个里面没有包含任何项目的数组。\n\n点击积木的「设定」按钮，可以改变量组内的项目数量，当数量为 0，积木就会变成空数组，可以藉由后续操作改变量组内的项目内容。\n\n![](../../assets/images/upload_ed6e185aa95bf4fc4fab8982e2a7478d.png)\n\n### 示例：展示数组内的所有水果\n\n1. 将「变量 fruit」设定为数组，并在数组项目中放入各种水果名称。\n2. 使用「LCD 显示文字」积木显示「变量 fruit」。\n3. 避免文字显示超出屏幕，调整 x 成 50。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **['apple', 'orange', 'banana']**。\n\n   ![](../../assets/images/upload_884e654b486f5a19ac7a8dbbd3db7521.png)\n\n## 重复数组内项目\n\n「重复数组内项目」积木可以建立一个数组，并让数组内的项目重复特定数量。当数组内需要填入大量重复的项目时，就只需要设定一次。\n\n![](../../assets/images/upload_7893cbd4e0063912006f14e9dbc7f98c.png)\n\n### 示例：铅笔盒内有 5 支笔\n\n1. 使用「变量 pencil box」，后面放入「重复数组内项目」积木。\n2. 将「文字」积木放入数组中，并输入「pen」。\n3. 使用「LCD 显示文字」积木显示「变量 pencil box」。\n4. 避免文字显示超出屏幕，调整 x 成 50。\n5. 按下执行，可以看到 Web:AI 屏幕显示 **['pen', 'pen', 'pen', 'pen', 'pen']**。\n\n   ![](../../assets/images/upload_d0bb47652d48444d1831be9e325a905b.png)\n\n## 数组长度\n\n「数组长度」积木可以取得个数组的项目总数。\n\n![](../../assets/images/upload_47561b9a47ba4faab6c3ccee6547d539.png)\n\n如果是空数组则数组长度为 0。\n\n![](../../assets/images/upload_95a27df38f0aa6739749bbde7d8a6aff.png)\n\n### 示例：查看数组中有多少水果栏位？\n\n1. 将「变量 fruit」设定为数组，并在数组项目中放入各种水果名称。\n2. 使用「变量 number」作为水果栏位的数量，放入「数组长度」积木，后方放入「变量 fruit」。\n3. 使用「LCD 显示文字」积木显示「变量 number」。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **6**。\n\n   ![](../../assets/images/upload_17cc5c62f7ce60f2c84ce6d3172c67eb.png)\n\n5. 因为「数组长度」积木读取的是数组的项目数量 ( 水果栏位数量 )，所以即使项目中没有放入水果，屏幕也会显示相同的数字。\n\n   ![](../../assets/images/upload_bace1a5878ebf047f155130b75b4b927.png)\n\n## 索引项目位置\n\n「索引项目位置」积木能在一个数组中，从最前面或最后面，找到特定项目所在的位置，并返回该位置的顺序号码。\n![](../../assets/images/upload_9db2dd194ff822aa83060d8b0e614505.png)\n\n\n### 示例：水果数组中，第一颗橘子出现在什么位置？\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 设定「变量 order」，后方放入「索引项目位置」积木，从「fruit」数组最前面索引项目「orange」。\n3. 使用「LCD 显示文字」积木显示「变量 order」。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **4**，代表第一颗橘子出现在 **第 4 个位置**。\n\n   ![](../../assets/images/upload_53325524181d38607e41a53ba7abee27.png)\n\n## 取得数组内容\n\n「取得数组内容」积木可以取得数组中某个项目的值、或是取得某个项目的值之后，同时移除该项目。 ( 项目取得方式包含：第几个、倒数第几个、第一个、最后一个和随机 )\n\n![](../../assets/images/upload_6f5882aaa141ae10aae06249e203dacc.png)\n\n### 示例：找到第 3 个水果\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 使用「LCD 显示文字」积木，显示「取得数组」积木取得数组中的第 3 项。\n3. 按下执行，可以看到 Web:AI 屏幕显示 **cherry**，代表数组中的第 3 个项目是 cherry。\n\n   ![](../../assets/images/upload_d8cf61566a59081dbdc818d062cfd868.png)\n\n### 示例：移除第 3 个水果，并说出后来的第 3 个水果\n\n1. 接续上一个示例，完成建立数组。\n2. 在数组后面使用自「数组 fruit」移除第 3 个项目。\n3. 使用「LCD 显示文字」积木，显示「取得数组」积木取得数组中的第 3 项。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **orange**，代表原本数组中的第 3 个项目 cherry 被移除，改由原本的第 4 个项目 orange 递补。\n\n   ![](../../assets/images/upload_2599f4b2fda422c2ecfb5df97b79a44e.png)\n\n## 设定数组内容\n\n「设定数组内容」积木可以针对数组的项目进行设定或移除。 ( 项目取得方式包含：第几个、倒数第几个、第一个、最后一个和随机 )\n\n![](../../assets/images/upload_5602a5b1b00a3c60cd134600f44d1214.png)\n\n### 示例：将第 3 个水果改为 cherry\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 下方使用自「数组 fruit」中设定第 3 个项目为 cherry。\n3. 使用「LCD 显示文字」积木，显示「数组 fruit」，并设定 x 为 40，避免文字超出屏幕。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **[‘apple’, ‘banana’, ‘cherry’]**，代表第 3 个水果已经被改为 **cherry**。\n\n   ![](../../assets/images/upload_d38af28745d3d75ab576ad3eaf803350.png)\n\n<!-- ## 取得指定区间的项目\n\n「取得指定区间的项目」积木会取出一段指定区间内的项目，并将这些项目建立成一个子数组。\n\n> 请注意第一个空格的数字需要比第二个空格内的数字小！\n\n![](../../assets/images/upload_bf209fecdd85453b57213eba10de5a86.png)\n\n### 示例：取得第 2 个水果 ~ 倒数第 2 个水果\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 加入另一个变量「变量 list」，在后方使用：自「数组 fruit」中取得第 2 个项目至倒数第 2 个项目。\n3. 使用「LCD 显示文字」积木，显示「数组 list」，并设定 x 为 40，避免文字超出屏幕。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **[‘banana’, ‘orange’, ‘cherry’]**。\n\n![](../../assets/images/upload_d83aba208f12ef7d13371ca274801662.png)\n\n![image alt](https:// \"title\") -->\n\n## 文字与数组转换\n\n「文字与数组转换」积木可以将带有「分隔符」( 类似空白、逗号、分号...等分隔符号 ) 的文字转换为数组，或是将数组合并为一串文字。\n\n- 从文本制作数组：文字 → 数组\n- 从数组拆出文本：数组 → 文字\n\n![](../../assets/images/upload_7aae6f7038f74c6d33c6d6ddd3110828.png)\n\n### 示例：用文字展示水果数组，并用逗号分开\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 使用「把数组合并为文字」，将数组变成文字形式。\n3. 使用「LCD 显示文字」积木，并设定 x 为 40，避免文字超出屏幕。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **apple,banana,orange,cherry,guava**。\n \n   ![](../../assets/images/upload_466cfd47b5e350508c57da544e6f99ab.png)\n\n5. 如果将「分隔符」改成「/」符号，可以看到 Web:AI 屏幕显示 **apple/banana/orange/cherry/guava**。\n\n    ![](../../assets/images/upload_da1a8336911bad031ec8e5a68686a007.png)\n\n## 数组排序\n\n「数组排序」积木会将指定的数组做数字、字母的排序，排序后会形成一个新的数组，不会影响原本数组的排序。\n\n>- 依英文升序：a ~ z\n>- 依英文降序：z ~ a\n>- 依数字升序：小 ~ 大\n>- 依数字降序：大 ~ 小\n\n![](../../assets/images/upload_0cb245b7be3711400d494a42a08c0f81.png)\n\n### 示例：让水果依英文字母顺序排列\n\n1. 使用「变量 fruit」和「数组」积木，并在数组项目中放入各种水果名称。\n2. 加入另一个变量「变量 text」，使用「数组排序」积木让数组依照英文字母排序。\n3. 使用「LCD 显示文字」积木，显示「order」，并设定 x 为 40，避免文字超出屏幕。\n4. 按下执行，可以看到 Web:AI 屏幕显示 **[‘apple’, ‘guava’, ‘orange’]**，数组中的项目依照 a~z 的顺序排列。\n\n   ![](../../assets/images/upload_2b46378f90a8b7f1b1ef6882d302c6db.png)"}, "/WebAI/zh/Programming/Basic/Functions.html": {"title": "函数", "content": "# 函数\n\n函数积木可以帮助我们简化或管理较为复杂的程序逻辑，因为在写程序的时候，常会遇到需要重复撰写并执行的代码，如果每重复一次都得重写一次，势必会造成整份程序逻辑的复杂度，通过函数，将这些重复的程序集中管理，需要使用的时候再去呼叫函数，就可以执行对应的内容。\n\n## 建立函数\n\n「建立函数」积木可以将许多重复会用到的程序积木包装成函数。\n\n![](../../assets/images/upload_a367c134c23f41bcd37af8342f8aae8a.png)\n\n### 「函数」积木使用流程\n\n使用建立函数积木并不会执行函数，因为函数是定义「需要执行的内容」，建立完成函数积木内容后，在函数积木的目录里，就会出现对应的执行函数积木，使用这块积木才表示执行这个函数。\n\n函数流程：\n\n1. 建立函数\n2. 执行函数\n\n![](../../assets/images/upload_9927eea7e5f49cc07602f9e8ef006cc0.png)\n\n### 示例：建立并执行函数\n\n1. 使用「建立函数」积木，放入「LCD 显示文字」积木\n2. 使用「函数」积木\n3. 按下执行，可以看到 Web:AI 屏幕显示 **Hello World**。\n\n![](../../assets/images/upload_ba667034437829bdc693c88295b95db0.png)\n\n### 函数内变量\n\n除了单纯的使用函数，我们也可以建立「函数内的变量」，点选函数积木前方的小齿轮，就可以新增变量。\n\n![](../../assets/images/upload_730ffc95b0c683c2ca9896fd3ec1b283.gif)\n\n新增函数内的变量后，执行函数时也会看到放入变量数值的缺口。 ( 有几个函数内的变量就会有几个缺口 )\n\n![](../../assets/images/upload_b12dd98ddefa314dadd2e0ad39fcec10.png)\n\n也会看到在「变量」积木列表同时新增了 x、y 变量。\n\n![](../../assets/images/upload_c2fa8754b6319a1758fb0c0a337adfcb.png)\n\n### 示例：使用函数内变量作运算\n\n1. 使用「建立函数」积木，放入「LCD 显示文字」积木，显示 **x 和 y 相乘** 的结果。\n2. 使用「函数」积木，放入 **变量 x、y**。\n3. 输入 x = 58、y = 63。\n4. 按下执行，可以看到 Web:AI 屏幕显示 3654。\n\n![](../../assets/images/upload_b0d50f4e741fc6ebb87e55f254e3a4ad.png)\n\n## 建立返回值函数\n\n「建立返回的函数」积木可以让执行的函数，变成单纯的**数值**。\n\n![](../../assets/images/upload_cf7190430a281e0758d5a1c382e86286.png)\n\n使用「建立返回值函数」，会发现执行函数时积木前方多了一个作为组合用的形状。\n( 下图是延伸前一段建立函数内数的函数 )\n\n![](../../assets/images/upload_cbfb981e04896726b0ed41b7539720b5.png)\n\n### 示例：x、y 不同的运算结果\n\n1. 使用「建立返回值函数」积木，返回值为 **x 和 y 相加**。\n2. 使用「按钮开关」积木和「LCD 显示文字」积木，分别用来显示不同的运算结果。\n3. 放入「函数」积木，设定不同的 x、y 值。\n4. 执行后，按下 L、R 按钮，可以看到 Web:AI 屏幕显示不同的运算结果。\n\n![](../../assets/images/upload_7142effe680a069803df59f805082d85.gif)\n\n## 函数内判断并返回值\n\n「函数内判断并返回值」积木必须和「建立返回值函数」的积木搭配，其作用为在某指定判断条件下成立则使函数返回指定数值。\n\n> 「函数内判断并返回值」积木必须放在「建立函数」积木内才能正常运作。\n\n![](../../assets/images/upload_3f635fbacc9cdfda5d4e05d33e8b4bf0.png)\n\n### 示例：判断 x、y 大小 ( 1 )\n\n通过这个积木，搭配函数内的变量，就可以通过传入的变量数值，最后返回 x 和 y 哪个比较大的结果。\n\n![](../../assets/images/upload_218975067b38ed4d9b0c73b103f2bf2a.png)\n\n### 示例：判断 x、y 大小 ( 2 )\n\n因为「函数内判断并返回值」积木具备逻辑判断的功能，所以也可以使用逻辑积木加上一个变量来做判断，就能做出一模一样的效果。\n\n![](../../assets/images/upload_503e5c2f293d0f99b5fdf78c78e6332c.png)"}, "/WebAI/zh/Programming/Basic/Variables.html": {"title": "变量", "content": "# 变量\n\n变量，是所有程序都会用到的基本元素，使用前会赋予变量一个名称，可以用这个变量来表示文字、数字、数组、颜色或逻辑。\n\n为什么要使用变量呢？因为在编程时往往会遇到许多「重复」的部分，如果用变量或函数装载这些重复的部分，就能很简单的进行「一次性」新增、删除或修改动作。\n\n举例来说，如果一段文章出现了50次「A」，要把「A」修改为「B」，若不使用变量则得要手动修改50次才办得到，使用变量的话就能够一次将全部的「A」同时改为「B」。\n\n## 建立变量\n\n要使用「变量」积木前需要先建立变量(将变量命名)，点击灰色的「建立变量」积木，跳出「新变量名称窗口」，输入想命名的变量名称，按下确定，就可以看到新建立的变量了。\n\n![](../../assets/images/upload_0fce028e7d242c203e4960b091f11b2e.png)\n\n![](../../assets/images/upload_93ad649f0dab2b6289626cf5b8f8e88b.png)\n\n## 设定变量\n\n设定变量表示赋予变量一个值，可以将变量设定为一串英文字或数字。\n\n![](../../assets/images/upload_dc7c58f706e8ddf25f1c432993c043a0.png)\n\n为了要在Web:AI开发板的屏幕上显示结果，我们需要搭配「LCD显示文字」积木。在设定完变量后，下方放入「LCD显示文字」积木，再将变量积木放入里面，按下执行，就可以看到屏幕上显示「100」了。\n\n![](../../assets/images/upload_7be72c49e8dd9ad0bfe9fc02598ad5f8.png)\n\n## 变量覆盖特性\n\n由于程序语言有「后面覆盖前面」的特性，所以如果变量名称相同，后面设定的值会覆盖掉前面设定的值。\n\n以下方的积木为例子，将「变量Webduino」设定3次值，搭配「LCD显示文字」积木，按下执行，可以看到LCD屏幕最后呈现的结果为「Web:AI」\n\n![](../../assets/images/upload_44fb13ee1a82c6ec5c19673f2d48f2fa.png)\n\n## 变量增加\n\n变量增加表示「让变量的值增加多少」，假设原本变量的值为1，使用变量增加1之后，这个变量就会变成2；同理，如果使用变量增加-1，那么这个变量就会变成0。\n\n![](../../assets/images/upload_d180e41da4376d191440a13a6800d03a.png)\n\n设定变量的值为100，使用「变量增加」积木将变量增加1，可以看到屏幕显示101。\n\n![](../../assets/images/upload_400365feb4d61698a392357ce7baa995.png)"}, "/WebAI/zh/Programming/Basic/Text.html": {"title": "文本", "content": "# 文本\n\n文本积木除了可以显示有意义的词汇，也可以通过相加的方式把文字组合，或是在一段词汇中寻找对应的字词或字母，甚至也可显示语音辨识的内容或物联网串感器的状态。\n\n## 指定文字 ( 英文、数字 )\n\n「指定文字」积木可以输入指定的英文数字，​​通过 LCD 屏幕显示出来。\n\n![](../../assets/images/upload_7cc527f72f049af40d1eb726dc8fea57.png)\n\n如下方程序，屏幕显示「Web:AI」。\n\n![](../../assets/images/upload_0d7af52d407ad9cccdd3ec14ee597a8f.png)\n\n## 字符串组合\n\n「字符串组合」积木可以把不同的文本积木组合成一段文字。\n点击紫色的「设定」按钮，将「项目」积木加入字符串组合中，可以增加文字的数量。\n\n![](../../assets/images/upload_ba0366fd7d1d11b7c23e5d858166e8cb.png)\n\n### 示例：显示 3 个字符串\n\n在「字符串组合」积木中放入 3 个文本积木，输入 A、B、C，按下执行，可以看到 Web:AI 屏幕画面显示「ABC」。\n\n![](../../assets/images/upload_f08134e439e978452a3b87b89103dae2.png)\n\n## 在变量后方加入文字\n\n「在变量后方加入文字」积木能够在原本变量的内容后方增加额外文字。\n\n![](../../assets/images/upload_b4d3fe0e18f006473fb612187163a5a5.png)\n\n### 示例：在科目名称后面显示成绩\n\n1. 设定「变量 score」，后方用「文本」积木放入科目名称「Math:」\n2. 使用「在变量后加入文字」积木对「变量 score」加入科目分数「95」\n3. 按下执行，就可以看到 Web:AI 屏幕显示「Math:95」\n\n![](../../assets/images/upload_673d6168873eb8b7ba7584bb6582c874.png)\n\n## 字符串长度\n\n「字符串长度」积木可以取得一串文字的总字数。\n\n![](../../assets/images/upload_5808319d598ea5b994d94138b5a35ee7.png)\n\n> 英文字以「字母」为单位，且空白、标点符号也算是一个字符。\n\n### 示例：算出有多少字符\n\n1. 设定「变量 length」，复制一串英文字母或文章贴上\n2. 使用「LCD 显示文字」积木显示「变量 length」\n3. 按下执行，就可以看到全部的字符数量，如英文字母有 26 个。\n\n![](../../assets/images/upload_e2abe019b553328bf839d0b5e44399a4.png)\n\n## 文字为空\n\n「文字为空」积木可以判断积木内是否存在文字，若不存在文字，返回「是 ( true )」，并执行后续动作。\n\n![](../../assets/images/upload_8fa632f24109f1ee35c2d18878a43166.png)\n\n### 示例：是否存在文字\n\n1. 使用逻辑积木，判断是否存在文字\n2. 如果文字为空，执行 LCD 屏幕显示「T」；如果存在文字，LCD 屏幕显示「N」\n\n![](../../assets/images/upload_3e69fecaf61a1c2bbd68ca6ff34e482a.png)\n\n## 寻找文字出现位置\n\n「寻找字符串出现位置」积木会返回指定文字在一段文字中出现的位置，可以选择第一个出现的位置或最后一个出现的位置。\n\n![](../../assets/images/upload_e3c41207af0cd8d944c9224b03a5004f.png)\n\n### 示例：找出 W 是第几个字母？\n\n1. 设定「变量」积木为字符串 A~Z\n2. 设定「变量 W」并放入「寻找字符串出现位置」积木\n3. 使用「LCD 显示」积木显示「变量 W」\n4. 按下执行，可以看到 W 是第 23 个英文字母\n\n![](../../assets/images/upload_73710f9b24477d9b8ed6f6c9fad85abe.png)\n\n## 取得指定位置的字符\n\n「取得指定位置的字符」积木会取出指定位置的字符，下拉选单共有五种指定位置，分别是第几个、倒数第几个、第一个、最后一个和随机位置。\n\n![](../../assets/images/upload_7457eeb7b38d2650066aca48ea87519d.png)\n\n### 示例：寻找第 23 个英文字母\n\n延续上面示例，找出第 23 英文字母，并用屏幕显示出来。\n\n1. 设定「变量」积木为字符串 A~Z\n2. 设定「变量 23」并放入「取得指定位置的字符」积木\n3. 使用「LCD 显示」积木显示「变量 23」\n4. 按下执行，可以看到第 23 个英文字母是 W\n\n![](../../assets/images/upload_353f0bc5c91a3753559cc25ccbca22ef.png)\n\n## 取得指定区间的文字\n\n「取得指定区间的文字」积木会取出一段指定区间内的文字，需注意的是**第一个空格的数字要比第二个空格内的数字小**。\n\n![](../../assets/images/upload_0feebf92704b1b61ed64f445d1608555.png)\n\n### 示例：在句子中找出指定区间的字符\n\n1. 使用「变量」积木和「文本」积木，并输入一段句子 **Let's try Web:AI!**\n2. 设定取得第 10 字符 ~ 倒数第 2 字符\n3. 执行后可以看到 LCD 屏幕显示 **Web:AI!**\n\n![](../../assets/images/upload_4a07b46184007fb2f33942e39f537a3e.png)\n\n## 转换大小写\n\n「转换大小写」积木可以针对「英文字」进行大小写转换，包含全部转大写、全部转小写或是首字母大写。\n\n![](../../assets/images/upload_4d01cbf73ebf502d99461e0ac7161d2c.png)\n\n### 示例：让英文字不断变换大小写\n\n1. 使用 2 个「LCD 显示文字」积木，里面分别放入「转成英文大写」积木及「转成英文小写」积木\n2. 在「转换大小写」积木内输入英文字\n3. 使用「循环无限次」积木，并用「等待」积木设定间隔时间各 1 秒\n4. 按下执行，可以在 Web:AI 屏幕看到 **ABCDEFG** 不断变换大小写\n\n![](../../assets/images/upload_80e1c409393376666853fb69c3c0a794.gif)\n\n## 消除空格\n\n「消除空格」积木可以消除一段文字中左边、右边或左右两边的空白字符。\n\n![](../../assets/images/upload_51c9f50f67c12904166e7e09057479ed.png)"}, "/WebAI/zh/Programming/Advanced/Image.html": {"title": "影像分类", "content": "# 影像分类\n\nWeb:AI 影像辨识分为**影像分类** 以及**物件追踪**，可以使用Web:AI 开发板拍摄影像上传至Webduino 影像训练平台进行影像训练，将训练完成的模型下载，再使用程序积木执行影像辨识。\n\n本章节将会介绍「影像分类」积木的使用方式。\n\n## 下载影像分类模型\n\n在使用影像分类之前，需要先训练好模型，并下载至开发板中，训练流程欢迎参考：[三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)。\n\n按照步骤下载后，就可以使用「影像分类」积木进行操作了。\n\n## 设定影像分类模型\n\n在操作影像分类前，需要先使用「设定影像分类模型」积木对模型作设定。\n\n![](../../assets/images/upload_7b83f05b602f41f96f9afbfeda5b9abc.jpg)\n\n- 模型：影像分类使用的模型。\n- 分类：模型中的分类，使用半形逗号「,」分隔。\n- 镜头反转：在使用特定外壳时会有前后镜头功能，因此需要勾选让镜头反转，避免画面上下颠倒。\n\n    > 如果是使用无外壳的 Web:AI 开发板，使用预设的不勾选。\n- 宽高：影像的尺寸大小。如果是使用自行训练的模型，需要手动输入；如果是使用 [Webduino 影像训练平台](https://vision.webduino.io/) 训练的模型，使用的尺寸则会是：\n    - 宽：224\n    - 高：224\n\n在「设定影像分类模型」积木中可以选择要使用的模型，**选择的模型必须和下载到开发板中的板子一致**，才能顺利进行辨识。\n\n![](../../assets/images/upload_b930030ac6820dee0c105ebbb8292520.png)\n\n选择模型方式又会依据使用的平台及建立方式而不同，如下：\n\n- ### 选择模型 ( 网页版 )\n\n    点击「模型」，可以从下拉选单中选择想使用的模型，选单中的模型会根据 [Webduino 影像训练平台](https://vision.webduino.io/) 列出可使用的影像分类模型。\n\n   ![](../../assets/images/upload_683d5d0a22f51326916f12ba15cf523f.png)\n\n- ### 选择模型 ( 安装版 )\n\n   在「模型」中手动输入，并将「分类」框选复制后贴上。\n\n   > 因为分类的顺序会影像到是否能正常辨识，为确保顺序正确，建议直接将分类框选复制。\n\n   ![](../../assets/images/upload_1e61f3f88871986aa8d9a891bb3977a1.jpg)\n\n- ### 选择模型 ( 新增自订模型 )\n\n   如果是自行将模型烧录进开发板，或是将模型文件放在 SD 卡中，就需要使用「新增自订模型」，如下方步骤：\n\n   1. 点击「新增自订模型」。\n   2. 输入模型名称，按下确定。\n   3. 模型选单中出现自订模型，后方会标示 **( 自订 )**\n   4. 在「分类」填入自订模型的分类顺序\n\n## 开始辨识影像\n\n使用「开始辨识影像」积木来触发影像辨识的进行。\n因为这块积木代表触发 1 次影像分类，如果需要重复触发，就需要在外层放上「无限循环」积木。\n\n![](../../assets/images/upload_f1c7a67a2875f34be15d895bb354182c.png)\n\n## 取得辨识到的影像名称\n\n当开始辨识时，可以使用「取得辨识到的影像名称」积木来显示辨识到的分类名称。\n\n例如：使用模型「monster」，里面的分类是「green,yellow,red,blue」，那么「取得辨识到的影像名称」积木就会是「green,yellow,red,blue」中的其中一个。\n\n![](../../assets/images/upload_9d457d5d878a8afca13c377475cff5b0.png)\n\n## 取得辨识到的影像信心度\n\n当开始辨识时，可以使用「取得辨识到的信心度」积木来显示辨识到的信心度。\n信心度最高为 100、最低为 0，信心度越高，表示越符合模型中所有的特征。\n\n> 因为影像训练辨识的结果会落在一个区间范围内，若信心度为 90%，代表有 90% 的机率真正的结果会落在这个区间范围内。\n\n![](../../assets/images/upload_47b481159799efcfda48fd36fe831bbb.png)\n\n## 示例：影像分类\n\n1. 先从 [Webduino 影像训练平台](https://vision.webduino.io/) 下载要进行影像训练的模型，如示例是使用模型「monster」。\n\n    > 有关如何训练影像模型，欢迎参考：[三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)。\n\n    ![](../../assets/images/upload_05e9f1e0bdcac076f5d9976ce9526294.jpg)\n\n2. 使用「设定影像分类模型」积木，选择使用的模型。\n\n    ![](../../assets/images/upload_537b21839bcd48b32795cd6e5418f789.jpg)\n\n3. 使用「无限循环」积木，放入「开始辨识影像」积木、「显示文字」积木。\n\n    ![](../../assets/images/upload_30a3966ae32fbd8f7c26d5cd0c503f06.jpg)\n\n4. 在「显示文字」积木内放入要显示的影像分类信息，示例为显示：**分类名称_信心度**。\n\n    ![](../../assets/images/upload_2239add9b2cfbb635f883fc21425971e.jpg)\n\n5. 将积木组合，按下**执行**即可以在Web:AI上执行影像分类。\n\n    ![](../../assets/images/upload_87abba90f956034aa9540ae021601d30.jpg)\n\n    ![影像辨识结果](../../assets/images/upload_18ff3d4a326a6123cb54fb20940150f9.png)"}, "/WebAI/zh/Programming/Advanced/FileRW.html": {"title": "文件读写", "content": "# 文件读写\n\nWeb:AI 文件读写功能能够将镜头拍摄的图片存入，并通过 LCD 屏幕显示的功能将储存的图片展示出来。通过文件读写功能，可以让 Web:AI 开发板实现拍照等影像应用。\n\n> 更多相关应用，可以参考：[LCD 显示图片](https://bpi-steam.com/WebAI/zh/Programming/WebAI/LCD.html#LCD-%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87)。\n\n## 写入文件\n\n「写入文件」积木可以将镜头捕捉到的影像储存在开发板记忆体中，再配合其它积木展示。\n\n![](../../assets/images/upload_0467957e1aab1208df0cc8fb9732b98a.png)\n\n## 图片 ( 文件 )\n\n「图片 ( 文件 )」积木要使用的图片，能够根据图片的文件名称加以读取并使用。\n\n![](../../assets/images/upload_9844d06a3efc96392cd124fc7b783432.png)\n\n## 示例：自拍照相\n\n1. 先设定拍照状态，使用「无限循环」积木让开发板保持在拍照状态。\n\n    ![](../../assets/images/upload_71ff8223a0f878a61c8e80c7fb05d899.png)\n\n2. 使用「变量 show」来表示相机的状态，开发板一开始会保持在拍照状态。\n \n   ![](../../assets/images/upload_5c5a38e6240f641e002335da3812879c.png)\n\n    - 真：展示拍摄的照片\n    - 假：拍照状态\n\n3. 设定当 L 按钮按下，会拍摄照片，并同时显示「储存中...」和「完成」。\n\n   ![](../../assets/images/upload_1f2b11380cf2372c9ca3672bd50efa3f.png)\n\n4. 设定当 R 按钮按下，会显示拍摄的照片。\n\n    ![](../../assets/images/upload_d7494a77b30b1496ed4d98822662f13e.png)\n\n5. 设定当 R 按钮放开，「变量 show」为**假**，回到拍照状态。\n\n    ![](../../assets/images/upload_90628981c80e3f7c9dde48fdf506bfe6.png)\n\n6. 完成后开始执行，按下开发板 L 按钮拍照，按下 R 按钮展示。\n\n    ![](../../assets/images/upload_4926d849dc1ccd16171bfbe981df306f.png)\n\n![](../../assets/images/upload_137463eb3594996be60e6b4514feba5e.gif)"}, "/WebAI/zh/Programming/Advanced/QRCode.html": {"title": "二维码扫描", "content": "# 二维码扫描\n\nWeb:AI 具备二维码扫描功能，能够通过开发板上的镜头侦测二维码，并可将二维码所记录的信息显示在屏幕上。\n\n## 照相画面\n\n「拍摄照片」积木可以使用镜头拍摄一次画面，配合「无限循环」积木就可以达成相机取景器的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「变量」积木替拍摄照片命名，通过命名来做出更多变化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上两种积木组合方式执行后会达到相同的结果，差别在于若是要做出更多应用变化，就需要搭配「变量」积木的命名。\n\n### 画面上画文字\n\nWeb:AI 能够在屏幕画面或图片上显示文字，这时就需要搭配「图片上画文字」积木。\n\n> 请特别注意，「图片上画文字」积木需要放在「LCD 显示图片」积木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 读取图片中的 QRcode(二维码)\n\n「读取图片的 QRcode」积木能够读取图片上的 QRcode 信息，并通过「LCD 屏幕」积木显示出来。\n\n![](../../assets/images/upload_fffaf7ffa609a3acfc3f5e733a88c047.png)\n\n\n## 示例：QRcode 扫描\n\n1. 使用「变量」积木将拍摄照片命名为「画面」。\n\n    ![](../../assets/images/upload_2faf10807186f50299cd8d55f2d87f65.png)\n\n2. 使用「图片上画文字」积木，填入「画面」及「读取图片的 QRcode」积木，代表在画面上显示 QRcode 的信息。\n\n    ![](../../assets/images/upload_0c662efb60008d34d600fcfcc2e91587.png)\n\n3. 放入「LCD 显示图片」积木，设定为「画面」。\n\n    ![](../../assets/images/upload_247a402fccd1886ecd12846df20cd917.png)\n\n4. 前面步骤完成后代表能够扫描一次 QRcode，为了能够不断扫描，在最外层放入「无限循环」积木。\n\n    ![](../../assets/images/upload_bf87cd1a75b15fbf75bc21d972fb1b25.png)\n\n5. 完成后按下执行，使用 Web:AI 的镜头扫描 QRcode，就可以看到屏幕显示 QRcode 信息了。\n\n   ![](../../assets/images/upload_d393959c360f2933fa83169f9791d172.png)\n\n    ![](../../assets/images/upload_dc36ceb0e810940ce6371095d09c5a09.png)"}, "/WebAI/zh/Programming/Advanced/Face.html": {"title": "人脸追踪", "content": "# 人脸追踪\n\n在 AI 人工智能中，人脸识别与追踪是一种很重要的应用，即通过大量的训练集来训练AI使其能从图像中分辨出人的面部特征并做出标记。通过这项技术，可以侦测到是否有人经过以及画面中的人数，进一步做出监视器等应用。\n\n而Web:AI 的人脸追踪技术，可以做到追踪人脸的座标位置，以及人脸在画面中的宽度、高度，更配合疫情时事，增加了口罩辨识的功能，让AI 结合生活应用，更方便用于教学。\n\n## 照相画面\n\n「拍摄照片」积木可以使用镜头拍摄一次画面，配合「无限循环」积木就可以达成相机取景器的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「变量」积木替拍摄照片命名，通过命名来做出更多变化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上两种积木组合方式执行后会达到相同的结果，差别在于若是要做出更多应用变化，就需要搭配「变量」积木的命名。\n\n### 画面上画文字\n\nWeb:AI 能够在萤幕画面或图片上显示文字，这时就需要搭配「图片上画文字」积木。\n\n> 请特别注意，「图片上画文字」积木需要放在「LCD 显示图片」积木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 取得图片的人脸信息\n\n「取得图片的人脸信息」积木能够在画面中判断人脸特征，并将侦测到的人脸用白框框起来。\n\n![](../../assets/images/upload_deef20fc56ca67c2a61f0dff7ffa4865.png)\n\n## 取得人脸信息\n\n「取得人脸信息」积木代表从镜头中的人脸读取到的信息，包含位置 ( x 座标、y 座标 )及大小 ( 宽度、高度 )。\n\n![](../../assets/images/upload_300c4b47308ba5100134338d8f53ce3e.png)\n\n## 判断人脸有无戴口罩\n\n读取到画面的人脸后，可以进一步判断是否配戴口罩，通过「判断人脸有无戴口罩」积木，可以针对人脸是否戴着口罩返回「是」或「否」，更能做出口罩侦测机的应用。\n\n![](../../assets/images/upload_bb7707e5b01fea74606915bc5f4cd6a7.png)\n\n## 示例：追踪人脸座标\n\n1. 先使用「变量」积木将拍摄照片命名为「画面」，做出镜头画面。\n\n   ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 使用「变量」积木，将「取得图片的人脸信息」积木命名为「人脸信息」。\n    现在执行后可以在画面中框出人脸。\n\n    ![](../../assets/images/upload_396fb589d4157779453859ca5fe4c8e2.png)\n\n3. 使用「图片上画文字」积木，放入「文字」积木，做出人脸的 xy 座标。\n\n   ![](../../assets/images/upload_b96f96011107dd369cc944a6705d8edc.png)\n\n4. 按下执行，可以看到开始追踪人脸，并同步显示人脸的位置座标。\n\n## 示例：口罩侦测器\n\n1. 先使用「变量」积木将拍摄照片命名为「画面」，做出镜头画面。\n\n    ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 使用「变量」积木，将「取得图片的人脸信息」积木命名为「人脸信息」。\n    现在执行后可以在画面中框出人脸。\n\n    ![](../../assets/images/upload_396fb589d4157779453859ca5fe4c8e2.png)\n\n3. 使用「图片上画文字」积木，放入「文字」积木，显示「口罩侦测中...」。\n\n    ![](../../assets/images/upload_ca1d491ec5330d6f497741e0a5d1cda9.png)\n \n4. 在这里加入「逻辑」积木，用来判断人脸是否配戴口罩。\n    - 配戴口罩 = 真\n    - 配戴口罩 = 假\n\n    ![](../../assets/images/upload_8ce4a924ea5ece392c3c0e5f025cf75b.png)\n\n5. 在「逻辑」积木后放入后续要执行的动作，如：\n    - 配戴口罩 = 真：显示绿色「安全」\n    - 配戴口罩 = 假：显示红色「警告！」\n\n    ![](../../assets/images/upload_80741458ce4b6175eeb718ce5cf239d1.png)\n\n6. 按下执行后，就能够开始进行口罩辨识。\n可以看到没配戴口罩时，萤幕显示红色「警告！」，配戴着口罩时，萤幕显示绿色「安全」。"}, "/WebAI/zh/Programming/Advanced/Object.html": {"title": "物件追踪", "content": "# 物件追踪\n\nWeb:AI 影像辨识分为**影像分类** 以及**物件追踪**，可以使用Web:AI 开发板拍摄影像上传至Webduino 影像训练平台进行影像训练，将训练完成的模型下载，再使用程序积木执行影像辨识。\n\n本章节将会介绍「物件追踪」积木的使用方式。\n\n## 下载物件追踪模型\n\n在使用物件追踪前，需要先训练好模型，并下载至开发板中，训练流程欢迎参考：[三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)。按照步骤下载后，就可以使用「物件追踪」积木进行操作了。\n\n另外，也可以直接使用已经训练完成的「小怪兽模型」，内建在开发板中不需要重新训练、下载。\n\n## 设定物件追踪模型\n\n在操作物件追踪前，需要先使用「设定物件追踪模型」积木对模型作设定。\n\n![](../../assets/images/upload_97f798f5724f2a66ecc226e130018997.jpg)\n\n- 模型：物件追踪使用的模型。\n- 分类：模型中的分类，使用半形逗号「,」分隔。\n- 辨识门槛：物件追踪的精准度，门槛越高代表侦测越符合模型特征才会辨识成功，预设为 0.1。\n- 镜头反转：在使用特定外壳时会有前后镜头功能，因此需要勾选让镜头反转，避免画面上下颠倒。\n\n    > 如果是使用无外壳的 Web:AI 开发板，使用预设的不勾选。\n- 宽高：影像的尺寸大小。\n\n    1. 内建「小怪兽模型」，使用的尺寸：\n        - 宽：320\n        - 高：224\n    2. [Webduino 影像训练平台](https://vision.webduino.io/) 训练的模型，使用的尺寸：\n        - 宽：224\n        - 高：224\n    3. 使用自行训练的模型，需要手动输入。\n\n在「设定物件追踪模型」积木中可以选择要使用的模型，选择的模型必须和下载到开发板中的板子一致，才能顺利进行辨识。\n\n![](../../assets/images/upload_21d3cc0c20de32a7f4c57215bc3d776e.png)\n\n选择模型方式又会依据使用的平台及建立方式而不同，如下：\n\n- ### 选择模型 ( 线上版 )\n\n    点击「模型」，可以从下拉选单中选择想使用的模型，选单中的模型会根据[Webduino 影像训练平台](https://vision.webduino.io/) 列出可使用的影像分类模型，也可以选择开发板内建的**小怪兽模型( 预设模型)**。\n\n    ![](../../assets/images/upload_dbf7e9a32bb8838a990fa3dd489b3592.jpg)\n\n- ### 选择模型 ( 安装版 )\n\n   在「模型」中手动输入，并将「分类」框选复制后贴上。\n\n   > 因为分类的顺序会影像到是否能正常辨识，为确保顺序正确，建议直接将分类框选复制。\n\n   ![](../../assets/images/upload_ae8f3f322f44afec3e12d1f4c56b5ccc.jpg)\n\n\n- ### 选择模型 ( 新增自订模型 )\n\n   如果是自行将模型烧录进开发板，或是将模型文件放在 SD 卡中，就需要使用「新增自订模型」，如下方步骤：\n\n   1. 点击「新增自订模型」。\n   2. 输入模型名称，按下确定。\n   3. 模型选单中出现自订模型，后方会标示 **( 自订 )**\n   4. 在「分类」填入自订模型的分类顺序\n\n## 开始侦测物件\n\n使用「开始侦测物件」积木来触发影像辨识的进行。\n因为这块积木代表触发 1 次物件追踪，如果需要重复触发，就需要在外层放上「无限循环」积木。\n\n![](../../assets/images/upload_27aa790cf95ff9db5294d9df1b840e8b.png)\n\n## 取得所有物件\n\n当开始辨识时，使用「取得所有物件」积木来取得侦测到的物件。\n积木里面需要填入分类的名称。\n\n![](../../assets/images/upload_41c2c3450b6a2e6766038edb6a535789.png)\n\n使用时可以搭配「变量」积木，让后续程序更方便撰写，如下方程序为：将侦测到的「分类 green」用变量命名为「objGroup」。\n\n![](../../assets/images/upload_c64000adb0b2347ae0d3d749d4e1b51e.png)\n\n\n## 物件信息\n\n当开始辨识时，可以使用「物件信息」积木来显示辨识到的信息，包含：x 座标、y 座标、宽、高、信心度。 ( 信心度最高为 1、最低为 0，若信心度越高，代表侦测错误的可能性越低。)\n\n> 因为影像训练辨识的结果会落在一个区间范围内，若信心度为 90%，代表有 90% 的机率真正的结果会落在这个区间范围内。\n\n![](../../assets/images/upload_88123d415bc525a5ca7d6d5de7660644.png)\n\n\n## 示例：物件追踪内建小怪兽模型\n\n#### 前往 [`示例链接`](https://ai-blockly.webduino.io/?hashid=vzYQQQZjm6#/)\n\n1. 先选择要使用的模型，如示例是使用开发板内建的小怪兽模型「monster ( 预设模型 )」。\n\n    > 如果不使用内建模型，就需要先从 [Webduino 影像训练平台](https://vision.webduino.io/) 下载。\n    > 有关如何训练影像模型，欢迎参考：[三、影像训练](https://bpi-steam.com/WebAI/zh/Train/Train.html)。\n\n2. 使用「设定物件追踪模型」积木，选择使用的模型。\n\n    ![](../../assets/images/upload_ff8eb029745adb0bb1d5102eb1609e8f.png)\n\n\n3. 使用「无限循环」积木，放入「开始侦测物件」积木，代表不断触发物件追踪。\n\n    ![](../../assets/images/upload_5c554f74a0d25541309ca409ed40c63d.png)\n\n4. 使用「变量」积木，将侦测到的所有「分类 green」命名为「greenGroup」。\n\n    ![](../../assets/images/upload_a047c40154e91ae194d63539628e697b.png)\n\n5. 使用「逻辑」积木及「数组长度」积木，当侦测到的「green」数量 ≥ 1，会执行后方程序。\n \n    > 当镜头侦测到的绿色小怪兽数量 ≥ 1，就会执行后方程序。\n\n    ![](../../assets/images/upload_be9fd458ac6eb9dedc9118cc4b80a22c.png)\n\n6. 在执行后方放入「变量」积木，将「数组 greenGroup」的第一项命名为「green」。\n\n    > 因为物件追踪可以同时追踪多个物件，但是只能同时显示单一物件的信息，所以设定为「数组 greenGroup」中的第一个。\n\n    ![](../../assets/images/upload_6943d7d1fc6dde1d9dbdabe0065dc54f.png)\n\n7. 在后方放入「显示文字」积木，显示「变量 green」的信息。\n\n    > 当侦测到绿色小怪兽时，显示「Green Monster!( x 座标,y 座标 )」\n\n    ![](../../assets/images/upload_2e1df523b6b44510fa94d7d4e847c313.png)\n\n8. 将积木组合后，按下**执行**即可在Web:AI上追踪小怪兽，并显示绿色小怪兽的座标位置。\n\n    ![](../../assets/images/upload_b0a73531d00d5e1d4ce5f622ee83929e.png)\n\n9. 另外再重复步骤 4~7，将放入其它 3 只小怪兽的程序，按下**执行**后即可追踪 4 只小怪兽，并显示座标位置。\n\n    ![](../../assets/images/upload_254d4929a77ea282371f5cf89b10a34b.png)\n\n    > 因为程序设计方式不同，所以同时追踪 4 只小怪兽时只会显示绿色小怪兽的信息。"}, "/WebAI/zh/Programming/Advanced/Speech.html": {"title": "语音辨识", "content": "# 语音辨识\n\nWeb:AI 能够将收录到的声音转换成数字信号，经过处理后储存成声音模型，当侦测到声音时，会开始和开发板储存的声音模型比对音色、频率，进而得到辨识结果。\n\n## 录制语音\n\n「录制语音」积木能够通过开发板上的麦克风接收声音，并转换成声音模型储存，开发板中最多可以同时储存 10 个模型并做辨识。\n\n- 录音的时间约 1.5 秒\n- 录制完所生成的声音模型会一直存放在开发板中，除非经过固件更新或擦除，或是录制时采用了相同编号而把旧的模型覆盖掉。\n\n![](../../assets/images/upload_35bfe0c86f4fe079f23d9c4ed1cf72e1.png)\n\n> 使用「录制语音」积木建立声音模型并不会覆盖 **教学示例卡：语音互动** 中的声音模型，可以放心使用！\n>\n> 欢迎参考：[教学示例卡使用教学：语音互动](https://bpi-steam.com/WebAI/zh/Unboxing/Card.html#B.%E8%AF%AD%E9%9F%B3%E4%BA%92%E5%8A%A8)。\n\n## 语音辨识\n\n当开发板的麦克风侦测到声音时，如果符合声音模型，就会自动执行「语音辨识」积木中的内容。\n\n![](../../assets/images/upload_84a175743d91231364e358a130dc5fe9.jpg)\n\n「语音辨识」积木的号码和名称会和「录制语音」积木互相对应。\n\n![](../../assets/images/upload_e61839237fec9517099e535434064a9f.png)\n\n## 语音辨识门槛\n\n因为每个人的音色、频率都不同，所以针对不同应用需要调整辨识门槛才能达到合适的效果。\n而「语音辨识门槛」是语音辨识的精准度，门槛越高代表声音越像才会辨识成功。\n\n> 「语音辨识门槛」积木需要放在「语音辨识」积木之前！\n\n![](../../assets/images/upload_d5a69cbf6a0cff9e9bf5c5c66cb077a5.jpg)\n\n## 示例：声控图案\n\n### 录音\n\n1. 结合「画文字」积木和「录制语音」积木，录音时显示「请说 XX」；录音完成时显示「录音 XX 完成」。\n\n    ![](../../assets/images/upload_874d1de7d96a0bce1df0c6b344ea4c65.png)\n\n2. 做出另一组相同的积木，如下图：\n\n    ![](../../assets/images/upload_278aa7293c58b306ce8359fda8feac76.png)\n\n3. 将 1. 和 2. 的两组积木组合，并用「等待」积木和「清除 LCD 画面积木」隔开，再放入「函数」积木中，将函数命名为「录音」。\n\n    ![](../../assets/images/upload_277fede13002d8fcfe8e205a61494216.jpg)\n\n4. 将函数「录音」放入「开发板」积木中，在下方再放入其它积木，如下图即完成录音程序。\n\n   ![](../../assets/images/upload_2074f0bf5244ad2996764e6ee4f5edd7.jpg)\n\n### 辨识\n\n1. 首先放入「语音辨识门槛」积木，可以根据辨识的状况改变门槛高低。\n\n   ![](../../assets/images/upload_8b9cd5eb6eb2a855a7e8560c7b70c765.jpg)\n\n2. 使用「语音辨识」积木，当听到录制的单词时，会做出后续的程序。\n\n    ![](../../assets/images/upload_608e2765058f13e124cedfcbe1521f1c.jpg)\n\n3. 复制 2. 的积木，并做出另一组积木。\n\n    ![](../../assets/images/upload_4b8c00e2106272522dfaaf87b8811d4f.jpg)\n\n4. 将积木组合，按下**执行**即可在Web:AI上执行语音辨识应用。\n\n![](../../assets/images/upload_6a2118831450e68215943573fe374108.jpg)\n\n![](../../assets/images/upload_c072b055bcc2a28e37dfff15ff464567.gif)\n\n\n<!-- ## 示例：辨识 4 色语音\n\n### 录音\n\n1. 结合「画文字」积木和「录制语音」积木，并用「函数」积木将积木组合。\n\n    ![](../../assets/images/upload_7f575d4dbc80a72fad033bfd904d5938.jpg)\n\n2. 复制出 3 组同样的积木，更改成「蓝色」、「绿色」、「黄色」，做出如下图。\n\n> 记得更改：\n> - 函数名称\n> - 画文字\n> - 语音号码\n> - 语音名称\n\n![](../../assets/images/upload_4304cc17c12b575ab5e505487ce254c2.jpg)\n\n3. 将「函数」积木放入「开发板」积木中，并用「清除 LCD 画面」积木区隔，避免文字被覆盖。\n\n    ![](../../assets/images/upload_87fc803ae4e31489b44b56ea4525dee3.jpg)\n\n### 辨识 -->"}, "/WebAI/zh/Programming/Advanced/Color.html": {"title": "颜色追踪", "content": "# 颜色追踪\n\n驾驶看到红灯就知道要停、看到绿灯知道要前进，这是因为人能够通过眼球、视神经、中枢神经系统感知并判别颜色，进一步根据看到的颜色做出反应，而Web:AI 开发板可以实现相类似的功能。\n\n我们可以使用[Webduino 选色器](https://ai-blockly.webduino.io/pickerLABColor.html) 取出拍摄到的指定颜色，告诉程序侦测到此颜色时，需要做出什么样的互动，让Web:AI 能够像驾驶一样对不同颜色做出反应。\n\n## 照相画面\n\n「拍摄照片」积木可以使用镜头拍摄一次画面，配合「无限循环」积木就可以达成相机取景器的效果。\n\n![](../../assets/images/upload_e5f0e28421cf299a02c56d80badc8485.png)\n\n另外也可以使用「变量」积木替拍摄照片命名，通过命名来做出更多变化。\n\n![](../../assets/images/upload_2630972dadc38129eb09e64e7d262658.png)\n\n> 以上两种积木组合方式执行后会达到相同的结果，差别在于若是要做出更多应用变化，就需要搭配「变量」积木的命名。\n\n### 画面上画文字\n\nWeb:AI 能够在屏幕画面或图片上显示文字，这时就需要搭配「图片上画文字」积木。\n\n> 请特别注意，「图片上画文字」积木需要放在「LCD 显示图片」积木之前！\n\n![](../../assets/images/upload_d4fc3f4eca1a16281c9aade6bb111715.png)\n\n## 侦测图片颜色信息\n\n「侦测图片颜色信息」积木可以输入指定的 LAB 色码，当 Web:AI 镜头拍摄到颜色时，就会将颜色区块框起来。\n\n> 有关LAB 色彩空间的原理，请参考：[CIELAB色彩空间维基百科](https://zh.wikipedia.org/wiki/CIELAB%E8%89%B2%E5%BD%A9%E7%A9%BA %E9%97%B4)。\n\n![](../../assets/images/upload_61b20aeccd46f1fe52779a90f8f9d647.png)\n\n## Webduino 选色器\n\n### A. 进入 Webduino 选色器\n\n对着「侦测图片颜色信息」积木按下右键，点击「小工具」即可进入 [Webduino 选色器](https://ai-blockly-staging.webduino.io/pickerLABColor.html)。\n\n![](../../assets/images/upload_9077f489b8b1b0a15a75af2fe6e84cd3.png)\n\n### B. 使用方式\n\nWebduino 选色器的介面及使用方式如下：\n\n1. 摄像头画面：左侧画面为电脑摄像头拍摄到的画面，将被取色的物品放置在电脑摄像头前方拍摄。 ( 记得开启电脑摄像头权限！ )\n\n2. 选取颜色：右侧画面为选取到的颜色。\n    - 白色：选取的颜色\n    - 黑色：被过滤掉的其他颜色\n\n3. 调色拉杆：调动 6 个拉杆，让 \" 选取颜色 \" 中仅剩选取的色块是白色。 ( 拉杆分别控制：亮度、红绿、蓝黄 )\n\n4. 贴上色码：当颜色选取完成后，下方色码复制，贴到「侦测图片颜色信息」积木，即可完成颜色追踪设定。\n\n    ![](../../assets/images/upload_a015678533396a35f35660849309191f.png)\n\n5. 查询色码：未来需要查询特定色码是何种颜色时，可以将色码贴在 \" 查询色码 \" 栏位中，按下送出即可查看 \" 选取颜色 \"。\n\n![](../../assets/images/upload_4a10bebb64d2c24232564e6b91ee8f02.png)\n\n## 颜色信息\n\n「颜色信息」积木可以针对侦测的颜色，回报色块的信息，包含 x、y 座标、像素数量 ( 面积 )、旋转角度。\n\n![](../../assets/images/upload_84cfa79bb468cf2f222ac47638c45c60.png)\n\n## 示例：追踪红色\n\n1. 先使用「变量」积木将拍摄照片命名为「画面」，做出镜头画面。\n\n    ![](../../assets/images/upload_f345072205d970e61952b802116f042a.png)\n\n2. 取出「侦测图片颜色信息」积木，按下右键，点选选单中的「小工具」，进入[Webduino 选色器](https://ai-blockly.webduino.io/pickerLABColor.html) 。\n\n   ![](../../assets/images/upload_43053bf19337e8d198e460ae27143bd5.jpg)\n\n3. 使用选色器选取颜色，再将色码贴到「侦测图片颜色信息」积木。\n\n    ![](../../assets/images/upload_2f8e15572550d5f43c0416f9159f09f1.png)\n\n    ![](../../assets/images/upload_3d56af3a2fc819eca79074beb9fb3571.jpg)\n\n4. 完成如下图程序，执行后会将侦测到的红色色块用方框框起。\n\n    ![](../../assets/images/upload_206b75c80eed346c430a3ae416bfeaf7.png)\n\n5. 为了让程序多一些互动，我们再设计让开发板侦测到红色时会告知「红色」。\n\n> 设定 \" 像素素量 > 10 \" 是为了减少背景颜色的干扰，避免屏幕不断显示「红色」。\n\n![](../../assets/images/upload_d30129fcd502c93120c41870009539ff.png)"}}