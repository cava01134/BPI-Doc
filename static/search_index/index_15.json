{"/Leaf_S3_doc/en/Arduino/Basic.html": {"title": "Use of onboard resources", "content": "# Use of onboard resources\n\nThis chapter mainly describes the basic usage of the peripherals of the Leaf-S3 main control board through some sample projects. Through the following projects, you can modify and complete your own projects.\nThe Leaf-S3 peripherals mainly include: UART, I2C, SPI, ADC, PWM, DAC, etc.\n\n## Preparation before starting\n\nThe typec on the BPI-Leaf-S3 development board uses the native USB interface of ESP32-S3 instead of the traditional USB to TLL chip.\n\nIn order for your development board to download programs correctly, you need to set the BPI-Leaf-S3 to download mode, there are two methods:\n\n- Connect to the computer via USB, press the BOOT button, then press the Reset button and release, and finally release the BOOT button.\n\n- In the state of disconnecting all power supplies, press and hold the BOOT button, then plug the development board into the computer, and finally release the BOOT button.\n\nAt this time, you can see more than one COM port in the device manager\n\n![](../assets/images/Device_manager.jpg)\n\nSelect this port in the IDE\n\n![](../assets/images/Device_manager_1.jpg)\n\n## Project 1 Serial port experiment\n\nIn the very first chapter, we uploaded a Blink program to test the LED status lights on the board. Now, we use the UART serial port and print the timing data every second.\n\n### Required components\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### Hardware connection\n\nNo other sensors are required for this project, so just connect the Leaf-S3 to a computer via USB and it will work.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it.\n\ncode show as below:  \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\nvoid setup()\n{\n  Serial.begin(115200); //Set serial communication baud rate\n}\nvoid loop()\n{\n  static unsigned long i = 0; //define variable i\n  Serial.println(i++); //output i after adding one\n  delay(1000); // delay 1 second\n}\n\n</code></pre>\n</details>\n\nAfter the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the Leaf-S3 motherboard. After the upload is complete, you need to press the reset button so that the code can run normally\n\n### Experimental phenomena\n\nAfter completing the upload in the previous steps, open the serial monitor that comes with the Arduino IDE, and you can see the following print information:\n\n![](../assets/images/Lesson1-1.png)\n\n## Project 2 PWM (breathing light)\n\nBreathing light, that is, let Leaf-S3 drive the LED light through PWM to realize the brightness gradient of the LED, which looks like it is breathing. For an explanation of PWM, please read the Knowledge Extension section.\n\n### Required components\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\nLED X 1 (recommended to connect a resistor in series to limit current)\n\n![](../assets/images/led.png)\n\n### Hardware connection\n\nJust connect the LED to GPIO13 of Leaf-S3, the long one is connected to GPIO13, and the short one is connected to GND\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it.\ncode show as below: \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n#define LED_CHANNEL_0 0 //Set channel 0\n#define LED_TIMER_13_BIT 13 //Set 13-bit timer\n#define LED_BASE_FREQ 5000 //Set the timer frequency bit to 5000Hz\n#define LED_PIN 13 //Set LED light\n\nint brightness = 0; // LED brightness\nint fadeAmount = 1; // number of LEDs\n \n//Set the brightness of the led light\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255) {\n  //calculate duty cycle\n  uint32_t duty = (LED_BASE_FREQ / valueMax) * min(value, valueMax);\n  //set duty cycle\n  ledcWrite(LED_CHANNEL_0, duty);\n}\nvoid setup() {\n  ledcSetup(LED_CHANNEL_0, LED_BASE_FREQ, LED_TIMER_13_BIT); ledcAttachPin(LED_PIN, LED_CHANNEL_0);\n}\nvoid loop() {\n  ledcAnalogWrite(brightness); brightness += fadeAmount;\n \n  if (brightness <= 0 || brightness >= 255) {\n       fadeAmount = -fadeAmount;\n  }\n  delay(30);\n}\n\n</code></pre>\n</details>\n\nAfter typing, click the \"Compile\" button to check the code for errors. After confirming that there are no errors, you can start uploading, click the \"Upload\" button . The IDE will send the code to the Leaf-S3 motherboard. After the upload is complete, you can see the LED light next to the Type-C start to \"breathe\"!\nNow let's review the code and hardware to see how it works.\n\n### Knowledge learning\n\nWhat is a PWM control signal?\n\nPWM (pulse-width modulation) pulse width modulation, the MCU (microcontroller) controls the on-off of the switching device, so that the output terminal gets a series of pulses of equal amplitude, and these pulses are used to replace the sine wave or the required waveform. As shown below:\n\n![](../assets/images/Lesson2-1.jpg)\n\nAmong them, tON is the high-level duration, tPWM is the period of the PWM wave, tPWM-tON is the low-level duration, and the duty cycle refers to the proportion of the high-level duration to the entire cycle, namely D=ton/tPWM.\n\n### Code Analysis\n\nThe PWM of Leaf-S3 is much more advanced than the ordinary Arduino UNO. The analogWrite function cannot be simply used to drive the PWM, but the timer function and related frequency parameters need to be set to work.\n\n````\n#define LEDC_CHANNEL_0 0\n````\n\nDefines the channel used by the timer. Leaf-S3 has a total of 16 channels, and channel 0 is used here.\n\n````\n#define LEDC_TIMER_13_BIT 13\n````\n\nThe timer is defined as a 13-bit timer, that is, the maximum count of the timer is 2 to the 13th power.\n\n````\n#define LEDC_BASE_FREQ 5000\n````\n\nThis is the frequency at which the timer is set, in Hz. The next brightness and fadeAmount parameters represent the duty cycle of the PWM and the value for each change, respectively.\n\n````\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255)\n````\n\nThis function calculates the PWM duty cycle and sets the PWM duty cycle, similar to Arduino's analogWrite function. As you can see, the maximum value of the passed parameter is 255, which is for compatibility with analogWrite.\n\n````\nledcSetup(LEDC_CHANNEL_0, LEDC_BASE_FREQ, LEDC_TIMER_13_BIT);\nledcAttachPin(LED_PIN, LEDC_CHANNEL_0);\n````\n\nThese two functions are Leaf-S3 timer setting functions. The function prototype and principle are not described here. If you are interested, you can look at the underlying source code (source address: C:\\Users\\“your-PC”\\AppData\\Local\\Arduino15 \\packages\\esp32\\ hardware\\ adafruit_metro_esp32s2 \\0.0.3\\libraries\\ESP32\\), you only need to know how to use these functions to set the relevant timer.\n\nAbout what is a PWM signal, it has been explained before, and it will not be explained here.\n\n>Note: Any pin of Leaf-S3 can be configured as PWM output, you can try to modify the code to complete your project.\n\n## Project 3 ADC\n\nADC (analog-to-digital converter or A/D converter) refers to converting an analog signal into a digital signal. The ADC of Leaf-S3 is 13-bit, the maximum output value is 8191, while the Arduino UNO is 10-bit, and the maximum output value is 1023. Therefore, the accuracy is higher than that of Arduino UNO, and the conversion rate is faster, and in use Compatible with Arduino analogRead function, you can read it directly.\n\n### Required components\n\nAnalog angle sensor X 1\n\n![](../assets/images/Lesson3-1.png)\n\nBreadboard X 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### Hardware connection\n\n Plug the potentiometer to the Leaf-S3 motherboard, and then plug the analog angle sensor to IO2 (IO2 is used in the experiment). After the components are connected, use the USB cable to connect the Leaf-S3 and the computer.\n\n ### Enter code\n\n Open the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. code show as below: \n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n}\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  Serial.println(analogRead(2));\n  delay(100);\n}\n\n</code></pre>\n</details>\n\n After the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the Leaf-S3 motherboard. After the upload is complete, open the serial monitor of the Arduino IDE, rotate the analog angle sensor, and you can see the value changes in the serial monitor, as shown in the following figure:\n\n \n![](../assets/images/Lesson3-3.png)\n\n### Code Analysis\n\nSince the ADC of Leaf-S3 is fully compatible with Arduino, the analogRead function will not be explained too much here.\n \nNote: If you are not particularly familiar with the basic functions of Arduino, you can [click the link](https://www.arduino.cc/en/Tutorial/BuiltInExamples) to learn.\n\n## Project 4 I2C\n\nThe I2C of Leaf-S3 can be configured to any I/O port, and you can configure it by passing relevant parameters. For the convenience of use, we have configured I2C by default, which is fully compatible with Arduino in use. The default configuration pins can be viewed in Chapter 1 Introduction. This project is based on I2C default configuration to drive OLED display.\n\nrequired components\n\nI2C OLED-12864 Display X 1\n\n![](../assets/images/Lesson4-1.png)\n\nBreadboardX 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### Hardware connection\n\nPlug the Leaf-S3 motherboard into the breadboard, then plug the OLED display into the I2C port. (SDA is 33, SCL is 34) After the components are connected, use a USB cable to connect the Leaf-S3 to the computer.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. code show as below:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n#include <Wire.h>\n   int UG2864Address = 0x3C;//OLED UG2864 device 7-bit address\n \nprog_char F8X16[][16] PROGMEM =\n{\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0\n  0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1\n  0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//\"2\n  0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3\n  0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4\n  0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5\n  0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6\n  0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7\n  0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8\n  0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9\n  0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10\n  0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14\n  0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016\n  0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117\n  0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218\n  0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319\n  0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420\n  0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521\n  0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622\n  0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723\n  0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925\n  0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26\n  0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27\n  0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28\n  0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29\n  0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30\n  0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31\n  0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32\n  0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33\n  0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34\n  0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35\n  0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38\n  0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40\n  0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41\n  0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42\n  0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43\n  0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44\n  0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45\n  0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47\n  0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49\n  0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50\n  0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51\n  0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53\n  0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54\n  0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55\n  0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56\n  0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57\n  0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58\n  0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59\n  0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\\60\n  0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61\n  0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63\n  0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65\n  0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66\n  0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67\n  0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69\n  0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71\n  0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72\n  0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73\n  0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74\n  0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75\n  0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76\n  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77\n  0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79\n  0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80\n  0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81\n  0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83\n  0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84\n  0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86\n  0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87\n  0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89\n  0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90\n  0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91\n  0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92\n  0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93\n  0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94\n};\n \n \nchar ch_buf[17]={0};\nint RES = 6;//Gadgeteer PIN6\nint DC = 7;//Gadgeteer PIN3\n \nvoid Writec(unsigned char COM)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x00);\n  Wire.write(COM);\n  Wire.endTransmission();\n}\n \nvoid Writed(unsigned char DATA)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x40);\n  Wire.write(DATA);\n  Wire.endTransmission();\n}\n \nvoid SSD1306()\n{\n  Writec(0XAE);//display off\n  Writec(0X00);//set lower column address\n  Writec(0X10);//set higher column address\n  Writec(0X40);//set display start line\n  Writec(0XB0);//set page address\n  Writec(0X81);//set contract control\n  Writec(0XCF);// VCC Generated by Internal DC/DC Circuit\n  Writec(0XA0);//set segment remap  column address 127 is mapped to SEG0\n  Writec(0XA6);//normal / reverse   normal display\n  Writec(0XA8);//multiplex ratio\n  Writec(0X3F);//1/64\n  Writec(0XC0);//Com scan direction remapped mode. Scan from COM[N-1] to COM0\n  Writec(0XD3);//set display offset\n  Writec(0X00);\n  Writec(0XD5);//set osc division\n  Writec(0X80);\n  Writec(0XD9);//set pre-charge period\n  Writec(0X11);\n  Writec(0XDa);//set COM pins\n  Writec(0X12);\n  Writec(0X8d);/*set charge pump enable*/\n  Writec(0X14);\n  Writec(0Xdb);//Set VcomH\n  Writec(0X20);\n  Writec(0XAF);//display ON\n}\nvoid fill(unsigned char dat)\n{\n  unsigned char i,j;\n  \n  Writec(0x00);//set lower column address\n  Writec(0x10);//set higher column address\n  Writec(0xB0);//set page address\n  \n  for(j=0;j<8;j++)\n  {\n    Writec(0xB0+j);//set page address\n    Writec(0x00);//set lower column address\n    Writec(0x10);//set higher column address\n    for(i=0;i<128;i++)\n    {\n      Writed(dat);\n    }\n  }\n}\n \nvoid show_string(unsigned char x,unsigned char y,char *s)\n{\n  unsigned char i,j,lower,higher;\n  char *t;\n  t=s;\n  lower=y%16;\n  higher=y/16;\n  if((x>3) || (y>120))\n    return;\n  Writec(0xB0+x*2);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  for(j=0;*s!='\\0';j++)\n  {\n    \n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n  Writec(0xB0+x*2+1);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  s=t;\n  for(j=0;*s!='\\0';j++)\n  {\n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i+8]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n}\n \n \n \nvoid oled_init(void)\n{\n  pinMode(RES,OUTPUT);//RES\n  pinMode(DC,OUTPUT);//D/C#\n  \n  digitalWrite(DC,LOW);\n  Wire.begin();\n  digitalWrite(RES,HIGH);   delay(100);\n  digitalWrite(RES,LOW);    delay(100);\n  digitalWrite(RES,HIGH);   delay(100);\n  SSD1306();\n  fill(0x00);\n}\n \nvoid setup() {\n  oled_init();\n}\n \n \nvoid loop()\n{\n      fill(0x00);\n      show_string(0,12,\"BananaPi\");\n \n      show_string(2,12,\"banana-pi.org\");\n      while(1);\n}\n\n</code></pre>\n</details>\nAfter the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the Leaf-S3 motherboard. After the upload is complete, the OLED display will display the words \"BananaPi banana-pi.org\".\n\n### Code Analysis\n\nCompared with the previous projects, the code of this project is more, mainly based on the direct drive of the bottom register of the OLED display based on I2C communication.\n\n````\nvoid Writec(unsigned char COM)\n````\n\nSet the register function, set the OLED display through I2C, the I2C usage method is fully compatible with Arduino.\n\n````\nvoid Written(unsigned char DATA)\n````\n\nWrite data function, I2C usage is fully compatible with Arduino.\n\n>Note: Leaf-S3's I2C is fully compatible with Arduino, mainly by calling the Wire library file.\n\n## Project 5 SPI\n\nIn many sensors, SPI communication is used, because the SPI communication rate is faster than I2C, and there is no disadvantage of address conflict. SPI is a high-speed, full-duplex, synchronous communication bus, and Leaf-S3's SPI can be configured to all I/Os, and you can read the underlying code for use (not recommended for beginners). For a better user experience, Leaf-S3 is configured with IO35, IO36, and IO37 as SPI ports by default, and is fully compatible with Arduino in use. This project uses Leaf-S3 to read the data of the BME280 temperature and humidity sensor through SPI. The BME280 library file is used in the example. For the SPI driver, you can read the BEM280 library file, [click the link](https://github.com/ DFRobot/DFRobot_BME280) to download the BME280 library file.\n\n### Required components\n\nBME280 Temperature and Humidity Sensor X 1\n\n![](../assets/images/Lesson5-1.png)\n\n>Note: BME280 sensor itself supports I2C and SPI communication, here we use SPI communication.\n\nBreadboard X 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. (This program requires the DFRobot_BME280 library, which needs to be downloaded at [GitHub](https://github.com/DFRobot/DFRobot_BME280), and unzip it to the Arduino\\ Library folder) The code is as follows:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n/*!\n * read_data_spi.ino\n *\n * Download this demo to test read data from bme280, connect sensor through spi interface\n *Connect cs pin to io 2\n * Data will print on your serial monitor\n *\n * Copyright [DFRobot](http://www.dfrobot.com), 2016\n * Copyright GNU Lesser General Public License\n *\n * version V1.0\n * date 12/03/2019\n */\n\n#include \"DFRobot_BME280.h\"\n#include \"Wire.h\"\n\ntypedef DFRobot_BME280_SPI BME; // ******** use abbreviations instead of full names ********\n\n#define PIN_CS 2\n\nBME bme(&SPI, PIN_CS); // select TwoWire peripheral and set cs pin id\n\n#define SEA_LEVEL_PRESSURE 1015.0f\n\n// show last sensor operate status\nvoid printLastOperateStatus(BME::eStatus_t eStatus)\n{\n  switch(eStatus) {\n  case BME::eStatusOK: Serial.println(\"everything ok\"); break;\n  case BME::eStatusErr: Serial.println(\"unknow error\"); break;\n  case BME::eStatusErrDeviceNotDetected: Serial.println(\"device not detected\"); break;\n  case BME::eStatusErrParameter: Serial.println(\"parameter error\"); break;\n  default: Serial.println(\"unknow status\"); break;\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  bme.reset();\n  Serial.println(\"bme read data test\");\n  while(bme.begin() != BME::eStatusOK) {\n    Serial.println(\"bme begin faild\");\n    printLastOperateStatus(bme.lastOperateStatus);\n    delay(2000);\n  }\n  Serial.println(\"bme begin success\");\n  delay(100);\n}\n\nvoid loop()\n{\n  float temp = bme.getTemperature();\n  uint32_t press = bme.getPressure();\n  float alti = bme.calAltitude(SEA_LEVEL_PRESSURE, press);\n  float humi = bme.getHumidity();\n\n  Serial.println();\n  Serial.println(\"======== start print =======\");\n  Serial.print(\"temperature (unit Celsius): \"); Serial.println(temp);\n  Serial.print(\"pressure (unit pa): \"); Serial.println(press);\n  Serial.print(\"altitude (unit meter): \"); Serial.println(alti);\n  Serial.print(\"humidity (unit percent): \"); Serial.println(humi);\n  Serial.println(\"======== end print =======\");\n\n  delay(1000);\n}\n\n\n</code></pre>\n</details>\n\n After the input is complete, click \"Compile\" to check the code for errors. After making sure there are no errors, you can start uploading. After clicking \"Upload\", the IDE will send the code to the Leaf-S3 motherboard. Open the Arduino serial monitor, you can see the print information as follows:\n\n![](../assets/images/Lesson5-2.png)\n\n### Code Analysis\n\n The purpose is to use the BME280 library file, and the SPI bottom layer is not operated in the Item-5.ino file. However, the SPI of the Leaf ESP32-S3 is fully compatible with Arduino.\n\n## Item Six WS2812\n\n Leaf-S3 integrates an RGB color light with model number WS2812. This project is an experiment to light up the RGB lights of Leaf-S3.\n\n### Required components\n\nLeaf-S3 Motherboard X 1\n\n![](../assets/images/Leaf-S3.png)\n\n> Note: No other sensors need to be connected for this project.\n\n### Enter code\n\nOpen the Arduino IDE. Although it is possible to copy the code directly, we recommend that you enter the code manually to familiarize yourself with it. (This program requires the Adafruit_NeoPixel library, which needs to be downloaded from [GitHub](https:/ /github.com/adafruit/Adafruit_NeoPixel) and unzipped to the Arduino\\ Library folder) The code is as follows:\n\n<details>\n<summary>Expand to view</summary>\n\n<pre><code>\n// NeoPixel Ring simple sketch (c) 2013 Shae Erisson\n// Released under the GPLv3 license to match the rest of the\n// Adafruit NeoPixel library\n\n#include <Adafruit_NeoPixel.h>\n#ifdef __AVR__\n #include <avr/power.h> // Required for 16 MHz Adafruit Trinket\n#endif\n\n// Which pin on the Arduino is connected to the NeoPixels?\n#define PIN 18 // On Trinket or Gemma, suggest changing this to 1\n\n// How many NeoPixels are attached to the Arduino?\n#define NUMPIXELS 1 // Popular NeoPixel ring size\n\n// When setting up the NeoPixel library, we tell it how many pixels,\n// and which pin to use to send signals. Note that for older NeoPixel\n// strips you might need to change the third parameter -- see the\n// strandtest example for more info"}, "/Leaf_S3_doc/en/Arduino/Environment.html": {"title": "Installing", "content": "# Installing\n\nThis article will guide you through installing Arduino support for the Leaf-S3.\n\n## Install support using Arduino IDE\n\n![](../assets/images/logo_arduino.png)\n\nHere's how to install the Arduino-ESP32 directly from the Arduino IDE.\n\n> Note: For an overview of SoC support, see the table in [Supported Soc](https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html#supported-soc-s), your There you can find out whether a particular chip is in a stable or development release.\n\n- Link to stable version: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n\n- Development version link: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json\n\n> As of Arduino IDE version 1.6.4, Arduino allows the installation of third-party platform packages using the Boards Manager. We have packages for Windows, macOS and Linux.\n\nTo start the installation process with Boards Managaer, follow these steps:\n\n- Install current upstream Arduino IDE version 1.8 or higher. The current version is at the arduino.cc website.\n\n- Start Arduino and open the File>Preferences window and click on the location shown.\n\n![](../assets/images/install_guide_preferences.png)\n\n- Enter one of the above publish links after Additional Board Manager URLs. You can add multiple URLs, one per line.\n\n![](../assets/images/install_guide_boards_manager_url.png)\n\nOpen the Board Manager from the Tools > Boards menu and install the esp32 platform.\n\n![](../assets/images/install_guide_boards_manager_esp32.png)\n\nAfter restarting the arduino IDE, you can see more ESP32 options, and you can configure it as shown in the figure.\n\n![](../assets/images/Board_chose.jpg)"}, "/Leaf_S3_doc/en/index.html": {"title": "【 BPI-Leaf-S3 Development Board 】", "content": "# 【 BPI-Leaf-S3 Development Board 】\n\n## introduce\n\n![](assets/images/BPI-Leaf-S3_banner.jpg)\n\nThe Banana Pi Leaf series is a low-power microcontroller development board designed for the Internet of Things.\n\nBPI-Leaf-S3 has an onboard ESP32-S3 chip, supports 2.4 GHz Wi-Fi and Bluetooth® LE dual-mode wireless communication, is compatible with low-power hardware design, and consumes only 10uA in deep sleep mode .\n\nIt supports two power supply modes: USB and external 3.7V lithium battery, which can realize automatic power switching function under dual power supply, and supports USB charging mode. Small size, convenient interface, easy to use, and can be directly applied to low-power IoT projects.\n\nThe BPI-Leaf-S3 development board supports ESP-IDF, Arduino, MicroPython and other methods for programming and development in terms of software.\n\nAll IO pins corresponding to the chip are marked on the BPI-Leaf-S3 development board, and the order of the IO pins is consistent with the Espressif ESP32-S3-DevKitC-1 development board. Developers can support DevKitC-1 according to actual needs. The peripherals are added to the BPI-Leaf-S3, and the development board can also be plugged into the breadboard.\n\n## Programming with MicroPython\n\nRegardless of the programmer is a beginner or not, MicroPython is considered to be less difficult to develop than other MCU programming languages.\n\nIts code is easy to understand compared to other programming languages, and it has various resources accumulated over the years by the open source community.\n\nJust like Python, it has strong vitality and application value.\n\nBy uploading the MicroPython firmware, you can use the Python language to program in the development board.\n\n![](assets/images/Mircopython.png)\n\n## Programming with Arduino\n\nProvides software tools and best examples to get started with Arduino, lowering the barriers to entry into professional ESP32 embedded development.\n\n![](assets/images/Arduino_logo_1200x350.png)\n\n>Arduino will not explain too much basic content, please have the language development foundation of C/C++.\n\n## Information and resources\n\n- [WIKI](https://wiki.banana-pi.org/BPI-Leaf-S3)\n\n- [GitHub: BPI-Leaf-S3 Development Board Schematic PDF](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/blob/main/sch/BPI-Leaf-S3-Chip- V0.1A.pdf)\n\n- [ESP32-S3 Specifications](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/blob/main/Example/Arduino)\n\n- [ESP32-S3 Technical Reference Manual](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)\n\n## Sample purchase\n\n- [Official AliExpress](https://www.aliexpress.com/item/1005004428945296.html?spm=5261.ProductManageOnline.0.0.48af4edfYbyEoI)\n\n- [Official Taobao](https://item.taobao.com/item.htm?spm=a2126o.success.0.0.29034831FGnLQW&id=677287234553)\n\n- OEM&OEM customized service: sales@banana-pi.com"}, "/Leaf_S3_doc/en/Unboxing/Introduction.html": {"title": "【Introduction to development board】", "content": "# 【Introduction to development board】\n\nThe BPI-Leaf-S3 has an onboard ESP32-S3 chip that supports 2.4 GHz Wi-Fi and Bluetooth® LE dual-mode wireless communication. The board supports two power supply modes: USB and external 3.7V lithium battery, which can realize automatic power switching function under dual power supply, and support USB charging mode. Small size, convenient interface, easy to use, and can be directly applied to low-power IoT projects.\n\nThe BPI-Leaf-S3 development board supports ESP-IDF, Arduino, MicroPython and other methods for programming and development in terms of software.\n\nAll IO pins corresponding to the chip are marked on the BPI-Leaf-S3 development board, and the order of the IO pins is consistent with the Espressif ESP32-S3-DevKitC-1 development board. Developers can support DevKitC-1 according to actual needs. The peripherals are added to the BPI-Leaf-S3, and the development board can also be plugged into the breadboard.\n\n## key features\n\n- ESP32-S3, Xtensa® 32 bit LX7\n- On-Chip Peripherals PSRAM, FLASH\n- Ultra-low power 10uA\n- 2.4G WIFI, Bluetooth 5, Bluetooth mesh\n- GPIO , ADC , TOUCH , PWM , I2C , SPI , RMT , I2S , UART , LCD, CAMERA , USB , JTAG\n- 1*4pin I2C connector\n- 1*USB Type-C\n- 1 * 2pin battery connector, support charging\n- 1 * Full Color LED\n\n## hardware\n\n### Interface diagram\n\n![](../assets/images/Leaf-S3_board.png)\n\n### Hardware Specifications\n\n<table>\n   <tr>\n      <td>BPI-Leaf-S3 Spec Sheet</td>\n   </tr>\n   <tr>\n      <td>SoC main control chip</td>\n      <td>ESP32-S3, Xtensa® 32-bit LX7 Dual-Core Processor</td>\n   </tr>\n   <tr>\n      <td>Frequency</td>\n      <td>240MHz MAX</td>\n   </tr>\n   <tr>\n      <td>Operating Temperature</td>\n      <td>-40℃~+85℃</td>\n   </tr>\n   <tr>\n      <td>On-Chip ROM</td>\n      <td>384KB</td>\n   </tr>\n   <tr>\n      <td>On-chip SRAM</td>\n      <td>320KB</td>\n   </tr>\n   <tr>\n      <td>Off-chip FLASH ROM</td>\n      <td>8MB</td>\n   </tr>\n   <tr>\n      <td>On-Chip Peripherals PSRAM</td>\n      <td>2MB</td>\n   </tr>\n   <tr>\n      <td>WIFI</td>\n      <td>IEEE 802.11 b/g/n, 2.4Ghz band, 150Mbps</td>\n   </tr>\n   <tr>\n      <td>Bluetooth</td>\n      <td>Bluetooth 5, Bluetooth mesh</td>\n   </tr>\n   <tr>\n      <td>GPIO</td>\n      <td>BPI-Leaf-S3 has brought out 36 available GPIOs</td>\n   </tr>\n   <tr>\n      <td>ADC</td>\n      <td>2 × 12-bit SAR ADC supporting 20 analog channel inputs</td>\n   </tr>\n   <tr>\n      <td>TOUCH Capacitive Touch Sensor</td>\n      <td>14</td>\n   </tr>\n   <tr>\n      <td>SPI</td>\n      <td>4</td>\n   </tr>\n   <tr>\n      <td>I2C</td>\n      <td>2, supports master or slave mode</td>\n   </tr>\n   <tr>\n      <td>I2S</td>\n      <td>2, serial stereo data input and output</td>\n   </tr>\n   <tr>\n      <td>LCD</td>\n      <td>1, supports 8-bit ~16-bit parallel RGB, I8080, MOTO6800 interface</td>\n   </tr>\n   <tr>\n      <td>CAMERA</td>\n      <td>1, supports 8-bit ~16-bit DVP image sensor interface</td>\n   </tr>\n   <tr>\n      <td>UART</td>\n      <td>3, supports asynchronous communication (RS232 and RS485) and IrDA</td>\n   </tr>\n   <tr>\n      <td>PWM</td>\n      <td>8 independent channels, 14-bit precision</td>\n   </tr>\n   <tr>\n      <td>MCPWM</td>\n      <td>2</td>\n   </tr>\n   <tr>\n      <td>USB</td>\n      <td>1 × Full Speed ​​USB 2.0 OTG, Type-C Female</td>\n   </tr>\n   <tr>\n      <td>USB Serial/JTAG Controller</td>\n      <td>1, USB Full Speed ​​Standard, CDC-ACM, JTAG</td>\n   </tr>\n   <tr>\n      <td>Temperature Sensor</td>\n      <td>1, measuring from –20 °C to 110 °C, for monitoring chip internal temperature</td>\n   </tr>\n   <tr>\n      <td>SD/MMC</td>\n      <td>1 × SDIO host interface with 2 card slots, supports SD card 3.0 and 3.01, SDIO 3.0, CE-ATA 1.1, MMC 4.41, eMMC 4.5 and 4.51</td>\n   </tr>\n   <tr>\n      <td>TWAI® Controller</td>\n      <td>1, compatible with ISO11898-1 (CAN Specification 2.0)</td>\n   </tr>\n   <tr>\n      <td>Generic DMA Controller</td>\n      <td>5 receive channels and 5 transmit channels</td>\n   </tr>\n   <tr>\n      <td>RMT</td>\n      <td>4 channels transmit, 4 channels receive, shared 384 x 32-bit RAM</td>\n   </tr>\n   <tr>\n      <td>Pulse Counter</td>\n      <td>4 pulse count controllers (units), each with 2 independent channels</td>\n   </tr>\n   <tr>\n      <td>Timer</td>\n      <td>4 × 54-bit general-purpose timers, 16-bit clock prescaler, 1 × 52-bit system timer, 3 × watchdog timers</td>\n   </tr>\n   <tr>\n      <td>External Crystal</td>\n      <td>40Mhz</td>\n   </tr>\n   <tr>\n      <td>RTC and Low Power Management</td>\n      <td>Power Management Unit (PMU) + Ultra Low Power Coprocessor (ULP)</td>\n   </tr>\n   <tr>\n      <td>Low Power Current</td>\n      <td>10uA</td>\n   </tr>\n   <tr>\n      <td>Operating Voltage</td>\n      <td>3.3V</td>\n   </tr>\n   <tr>\n      <td>Input Voltage</td>\n      <td>3.3V~5.5V</td>\n   </tr>\n   <tr>\n      <td>Maximum Discharge Current</td>\n      <td>2A@3.3V DC/DC</td>\n   </tr>\n   <tr>\n      <td>USB charging</td>\n      <td>Support</td>\n   </tr>\n   <tr>\n      <td>Maximum Charge Current</td>\n      <td>500mA</td>\n   </tr>\n   <tr>\n      <td>Controllable full color LED</td>\n      <td>1</td>\n   </tr>\n</table>\n\n\n### Hardware Dimensions\n\n\n![](../assets/images/Leaf-S3_board_dimension.png)\n\n<table>\n   <tr>\n      <td>BPI-Leaf-S3 Size Chart</td>\n   </tr>\n   <tr>\n      <td>Pin spacing</td>\n      <td>2.54mm</td>\n   </tr>\n   <tr>\n      <td>Mounting Hole Spacing</td>\n      <td>23mm/ 62.25mm</td>\n   </tr>\n   <tr>\n      <td>Mounting Hole Dimensions</td>\n      <td>Inner Diameter 2mm/Outer Diameter 3mm</td>\n   </tr>\n   <tr>\n      <td>Motherboard Dimensions</td>\n      <td>26 × 65.25(mm)/1.02 x 2.57(inches)</td>\n   </tr>\n   <tr>\n      <td>plate thickness</td>\n      <td>1.2mm</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\nThe pin spacing is compatible with universal boards (hole boards, dot matrix boards) and breadboards, which is convenient for debugging applications.\n\n## Information and resources\n\n- [GitHub: BPI-Leaf-S3 Development Board Schematic PDF](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/blob/main/sch/BPI-Leaf-S3-Chip- V0.1A.pdf)\n\n- [ESP32-S3 Specifications](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 Technical Reference Manual](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)"}, "/Leaf_S3_doc/en/Unboxing/Gettingstart.html": {"title": "Hello World", "content": "# Hello World\n\nWe can start by outputting a \"Hello World\" text as the first step in understanding and learning MicroPython.\n\n> The operations described in this article are based on Thonny IDE. You need to complete the configuration of Thonny IDE and establish a connection with the development board. [The construction of the Thonny IDE runtime environment can be referred to here](../Programming/Environment.html).\n\n## Using REPL\n\n**REPL** is the abbreviation of **Read-Eval-Print-Loop**, which is translated as **read-evaluation-output-loop**.\n\nWe can understand what it means by practical operation.\n\nConnect the development board with the MicroPython firmware installed to the computer, run the Thonny IDE and configure it correctly, the following text will appear in the Shell window:\n\n````\nMicroPython v1.17 on 2022-01-09; ESP32S3 module with ESP32S3\nType \"help()\" for more information.\n>>>\n````\n\nPay attention to the `>>>` prompt on the last line, we can directly enter the formula or code after this, and press the `enter` key on the keyboard to immediately get the output result on the next line.\n\n````python\n>>> 1+2\n3\n>>> print(\"Hello World\")\nHello World\n>>>\n````\n\nNow it can be understood intuitively, it will read the information we input, perform operation evaluation, output the result, and then wait for our subsequent input, looping this process all the time, which is also **REPL** and translated as ** The reason for the ** of the interactive interpreter is that we can directly interact with the hardware by entering the code. There is no need to perform the compilation process in the middle as in the traditional C language. The information we input is transmitted to the chip without being compiled. Well, this is an important feature of the Python language, and MicroPython perfectly inherits it.\n\nIf you just use the MicroPython REPL, many software with serial port information sending and receiving functions can be operated. If you are interested, you can try various serial port tools, which can give a deeper understanding of the meaning of \"there is no intermediate execution of the compilation process\".\n\n> Regarding the application of REPL, you can refer to [MicroPython documentation: REPL](https://docs.micropython.org/en/latest/reference/repl.html) for more detailed and comprehensive content\n\n## Code editor\n\nOf course, Thonny IDE can not only perform REPL operations, but as a python code editor, it still has its own functions.\n\nCreate a new file and enter the code in its edit field.\n\n````python\nprint(1+2)\nprint(\"Hello World\")\n````\n\nAfter editing the code, click **Save**, you can choose to save the file to the MicroPython device, which will directly transfer the data of the entire file to the flash. The file can be named `main.py`, the device will execute the program with this file name after every power-on or reset, and the other file name is only called by `main.py` or we in Thonny Executed when **Run** is clicked.\n\n![](../assets/images/Quick_Start.png)\n\nNow click **Run**, also without compiling, you will get the result immediately in the Shell.\n\n````\n3\nHello World\n````\n\nIn addition, you can also try the REPL keyboard control shortcut **ctrl+D** software reset, you can see that the program is executed immediately after the reset and the information is printed out."}, "/Leaf_S3_doc/en/Programming/Basic.html": {"title": "", "content": "During construction, the specific routine can be [refer to here](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/tree/main/Example/MicroPython-zh/02.Use_Peripherals)"}, "/Leaf_S3_doc/en/Programming/Environment.html": {"title": "Micropython runtime environment setup", "content": "# Micropython runtime environment setup\n\nThe Micropython operating environment depends on Python, so we need to install Python before using it. The IDE we use here is Thonny.\n\n## Install Python environment\n\nOpen [Python official website](https://www.python.org/).\n\nFor Windows systems, the most convenient way to download the installation package is to click the icon shown in the following figure on the homepage of the official website to download.\n\n![](../assets/images/Micropython_operating_env_1.png)\n\nOther operating systems or other distributions can be selected in the Downloads tab.\n\nIt is recommended to use python 3.7 or later.\n\nBe sure to remember to check Add Python 3.x to PATH when starting the installation, so that you can avoid adding it to the PATH manually.\n\n![](../assets/images/Micropython_operating_env_2.png)\n\nFollow the installation instructions step by step to complete the installation smoothly.\n\n## Install Thonny IDE\n\nTake the specific operation steps of Windows PowerShell as an example.\n\nFor other systems or installation methods, please refer to the instructions on the [Thonny official website](https://thonny.org/).\n\nRight-click the Windows Start menu to see Windows PowerShell, click Open.\n\n![](../assets/images/Micropython_operating_env_3.png)\n\nWe install Thonny IDE via pip here.\n\nPip is a Python package management tool. First, confirm whether pip is the latest version. Use the following command to upgrade pip directly:\n\n```shell\npip install -U pip\n````\n\nInstall Thonny with the following command:\n\n```shell\npip install thonnyapp\n````\n\nIf needed in the future, Thonny can be upgraded with the following command:\n\n```shell\npip install -U thonnyapp\n````\n\nThonny can be found quickly with Windows Search, or in the Start menu bar.\n\n![](../assets/images/Micropython_operating_env_4.png)\n\n## Connect the development board to the computer\n\nConnect the development board to the computer via a USB cable.\n\nThe power indicator on the board will light up when properly connected.\n\nWe need to know whether the development board is recognized by the computer, and find out which COM port is connected to (for serial communication, downloading programs, etc.).\n\nFirst find \"This PC\" on the desktop, right-click, select \"Manage\", open \"Device Manager\", and click \"Ports (COM and LPT)\".\n\nA new COM port will be added to the list (COM21 in the example image).\n\n![](../assets/images/Micropython_operating_env_5.png)\n\n## Burn MicroPython firmware\n\nThe default factory firmware of Leaf-S3 development board is MicroPython. If you need to burn the firmware, you can [refer to here](Firmware.html)\n\n## Configure Thonny IDE\n\nOpen Thonny, click Run, click to select an interpreter:\n\n![](../assets/images/Micropython_operating_env_9.png)\n\nSet the interpreter to MicroPython (ESP32):\n\n![](../assets/images/Micropython_operating_env_10.png)\n\nSelect the COM port of the development board:\n\n![](../assets/images/Micropython_operating_env_11.png)\n\nAfter confirming the settings, the MicroPython REPL is opened in the shell.\n\n![](../assets/images/Micropython_operating_env_12.png)\n\nThe REPL starts and outputs information, which means that the MicroPython firmware is successfully burned and can be used normally.\n\nClick View, check File, you can see the local file directory and the file directory on the development board:\n\n![](../assets/images/Micropython_operating_env_13.png)\n\n![](../assets/images/Micropython_operating_env_14.png)\n\nOther view windows can also be used as required.\n\nYou can choose your favorite theme style in the settings.\n\n![](../assets/images/Micropython_operating_env_15.png)"}, "/Leaf_S3_doc/en/Programming/Firmware.html": {"title": "Micropython firmware download and burning", "content": "# Micropython firmware download and burning\n\nThe firmware supporting ESP32S3 chip can be found on [MicroPython official website](https://micropython.org/) https://micropython.org/download/GENERIC_S3/\n\nAfter clicking the link to enter the page, you can see several firmware download addresses below, select a file with a .bin suffix and download it locally.\n\n![](../assets/images/Micropython_operating_env_6.png)\n\nPay attention to the date marked in the firmware name, the closer to the current time, the newer the function.\n\nYou can use two tools to burn the firmware, Espressif's official FLASH download tool or esptool, you can choose one of the two.\n\n## Set firmware download mode\n\nThere are two methods of operation:\n\n1. Connect to the computer via USB, press and hold the BOOT button, then press the RESET button and release it, and finally release the BOOT button.\n\n2. Press and hold the BOOT button when the power supply is disconnected, then connect to the computer via USB, and finally release the BOOT button.\n\nIt can be seen from this that the chip selects the startup mode when reset or re-powered through the GPIO0 controlled by the BOOT key.\n\nConfirm the COM interface in the device manager. The serial number of the COM interface in the firmware download mode and the normal mode is usually different.\n\n![](../assets/images/Micropython_operating_env_5.png)\n\n## Windows FLASH download tool\n\nDownload and unzip: [FLASH download tool download address](https://www.espressif.com/zh-hans/support/download/other-tools)\n\nOpen the software and select the chip model as ESP32S3, and set the download mode to usb:\n\n![](../assets/images/Micropython_operating_env_7.png)\n\nAt this point, you need to set the development board to firmware download mode.\n\nUnder the condition that the chip is in the firmware download mode, modify the COM interface to the corresponding interface in the FLASH download tool window, here is COM22.\n\nAdd MicroPython firmware, set the flash start address to `0x0000` for ESP32-S3 chip.\n\n![](../assets/images/Micropython_operating_env_8.png)\n\nFirst click the ERASE button to clear the data on the flash, and then click START to burn the firmware to the flash.\n\nAfter the programming is completed, press the RESET button once to make the development board enter the normal use mode.\n\n## esptool\n\nTake the specific operation steps of Windows PowerShell as an example.\n\nInstall esptool with the following command:\n\n```shell\npip install esptool\n````\n\nIf needed in the future, you can upgrade esptool with the following command:\n\n```shell\npip install -U esptool\n````\n\nGo into the directory where the firmware is located in PowerShell via a command or other method.\n\nA PowerShell window can be opened in this folder by holding down the shift key and right-clicking in the Windows folder window.\n\nAt this time, you need to set the development board to firmware download mode, see above for details.\n\nTo clear the flash through the following commands, you need to modify the COM interface to the corresponding interface, here is COM22.\n\n```shell\npython -m esptool --chip esp32s3 --port COM22 erase_flash\n````\n\nTo burn the firmware through the following commands, you need to modify the firmware file name corresponding to the current file name to be burned.\n\n```shell\npython -m esptool --chip esp32s3 --port com22 --baud 460800 --before=default_reset --after=hard_reset write_flash -z 0x0 firmware_name.bin\n````\n\nIf it is burned through USB, press the RESET button once to reset after completion, so that the development board enters the normal use mode.\n\nIf programming via UART, it will reset automatically after completion."}, "/Leaf_S3_doc/en/no_translate.html": {"title": "no translation", "content": "---\ntitle: no translation\nclass: md_page\n---\n\n\n<div id=\"visit_from\"></div>\n<div id=\"no_translate_hint\">This page not translated yet</div>\n<div>\n    <span id=\"visit_hint\">Please visit</span>\n    <a id=\"translate_src\"></a>\n</div>\n\n<div>\n    <script>\n        function getQueryVariable(variable)\n        {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var i=0;i<vars.length;i++) {\n                    var pair = vars[i].split(\"=\");\n                    if(pair[0] == variable){return pair[1];}\n            }\n            return(false);\n        }\n        var ref = getQueryVariable(\"ref\");\n        var from = getQueryVariable(\"from\");\n        var link = document.getElementById(\"translate_src\");\n        var fromDis = document.getElementById(\"visit_from\");\n        link.href = ref;\n        link.text = ref;\n        fromDis.innerHTML = from;\n    </script>\n</div>"}}