{"/Pico_RP2040_doc/zh/index.html": {"title": "【 BPI-Pico-RP2040 开发板 】", "content": "# 【 BPI-Pico-RP2040 开发板 】\n\n## 介绍\n\n![](assets/images/BPI-Pico-RP2040_banner.png)\n\n香蕉派Pico系列是专为物联网设计的低功耗微控制器开发板。\n\nBPI-Pico-RP2040 是 Banana Pi 推出的一款搭载RP2040芯片的微控制器开发板，其最显著的特性是，在尽量保留Raspberry Pi Pico的功能，外形尺寸，引脚布局的前提下，增加一颗板载 WS2812 彩色LED；将 3-Pin DEBUG 接口替换为一个JST SH 1mm 4-Pin 插座，可与 Qwiic & STEMMA QT 或任何可能的外设连接；将micro-USB插座替换为USB Type-C插座，支持正反插，与绝大多数现代智能手机的USB Type-C线通用，无需额外购买。\n\n跳转到 [开箱 BPI-Pico-RP2040 开发板](Unboxing/Introduction.html) 页面查看详情。\n\n## 使用 MicroPython 编程\n\n![](assets/images/Mircopython.png)\n\nMicroPython实现了大部分Python 3 特性和语法，易学易上手，验证程序效果无需编译直接下载进芯片运行。\n\n无论是否有编程基础，MicroPython的上手难度绝对远低于其他编程语言，其代码易读性高，且开源社区有多年积累的丰富资源，就如同Python一样拥有极强的生命力与应用价值。\n\n通过烧写 MicroPython 固件，就可以在开发板中使用 Python 语言进行编程。\n\n## 使用 CircuitPython 编程\n\n![](assets/images/CircuitPython_Repo_header_logo.jpg)\n\nCircuitPython是旨在简化在单片机开发板上进行编程实验和学习的一种编程语言。\n\n配合Mu编辑器进行CircuitPython编程是最低难度的上手方法，安装软件，连接设备即可开始使用。\n\n## 使用 Arduino 编程\n\n![](assets/images/Arduino_logo_1200x350.png)\n\n提供了入门 Arduino 的软件工具和最佳示例，降低进入 ESP32 嵌入式专业开发的门槛。\n\n>Arduino 将不会阐述过多基础内容，请具备 C/C++ 的语言开发基础。\n\n## 参考资源\n\n- [BPI-Pico-RP2040 官方 WIKI](https://wiki.banana-pi.org/BPI-Pico-RP2040_%E5%BC%80%E5%8F%91%E6%9D%BF) \n\n- [GitHub: BPI-Pico-RP2040 开发板原理图PDF](https://github.com/BPI-STEAM/BPI-Pico-RP2040-Doc/blob/main/BPI-Pico-RP2040-V0.2-SCH.pdf) \n\n- [rp2040-datasheet.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf)\n\n- [rp2040-product-brief.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040-product-brief.pdf)\n\n## 样品购买\n\n- [官方速卖通]()\n\n- [官方淘宝]()\n\n- OEM&OEM 定制服务 ： sales@banana-pi.com"}, "/Pico_RP2040_doc/zh/Unboxing/Introduction.html": {"title": "开发板介绍", "content": "# 开发板介绍\n香蕉派Pico系列是专为物联网设计的低功耗微控制器开发板。\n\nBPI-Pico-RP2040是 Banana Pi 推出的一款搭载RP2040芯片的微控制器开发板，其最显著的特性是，在尽量保留Raspberry Pi Pico的功能，外形尺寸，引脚布局的前提下，增加一颗板载 WS2812 彩色LED；将 3-Pin DEBUG 接口替换为一个JST SH 1mm 4-Pin 插座，可与 Qwiic & STEMMA QT 或任何可能的外设连接；将micro-USB插座替换为USB Type-C插座，支持正反插，与绝大多数现代智能手机的USB Type-C线通用，无需额外购买。\n\n## 关键特性\n\n- 双核 ARM Cortex M0+ CPU 内核（高达 133 MHz）\n- 264K SRAM\n- 2MB Flash\n- 26个可用GPIO引脚，其中4个支持ADC模拟输入\n- 外设:\n  - 2 × UART\n  - 2 × SPI 控制器\n  - 2 × I2C 控制器\n  - 16 × PWM 通道\n  - 1 × USB 1.1 控制器和PHY，支持主机和设备\n  - 8 × PIO 状态机\n- 1 × LED\n- 1 × WS2812 LED\n- 1 × JST SH 1mm 4-Pin 插座\n- 1 × USB Type-C插座\n\n## 硬件\n\n### 接口示意图\n\n![](../assets/images/BPI-Pico-RP2040-V0.2-IO.jpg)\n\n### 硬件尺寸\n\n![](../assets/images/BPI-Pico-RP2040-V0.2-dimension.jpg)\n\n<table>\n   <tr>\n      <td>BPI-Pico-RP2040 尺寸表</td>\n   </tr>\n   <tr>\n      <td>管脚间距</td>\n      <td>2.54mm</td>\n   </tr>\n   <tr>\n      <td>安装孔间距</td>\n      <td>17.6mm/ 11.4mm</td>\n   </tr>\n   <tr>\n      <td>安装孔尺寸</td>\n      <td>内径2.1mm/外径3.4mm</td>\n   </tr>\n   <tr>\n      <td>主板尺寸</td>\n      <td>11.4 × 55.8(mm)</td>\n   </tr>\n   <tr>\n      <td>板厚</td>\n      <td>1.2mm</td>\n   </tr>\n</table>\n\n管脚间距兼容万能板（洞洞板、点阵板），面包板，并且能直接贴在其他PCB上，便于调试应用。\n\n\n## 参考资料与资源\n\n- [GitHub: BPI-Pico-RP2040 开发板原理图PDF]() \n\n- [RP2040 技术规格书](https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf)\n\n- [RP2040 技术参考手册](https://datasheets.raspberrypi.com/rp2040/hardware-design-with-rp2040.pdf)\n\n- [rp2040-product-brief.pdf](https://datasheets.raspberrypi.com/rp2040/rp2040-product-brief.pdf)\n\n- [raspberry-pi-pico-python-sdk.pdf](https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf)"}, "/Pico_RP2040_doc/zh/Programming/MicroPython_Gettingstart.html": {"title": "", "content": "## MicroPython 固件下载与烧录\n\n在[MicroPython官网](https://micropython.org/)可以找到支持RP2040芯片的固件，BPI-Pico-RP2040完全兼容Raspberry Pi Pico的固件: https://micropython.org/download/rp2-pico/\n\n点击连接进入页面后即可在下方看到几列固件下载地址，推荐选择下载Releases栏的第一项，兼顾稳定性与新功能特性，后续例程基于v1.19.1固件编写。\n\n![](../assets/images/micropython_env_1.png)\n\nNightly builds 栏所提供的固件为每日构建，将拥有最新的功能特性，但稳定性可能稍差，且可能尚没有对应最新功能的使用文档。\n\n下载完成后将得到一个 .uf2 扩展名的文件，将其烧录到BPI-Pico-RP2040开发板的方式非常简单，先确保有一根type-c数据线，一端连接到PC，拿起开发板，保持上面无任何连线或外围硬件，按住Boot按钮，将type-c数据线与开发板连接，松开Boot按钮，PC的系统中将出现一个名为RPI-RP2的新磁盘，将.uf2文件复制到此盘中，复制完成后开发板将自动复位，进入 MicroPython 模式。\n\n## 安装Thonny IDE \n\n以Windows为例，点击连接下载 [thonny-3.3.13.zip](../assets/images/thonny-3.3.13.zip)，解压后得到`thonny-3.3.13.exe`。\n\n运行`thonny-3.3.13.exe`，按照安装提示逐步操作即可顺利完成安装 。\n\n也可通过pip安装，`pip install thonny==3.3.13`，需要具备[Python](https://www.python.org/)环境，适用于macOS或Linux。\n\n## 建立开发板与Thonny的连接\n\n连接开发板与电脑。\n\n运行Thonny，点击 Run > Select interpreter 。\n![](../assets/images/micropython_env_2.png)\n\n选择 MicroPython(Raspberry Pi Pico) 。\n![](../assets/images/micropython_env_3.png)\n\n选择开发板所在的串行接口，点击OK确认设置。\n![](../assets/images/micropython_env_4.png)\n\n勾选 View > Files 即可打开文件管理栏。\n![](../assets/images/micropython_env_5.png)\n\n## 使用REPL输出Hello World\n\n**REPL**即**Read-Eval-Print-Loop**的缩写名词，译为 **读取-求值-输出-循环**。\n\n我们可以通过实际操作来明白它的意思。\n\n将已经安装了MicroPython固件的开发板连接电脑，运行Thonny IDE并正确配置后，在Shell窗口中将出现这样的文本内容：\n\n```\nMicroPython v1.19.1 on 2022-06-18; Raspberry Pi Pico with RP2040\nType \"help()\" for more information.\n>>> \n```\n\n注意最后一行的`>>>`提示符，我们可以直接在这后面输入算式或是代码，按下键盘`enter`回车键就会立即在下一行得到输出结果。\n\n```python\n>>> 1+2\n3\n>>> print(\"Hello World\")\nHello World\n>>> \n```\n\n现在可以很直观的理解了，它会读取我们输入的信息，执行运算求值，输出结果，然后等待我们后续的输入，一直循环这个过程，这也是**REPL**又被译为**交互式解释器**的原因，我们可以直接通过输入代码来和硬件交互，没有像传统的C语言那样需要在中间执行编译的过程，我们输入的信息没有经过编译就传输给芯片自行解释并运行了，这本就是Python语言的一大重要特性，MicroPython完美继承了它。\n\n如果仅仅是使用MicroPython REPL，很多具有串口信息收发功能的软件都可以操作，感兴趣的话可以试试各种串口工具，这可以令人更深刻的理解 “没有中间执行编译的过程” 的意思。\n\n>关于REPL的应用，更详尽全面的内容可以参考[MicroPython文档：REPL](https://docs.micropython.org/en/latest/reference/repl.html)\n\n## 代码编辑器\n\nThonny IDE当然不仅仅可以进行REPL的操作，作为python代码编辑器，本职功能还是有的。\n\n新建一个文件并在其编辑区内输入代码。\n\n```python\nprint(1+2)\nprint(\"Hello World\")\n```\n\n完成代码编辑后，点击 **Save**，可以选择将文件保存到开发板中，这将直接将整个文件传输到开发板的flash中。可将文件命名为`main.py`，设备会在每次上电或复位后执行它。\n\n![](../assets/images/Quick_Start.png)\n\n现在点击 **Run current script** 运行，同样是无需编译的，在Shell中会立即得到结果。\n\n```\n3\nHello World\n```\n\n另外也可以尝试REPL的键盘控制快捷键**ctrl+D**软件复位，可以看到复位后程序立即执行并打印出信息。\n\n## 点亮LED\n\nBPI-Pico-RP2040上的板载LED连接到GPIO 25引脚，你可以在REPL上点亮它。当你看到REPL提示`>>>`时，请输入以下代码。\n```python\n>>> from machine import Pin\n>>> led = Pin(25, Pin.OUT)\n```\n> `machine`模块用于控制开发板上的硬件。这是所有MicroPython端口的标准配置，你可以在[MicroPython文档：machine](https://docs.micropython.org/en/v1.19.1/library/machine.html)中了解更多有关它的信息。\n\n输入以下代码LED将亮起。\n```python\n>>> led.value(1)\n```\n\n输入以下代码将熄灭LED。\n```python\n>>> led.value(0)\n```\n\n## 使用板载彩灯\n\nBPI-Pico-RP2040上的板载 WS2812 彩灯连接到GPIO 3引脚，它仅需一个信号线即可控制，在REPL中输入以下代码。\n```python\n>>> from machine import Pin\n>>> from neopixel import NeoPixel\n>>> neo = NeoPixel(Pin(3), 1)\n```\n> `neopixel`模块为 WS2812 彩灯提供驱动程序。你可以在[MicroPython文档：neopixel](https://docs.micropython.org/en/v1.19.1/library/neopixel.html)中了解更多有关它的信息。\n输入以下代码，彩灯将亮起红色。\n```python\n>>> neo[0] = (25,0,0)\n>>> neo.write()\n```\n`neo[0] = (25,0,0)`设定第一颗彩灯的颜色。\n\nWS2812 彩灯内有三颗纯色LED，它们的颜色分别是红，绿，蓝，`(25,0,0)`元组中的元素依次对应控制它们的亮度，数值范围 0 ~ 255， 元素的数值越大，它所控制的纯色LED就越亮。\n建议将元素的数值控制在50以下，数值过高时近距离直视会刺眼。\n\n`neo.write()`执行后，芯片会将控制信号传输给这颗板载的 WS2812 彩灯。\n\n你可以尝试自行修改元组中的数据，控制彩灯的颜色，例如继续在REPL中输入以下代码，使彩灯亮白色。\n```python\n>>> neo[0] = (25,25,25)\n>>> neo.write()\n```\n\n## 参考资源\n- [raspberry-pi-pico-python-sdk.pdf](https://datasheets.raspberrypi.com/pico/raspberry-pi-pico-python-sdk.pdf)"}, "/Pico_RP2040_doc/zh/Programming/Arduino_Gettingstart.html": {"title": "", "content": "## Arduino 下载与安装\n\nArduino IDE 下载地址：https://www.arduino.cc/en/software\n\n选择与操作系统对应的版本下载，按照安装提示逐步安装。\n\n## 安装RP2040开发板支持包\n\n以Arduino IDE 2.0.2为例，在Boards Manager的搜索栏中输入`PICO`或`RP2040`，选择`Arduino Mbed OS RP2040 Boards`，单击`Install`安装RP2040开发板支持包，默认安装最新版本即可。\n\n![](../assets/images/arduino_env_1.png)\n\n## 设置板型\n\n在上方选项栏中依次点选 Tools > Boards > Arduino Mbed OS RP2040 Boards > Raspberry Pico。\n\n![](../assets/images/arduino_env_2.png)\n\n## 连接开发板\n\n初次在BPI-Pico-RP2040开发板上使用Arduino，需要手动让开发板进入一次UF2 Bootloader模式，后续通常可免除此步骤。\n\n确保有一根type-c数据线，一端连接到PC，拿起开发板，保持上面无任何连线或外围硬件，按住Boot按钮，将type-c数据线与开发板连接，松开Boot按钮，PC的系统中将出现一个名为RPI-RP2的新磁盘。\n\n## 点亮LED\n在上方选项栏中依次点选 File > Examples > 01.Basics > Blink , 打开 Blink 例程，\n\n![](../assets/images/arduino_env_3.png)\n\n或直接在代码编辑区输入以下代码。\n\n```c\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)\n  delay(1000);                      // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW\n  delay(1000);                      // wait for a second\n}\n\n```\n\n点击 `Upload` 按钮，程序将在编译完成后上传至开发板，板载LED将间隔1秒闪烁。\n\n## 参考资源\n\n- [RP2040 Arduino文档](https://arduino-pico.readthedocs.io/en/latest/)"}}