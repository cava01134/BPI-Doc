{"/Leaf_S3_doc/zh/Arduino/Basic.html": {"title": "板载资源的使用", "content": "# 板载资源的使用\n\n本章主要是通过一些示例项目，阐述 Leaf-S3 主控板的外设基本使用方法，通过下面的项目，您可以进行修改完成您的自己的项目。 \n其中 Leaf-S3 外设主要包括：UART、I2C、SPI、ADC、PWM、DAC等。 \n\n## 开始之前的准备\n\nBPI-Leaf-S3 开发板上的typec使用的是ESP32-S3的原生USB接口，而不是传统的USB转TLL芯片。\n\n为了让您的开发板能正确下载程序，您需要将BPI-Leaf-S3设置为下载模式，有以下两种方法：\n\n- 通过USB连接到电脑，按下BOOT键，再按一下Reset键并松开，最后松开BOOT键。\n\n- 在断开所有供电的状态下，按住BOOT键，然后将开发板插上电脑，最后松开BOOT键。\n\n这时候可以在设备管理器中看到一个多的COM口\n\n![](../assets/images/Device_manager.jpg)\n\n在IDE中选择这个端口\n\n![](../assets/images/Device_manager_1.jpg)\n\n##  项目一 串口实验\n\n在最开始的章节中，我们上传了一个 Blink 闪烁程序来测试板子上的 LED 状态灯。现在，我们使用 UART 串口，每秒打印一次计时数据。\n\n### 所需元件\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### 硬件连接 \n\n此项目不需要其他传感器，所以只需要把Leaf-S3用USB连到电脑就能用。\n\n### 输入代码 \n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 \n\n代码如下:  \n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\nvoid setup() \n{\n  Serial.begin(115200);         //设置串口通信波特率\n} \nvoid loop() \n{\n  static unsigned long i = 0;   //定义变量i\n  Serial.println(i++);          //i加一后输出i\n  delay(1000);                  //延时1秒\n} \n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE 会把代码发送给 Leaf-S3 主板。上传完成之后，你需要按一下复位键，这样代码就能正常运行了\n\n### 实验现象\n\n完成之前步骤的上传后，打开 Arduino IDE 自带的串口监视器，可以看到如下的打印信息： \n\n![](../assets/images/Lesson1-1.png)\n\n## 项目二 PWM(呼吸灯)\n\n呼吸灯，即让 Leaf-S3 通过 PWM 驱动 LED 灯，实现 LED 的亮度渐变，看起来就像是在呼吸一样。关于 PWM 的解释，请阅览知识扩展部分。 \n\n### 所需元件\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\nLED X 1 (建议串联一个电阻限流)\n\n![](../assets/images/led.png)\n\n### 硬件连接\n\n将LED连接到Leaf-S3的GPIO13就可以了，长的那个脚接GPIO13，短的接到GND\n\n### 输入代码 \n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 \n代码如下: \n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n#define LED_CHANNEL_0     0    //设置通道0 \n#define LED_TIMER_13_BIT  13   //设置13位定时器\n#define LED_BASE_FREQ     5000 //设置定时器频率位5000Hz \n#define LED_PIN            13  //设置LED灯 \n\nint brightness = 0;    // LED亮度\nint fadeAmount = 1;    // LED数量\n \n//设置led灯的亮度 \nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255) { \n  //计算占空比 \n  uint32_t duty = (LED_BASE_FREQ / valueMax) * min(value, valueMax); \n  //设置占空比 \n  ledcWrite(LED_CHANNEL_0, duty); \n}  \nvoid setup() { \n  ledcSetup(LED_CHANNEL_0, LED_BASE_FREQ, LED_TIMER_13_BIT);   ledcAttachPin(LED_PIN, LED_CHANNEL_0); \n}  \nvoid loop() { \n  ledcAnalogWrite(brightness);   brightness += fadeAmount; \n \n  if (brightness <= 0 || brightness >= 255) { \n       fadeAmount = -fadeAmount; \n  }   \n  delay(30); \n}\n\n</code></pre>\n</details>\n\n输入完成后，点击“编译”按钮检查代码是否有错误。确定没有错误后可以开始上传了，点击“上传”按钮 。IDE 会把代码发送给 Leaf-S3 主板。上传完成后您就可以看见Type-C旁边的LED 灯开始“呼吸”了！\n现在让我们来回顾一下代码和硬件，看看它是如何工作。\n\n### 知识学习\n\n什么是 PWM 控制信号？ \n\nPWM（pulse-width modulation）脉冲宽度调制，MCU（微控制器）通过对开关器件的通断进行控制，使输出端得到一系列幅值相等的脉冲，用这些脉冲来代替正弦波或所需的波形。如下图所示：\n\n![](../assets/images/Lesson2-1.jpg)\n\n其中，tON 是高电平持续时间，tPWM 是 PWM 波的周期，tPWM-tON 是低电平持续时间，占空比是指高电平持续时间占整个周期的比例，即 D=ton/tPWM 。\n\n### 代码分析\n\nLeaf-S3 的 PWM 比普通的 Arduino UNO 高级的多，设置上不能简单的使用analogWrite 函数来驱动 PWM，而是需要设置 timer 函数，以及相关的频率参数等才能工作。 \n\n```\n#define LEDC_CHANNEL_0     0\n```\n\n定义了定时器使用的通道，Leaf-S3 总共有 16 个通道，这里用的是通道 0。\n\n```\n#define LEDC_TIMER_13_BIT  13\n```\n\n定义了定时器为 13 位定时器，即定时器最大计数为 2 的 13 次方。 \n\n```\n#define LEDC_BASE_FREQ     5000\n```\n\n这是设置定时器的频率，单位是 Hz。接下来的 brightness 和 fadeAmount 参数分别表示 PWM 的占空比和每次变化的数值。 \n\n```\nvoid ledcAnalogWrite(uint32_t value, uint32_t valueMax = 255)\n```\n\n这个函数是计算 PWM 占空比和设置 PWM 占空比，类似 Arduino 的 analogWrite 函数，可以看到，传递参数的最大值是 255，这是为了和 analogWrite 兼容。 \n\n```\nledcSetup(LEDC_CHANNEL_0, LEDC_BASE_FREQ, LEDC_TIMER_13_BIT); \n\t       ledcAttachPin(LED_PIN, LEDC_CHANNEL_0);\n```\n\n这两个函数是 Leaf-S3 定时器设置函数，函数原型及原理这里不讲述，如果您感兴趣可以看看底层源码（源码地址：C:\\Users\\“your-PC”\\AppData\\Local\\Arduino15\\packages\\esp32\\ hardware\\ adafruit_metro_esp32s2 \\0.0.3\\libraries\\ESP32\\），这里只需要知道怎么用这些函数来设置相关的 timer 就可以了。 \n\n关于什么是 PWM 信号，在前面已经阐述过了，这里不再说明。 \n\n>注意：Leaf-S3 的任何引脚都可以配置成 PWM 输出，您可以尝试着修改代码，完成您的项目。\n\n## 项目三 ADC \n\nADC（模数转换器即 A/D 转换器），是指将模拟信号转变成数字信号。Leaf-S3 的ADC 是13位的，最大输出值为 8191，而 Arduino UNO 是 10 位的，最大输出值是 1023，因此，在精度上比Arduino UNO 要高，而且转换速率快，且在使用上兼容 Arduino analogRead 函数，直接读取即可。\n\n### 所需元件 \n\n模拟角度传感器 X 1\n\n![](../assets/images/Lesson3-1.png)\n\n面包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### 硬件连接 \n\n 把 电位计插接到 Leaf-S3 主板上，然后将模拟角度传感器插接到 IO2（实验中用的是IO2）。  元件连接好后，使用 USB 线连接 Leaf-S3 和电脑。 \n\n ### 输入代码\n\n 打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。代码如下: \n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n void setup() { \n  // put your setup code here, to run once: \n  Serial.begin(115200); \n}  \nvoid loop() { \n  // put your main code here, to run repeatedly:   \n  Serial.println(analogRead(2));  \n  delay(100); \n}\n\n</code></pre>\n</details>\n\n 输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后IDE 会把代码发送给 Leaf-S3 主板。上传完成后，打开 Arduino IDE 的串口监视器，旋转模拟角度传感器，可以看到串口监视器中的数值变化，如下图所示：\n\n \n![](../assets/images/Lesson3-3.png)\n\n### 代码分析\n\n由于Leaf-S3 的 ADC 在使用上完全兼容 Arduino，因此这里不再对analogRead 函数进行过多的讲解。 \n \n注意：如果您对 Arduino 的基本函数不是特别熟悉，您可以[点击链接](https://www.arduino.cc/en/Tutorial/BuiltInExamples)进行学习。 \n\n## 项目四 I2C\n\nLeaf-S3 的 I2C 可以配置到任意 I/O 口，您可以通过传递相关参数进行配置。为了方便使用，我们已经将 I2C 进行了默认配置，在使用上完全兼容 Arduino，默认配置引脚可以在第一章简介中查看到。本项目是基于 I2C 默认配置，驱动 OLED 显示屏。 \n\n所需元件\n\nI2C OLED-12864 显示屏 X 1 \n\n![](../assets/images/Lesson4-1.png)\n\n面包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### 硬件连接\n\n把Leaf-S3 主板插到面包板上，然后将 OLED显示屏插接到 I2C 接口。（SDA是33，SCL是34）元件连接好后，使用 USB 线连接 Leaf-S3 和电脑。\n\n### 输入代码 \n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。代码如下:\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n#include <Wire.h> \n   int UG2864Address = 0x3C;//OLED UG2864器件7位地址 \n \nprog_char F8X16[][16] PROGMEM =\n{\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0\n  0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//!1\n  0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//\"2\n  0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//#3\n  0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$4\n  0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//%5\n  0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&6\n  0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//'7\n  0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//(8\n  0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//)9\n  0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//*10\n  0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+11\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//,12\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//-13\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//.14\n  0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,///15\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//016\n  0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//117\n  0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//218\n  0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//319\n  0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//420\n  0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//521\n  0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//622\n  0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//723\n  0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//824\n  0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//925\n  0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//:26\n  0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//;27\n  0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//<28\n  0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//=29\n  0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//>30\n  0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//?31\n  0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@32\n  0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A33\n  0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B34\n  0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C35\n  0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D36\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E37\n  0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F38\n  0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G39\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H40\n  0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I41\n  0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J42\n  0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K43\n  0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L44\n  0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M45\n  0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N46\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O47\n  0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P48\n  0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q49\n  0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R50\n  0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S51\n  0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T52\n  0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U53\n  0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V54\n  0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W55\n  0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X56\n  0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y57\n  0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z58\n  0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[59\n  0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\\60\n  0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//]61\n  0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^62\n  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_63\n  0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//`64\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a65\n  0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b66\n  0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c67\n  0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d68\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e69\n  0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f70\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g71\n  0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h72\n  0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i73\n  0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j74\n  0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k75\n  0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l76\n  0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m77\n  0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n78\n  0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o79\n  0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p80\n  0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q81\n  0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r82\n  0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s83\n  0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t84\n  0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u85\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v86\n  0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w87\n  0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x88\n  0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y89\n  0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z90\n  0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{91\n  0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//|92\n  0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//}93\n  0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~94\n};\n \n \nchar ch_buf[17]={0};\nint RES = 6;//Gadgeteer PIN6\nint DC = 7;//Gadgeteer PIN3\n \nvoid Writec(unsigned char COM)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x00);\n  Wire.write(COM);\n  Wire.endTransmission();\n}\n \nvoid Writed(unsigned char DATA)\n{\n  Wire.beginTransmission(UG2864Address);\n  Wire.write(0x40);\n  Wire.write(DATA);\n  Wire.endTransmission();\n}\n \nvoid SSD1306()\n{\n  Writec(0XAE);//display off\n  Writec(0X00);//set lower column address\n  Writec(0X10);//set higher column address\n  Writec(0X40);//set display start line\n  Writec(0XB0);//set page address\n  Writec(0X81);//set contract control\n  Writec(0XCF);// VCC Generated by Internal DC/DC Circuit\n  Writec(0XA0);//set segment remap  column address 127 is mapped to SEG0\n  Writec(0XA6);//normal / reverse   normal display\n  Writec(0XA8);//multiplex ratio\n  Writec(0X3F);//1/64\n  Writec(0XC0);//Com scan direction remapped mode. Scan from COM[N-1] to COM0\n  Writec(0XD3);//set display offset\n  Writec(0X00);\n  Writec(0XD5);//set osc division\n  Writec(0X80);\n  Writec(0XD9);//set pre-charge period\n  Writec(0X11);\n  Writec(0XDa);//set COM pins\n  Writec(0X12);\n  Writec(0X8d);/*set charge pump enable*/\n  Writec(0X14);\n  Writec(0Xdb);//Set VcomH\n  Writec(0X20);\n  Writec(0XAF);//display ON\n}\nvoid fill(unsigned char dat)\n{\n  unsigned char i,j;\n  \n  Writec(0x00);//set lower column address\n  Writec(0x10);//set higher column address\n  Writec(0xB0);//set page address\n  \n  for(j=0;j<8;j++)\n  {\n    Writec(0xB0+j);//set page address\n    Writec(0x00);//set lower column address\n    Writec(0x10);//set higher column address\n    for(i=0;i<128;i++)\n    {\n      Writed(dat);\n    }\n  }\n}\n \nvoid show_string(unsigned char x,unsigned char y,char *s)\n{\n  unsigned char i,j,lower,higher;\n  char *t;\n  t=s;\n  lower=y%16;\n  higher=y/16;\n  if((x>3) || (y>120))\n    return;\n  Writec(0xB0+x*2);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  for(j=0;*s!='\\0';j++)\n  {\n    \n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n  Writec(0xB0+x*2+1);//set page address\n  Writec(lower);//set lower column address\n  Writec(0x10+higher);//set higher column address\n  s=t;\n  for(j=0;*s!='\\0';j++)\n  {\n    for(i=0;i<8;i++){\n      ch_buf[i] = pgm_read_word(&F8X16[*s-32][i+8]);\n    }\n    for(i=0;i<8;i++)\n      Writed(ch_buf[i]);\n    s++;\n  }\n}\n \n \n \nvoid oled_init(void)\n{\n  pinMode(RES,OUTPUT);//RES\n  pinMode(DC,OUTPUT);//D/C#\n  \n  digitalWrite(DC,LOW);\n  Wire.begin();\n  digitalWrite(RES,HIGH);   delay(100);\n  digitalWrite(RES,LOW);    delay(100);\n  digitalWrite(RES,HIGH);   delay(100);\n  SSD1306();\n  fill(0x00);\n}\n \nvoid setup() {\n  oled_init();\n}\n \n \nvoid loop()\n{\n      fill(0x00);\n      show_string(0,12,\"BananaPi\");\n \n      show_string(2,12,\"banana-pi.org\");\n      while(1);\n}\n\n\n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  \t会把代码发送给 Leaf-S3 主板。上传完成后，OLED 显示屏会显示“BananaPi banana-pi.org”字样。\n\n### 代码分析\n\n本项目的代码相对于前面的项目较多，主要是基于 I2C 通信对 OLED 显示屏底层寄存器的直接驱动。\n\n```\nvoid Writec(unsigned char COM)\n```\n\n设置寄存器函数，通过 I2C 对 OLED 显示屏设置，I2C 使用方法完全兼容 Arduino。 \n\n```\nvoid Writed(unsigned char DATA)\n```\n\n写数据函数，I2C 使用方法完全兼容 Arduino。 \n\n>注意：Leaf-S3 的 I2C 与 Arduino 完全兼容，主要是调用 Wire 库文件使用。\n\n## 项目五 SPI\n\n在很多传感器中，都使用 SPI 通信，因为 SPI 通信速率相对于 I2C 更快，没有地址冲突的弊端。SPI，是  一种高速的、全双工、同步的通信总线，而 Leaf-S3 的 SPI 可以配置到所有 I/O，您可以阅览底层  代码进行使用（初学者不建议使用）。为了更好的使用体验，Leaf-S3 默认情况下配置了IO35、IO36、IO37 为 SPI 口，在使用上则完全兼容 Arduino。 本项目使用 Leaf-S3，通过 SPI 读取 BME280 温湿度传感器的数据，示例中使用的是BME280 库文件，关于 SPI 驱动您可以阅览 BEM280 库文件，[点击链接](https://github.com/DFRobot/DFRobot_BME280)下载 BME280 库文件。 \n\n### 所需元件 \n\nBME280 温湿度传感器 X 1\n\n![](../assets/images/Lesson5-1.png)\n\n>注意：BME280 传感器本身支持 I2C 和 SPI 通信，这里我们采用 SPI 通信。 \n\n面包板 X 1\n\n![](../assets/images/Lesson3-2.png)\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n### 输入代码\n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 （这个程序需要DFRobot_BME280库，需要在[GitHub](https://github.com/DFRobot/DFRobot_BME280)下载，解压到Arduino\\ Library 文件夹下 ）代码如下：\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n/*!\n * read_data_spi.ino\n *\n * Download this demo to test read data from bme280, connect sensor through spi interface\n * Connect cs pin to io 2\n * Data will print on your serial monitor\n *\n * Copyright   [DFRobot](http://www.dfrobot.com), 2016\n * Copyright   GNU Lesser General Public License\n *\n * version  V1.0\n * date  12/03/2019\n */\n\n#include \"DFRobot_BME280.h\"\n#include \"Wire.h\"\n\ntypedef DFRobot_BME280_SPI    BME;    // ******** use abbreviations instead of full names ********\n\n# define PIN_CS   2\n\nBME   bme(&SPI, PIN_CS);   // select TwoWire peripheral and set cs pin id\n\n#define SEA_LEVEL_PRESSURE    1015.0f\n\n// show last sensor operate status\nvoid printLastOperateStatus(BME::eStatus_t eStatus)\n{\n  switch(eStatus) {\n  case BME::eStatusOK:    Serial.println(\"everything ok\"); break;\n  case BME::eStatusErr:   Serial.println(\"unknow error\"); break;\n  case BME::eStatusErrDeviceNotDetected:    Serial.println(\"device not detected\"); break;\n  case BME::eStatusErrParameter:    Serial.println(\"parameter error\"); break;\n  default: Serial.println(\"unknow status\"); break;\n  }\n}\n\nvoid setup()\n{\n  Serial.begin(115200);\n  bme.reset();\n  Serial.println(\"bme read data test\");\n  while(bme.begin() != BME::eStatusOK) {\n    Serial.println(\"bme begin faild\");\n    printLastOperateStatus(bme.lastOperateStatus);\n    delay(2000);\n  }\n  Serial.println(\"bme begin success\");\n  delay(100);\n}\n\nvoid loop()\n{\n  float   temp = bme.getTemperature();\n  uint32_t    press = bme.getPressure();\n  float   alti = bme.calAltitude(SEA_LEVEL_PRESSURE, press);\n  float   humi = bme.getHumidity();\n\n  Serial.println();\n  Serial.println(\"======== start print ========\");\n  Serial.print(\"temperature (unit Celsius): \"); Serial.println(temp);\n  Serial.print(\"pressure (unit pa):         \"); Serial.println(press);\n  Serial.print(\"altitude (unit meter):      \"); Serial.println(alti);\n  Serial.print(\"humidity (unit percent):    \"); Serial.println(humi);\n  Serial.println(\"========  end print  ========\");\n\n  delay(1000);\n}\n\n\n</code></pre>\n</details>\n\n 输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  会把代码发送给 Leaf-S3 主板。打开 Arduino 串口监视器，可以看到打印信息如下： \n\n![](../assets/images/Lesson5-2.png)\n\n### 代码分析\n\n 本项目采用的是 BME280 库文件，在 Item-5.ino 文件中并没有对 SPI 底层进行操作，不过，Leaf  ESP32-S3 的 SPI 使用完全兼容 Arduino。 \n\n## 项目六 WS2812\n\n Leaf-S3 集成了一个型号为WS2812的RGB彩灯。 本项目是点亮 Leaf-S3 的RGB彩灯的实验，\n\n### 所需元件\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n>注意：该项目不需要连接其他传感器。\n\n### 输入代码\n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。 （这个程序需要Adafruit_NeoPixel库，需要在[GitHub](https://github.com/adafruit/Adafruit_NeoPixel)下载，解压到Arduino\\ Library 文件夹下）代码如下:\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n// NeoPixel Ring simple sketch (c) 2013 Shae Erisson\n// Released under the GPLv3 license to match the rest of the\n// Adafruit NeoPixel library\n\n#include <Adafruit_NeoPixel.h>\n#ifdef __AVR__\n #include <avr/power.h> // Required for 16 MHz Adafruit Trinket\n#endif\n\n// Which pin on the Arduino is connected to the NeoPixels?\n#define PIN        18 // On Trinket or Gemma, suggest changing this to 1\n\n// How many NeoPixels are attached to the Arduino?\n#define NUMPIXELS 1 // Popular NeoPixel ring size\n\n// When setting up the NeoPixel library, we tell it how many pixels,\n// and which pin to use to send signals. Note that for older NeoPixel\n// strips you might need to change the third parameter -- see the\n// strandtest example for more information on possible values.\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n\n#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels\n\nvoid setup() {\n  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.\n  // Any other board, you can remove this part (but no harm leaving it):\n#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)\n  clock_prescale_set(clock_div_1);\n#endif\n  // END of Trinket-specific code.\n\n  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)\n}\n\nvoid loop() {\n  pixels.clear(); // Set all pixel colors to 'off'\n\n  // The first NeoPixel in a strand is #0, second is 1, all the way up\n  // to the count of pixels minus one.\n  for(int i=0; i < NUMPIXELS; i++) { // For each pixel...\n\n    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255\n    // Here we're using a moderately bright green color:\n    pixels.setPixelColor(i, pixels.Color(0, 150, 0));\n\n    pixels.show();   // Send the updated pixel colors to the hardware.\n\n    delay(DELAYVAL); // Pause before next pass through loop\n  }\n}\n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  会把代码发送给 Leaf-S3 主板。复位后WS2812灯会开始亮绿灯，\n\n>注意：如果需要其他颜色，可以修改代码中的RGB值。\n\n### 代码分析\n\n本项目使用 Leaf-S3 集成的WS2812灯，默认GPIO是18。\n\n```\n#define PIN        18\n```\n\n设置GPIO引脚号\n\n```\n#define NUMPIXELS 1 \n```\n\n设置灯的个数，如果您想连接更多WS2812，可以换一个IO，并修改灯的数量。 \n\n## 项目七 触摸传感器\n\nLeaf-S3 提供了多达 10 个电容式传感器 GPIO，能够探测由手指或其他物品直接接触或接近而产生的电容差异。这种低噪声特性和电路的高灵敏度设计适用于较小的触摸板，可以直接用于触摸开关。本项目阐述了如何通过Arduino 代码获取 Leaf-S3 的触摸传感器状态，并打印状态。\n\n### 所需元件\n\nLeaf-S3 主板 X 1\n\n![](../assets/images/Leaf-S3.png)\n\n>注意：该项目不需要连接其他传感器。\n\n### 输入代码\n\n打开 Arduino IDE。尽管可以直接复制代码，我们还是建议您自己手动输入代码熟悉下。  \n\n代码如下:\n\n<details>\n<summary>展开查看</summary>\n\n<pre><code>\n void setup() \n{ \n  Serial.begin(115200); \n      delay(1000); // give me time to bring up serial monitor \n      Serial.println(\"Leaf-S3 Touch Test\");    \n}  \nvoid loop(){ \n  Serial.println(touchRead(T2));  // get value using T0->D9  \n  delay(100); \n} \n\n</code></pre>\n</details>\n\n输入完成后，点击“编译”检查代码有无错误。确保没有错误后就可以开始上传了，点击“上传”之后 IDE  会把代码发送给 Leaf-S3 主板。打开 Arduino IDE 串口监视器，并用手触摸 GPIO2（T2 对应的是GPIO2），可以看到会打印出的数据突然变小，如下图所示： \n\n![](../assets/images/Lesson8-1.png)\n\n### 代码分析\n\n获取触摸传感器的 GPIO 状态，只需要调用 touchRead 函数，函数原型如下：\n\n```\n uint16_t touchRead(uint8_t pin)\n```\n\n返回“0”表示没有触摸，“1”表示触摸。其中 pin 是 T0~T9，对应到 Leaf 的引脚如下表所示：\n\n<table>\n   <tr>\n      <td></td>\n   </tr>\n   <tr>\n      <td>触摸传感器序号 </td>\n      <td>对应的 ESP32 硬件 </td>\n      <td>Leaf-S3</td>\n      <td> </td>\n   </tr>\n   <tr>\n      <td>T1</td>\n      <td>GPIO1</td>\n      <td>IO1</td>\n   </tr>\n   <tr>\n      <td>T2 </td>\n      <td>GPIO2 </td>\n      <td>IO2</td>\n   </tr>\n   <tr>\n      <td>T3 </td>\n      <td>GPIO3</td>\n      <td>IO3</td>\n   </tr>\n   <tr>\n      <td>T4 </td>\n      <td>GPIO4</td>\n      <td>IO4</td>\n   </tr>\n   <tr>\n      <td>T5 </td>\n      <td>GPIO5</td>\n      <td>IO5</td>\n   </tr>\n   <tr>\n      <td>T6 </td>\n      <td>GPIO6</td>\n      <td>IO6</td>\n   </tr>\n   <tr>\n      <td>T7 </td>\n      <td>GPIO7</td>\n      <td>IO7</td>\n   </tr>\n   <tr>\n      <td>T8 </td>\n      <td>GPIO8</td>\n      <td>IO8</td>\n   </tr>\n   <tr>\n      <td>T9 </td>\n      <td>GPIO9</td>\n      <td>IO9</td>\n   </tr>\n   <tr>\n      <td>T10</td>\n      <td>GPIO10</td>\n      <td>IO10</td>\n   </tr>\n   <tr>\n      <td>T11</td>\n      <td>GPIO11</td>\n      <td>IO11</td>\n   </tr>\n   <tr>\n      <td>T12</td>\n      <td>GPIO12</td>\n      <td>IO12</td>\n   </tr>\n   <tr>\n      <td>T13</td>\n      <td>GPIO13</td>\n      <td>IO13</td>\n   </tr>\n   <tr>\n      <td>T14</td>\n      <td>GPIO14</td>\n      <td>IO14</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>"}, "/Leaf_S3_doc/zh/Arduino/Environment.html": {"title": "环境搭建", "content": "# 环境搭建\n\n这篇文章将会指引您安装Leaf-S3的Arduino支持。\n![](../assets/images/logo_arduino.png)\n\n> 参考[arduino-esp32 DOC Getting Started » Installing](https://docs.espressif.com/projects/arduino-esp32/en/latest/installing.html)\n\n## 使用Arduino IDE安装支持\n\n这是直接从 Arduino IDE 安装 Arduino-ESP32 的方法。\n\n> 从 Arduino IDE 版本 1.6.4 开始，Arduino 允许使用 Boards Manager（开发板管理器）安装第三方平台包。有适用于 Windows、macOS 和 Linux 的软件包。\n\nArduino IDE 下载地址：https://www.arduino.cc/en/software\n\n> Arduino IDE 2.0与Arduino IDE 1.8.x的UI有些许差异，本文基于1.8.13版本编写，但不影响使用2.0版本的用户参考。\n\n要使用 Boards Managaer（开发板管理器）安装esp32平台包，请执行以下步骤：\n\n- 安装当前上游 Arduino IDE 1.8 或更高版本。\n\n- 启动 Arduino 并打开 File（文件）> Preferences（首选项）窗口，找到Additional Board Manager URLs（附加开发板管理器网址）。\n\n![](../assets/images/install_guide_preferences.png)\n\n- 稳定版链接：\n```\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n```\n- 开发版链接：\n```\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json\n```\n- 在Additional Board Manager URLs后面输入上述发布链接之一。您可以添加多个 URL，一行一个。\n\n![](../assets/images/install_guide_boards_manager_url.png)\n\n从菜单打开 Tools（工具） > Board（开发板）> Board Manager（开发板管理器） 搜索并安装esp32平台。\n\n![](../assets/images/install_guide_boards_manager_esp32.png)\n\n重启arduino IDE之后可以看到在开发板选项中多了ESP32 Arduino选项。\n\n选择 `ESP32S3 Dev Module` 这个型号，再参照下图所示的内容进行配置一遍即可，配置不当是无法使用的，请一定要参照下图所示的内容进行配置！\n\n![](../assets/images/Board_chose.jpg)\n\n# 从GitHub下载或克隆arduino-esp32仓库，手动安装\n\n> 仅限Windows系统。\n> 2022/10/26 master分支已合并BPI-Leaf-S3板型，预计年底更新后可以直接从Board Manager中添加并使用此板形。\n\n- 打开GitHub页面：https://github.com/espressif/arduino-esp32\n- 点击`Code`按钮,点击`Download ZIP`即可用最简单的方式将仓库下载到本地，建议初学者使用此方法。\n![](../assets/images/arduino-esp32_download_zip.png)\n- 也可通过GitHub Desktop或Git克隆master分支到本地。\n  - [安装和配置GitHub Desktop](https://docs.github.com/cn/desktop/installing-and-configuring-github-desktop)\n  - [git 中文手册](https://git-scm.com/book/zh/v2)\n- 解压zip文件到Arduino IDE安装路径的`/hardware/espressif/`路径中，将解压出的文件夹重命名为`esp32`。\n![](../assets/images/arduino-esp32_unzip.png)\n- 打开 `/hardware/espressif/esp32/tools`路径， 并双击运行` get.exe` 。\n![](../assets/images/win-gui-4.png)\n- `get.exe` 完成后，您应该会在目录中看到以下文件。\n![](../assets/images/win-gui-5.png)\n- 重启arduino IDE之后可以看到在开发板选项中多了ESP32 Arduino选项。\n![](../assets/images/arduino-esp32_leaf_s3.png)"}, "/Leaf_S3_doc/zh/index.html": {"title": "【 BPI-Leaf-S3 开发板 】", "content": "# 【 BPI-Leaf-S3 开发板 】\n\n## 介绍\n\n![](assets/images/BPI-Leaf-S3_banner.jpg)\n\n香蕉派Leaf系列是专为物联网设计的低功耗微控制器开发板。\n\nBPI-Leaf-S3板载ESP32-S3芯片，支持 2.4 GHz Wi-Fi 和低功耗蓝牙 (Bluetooth® LE) 双模无线通信，外围兼容低功耗硬件设计，深度睡眠模式下功耗仅为10uA。\n\n## 使用 MicroPython 编程\n\nMicroPython实现了大部分Python 3 特性和语法，易学易上手，验证程序效果无需编译直接下载进芯片运行。\n\n无论是否有编程基础，MicroPython的上手难度绝对远低于其他编程语言，其代码易读性高，且开源社区有多年积累的丰富资源，就如同Python一样拥有极强的生命力与应用价值。\n\n通过烧写 MicroPython 固件，就可以在开发板中使用 Python 语言进行编程。\n\n![](assets/images/Mircopython.png)\n\n## 使用 Arduino 编程\n\n提供了入门 Arduino 的软件工具和最佳示例，降低进入 ESP32 嵌入式专业开发的门槛。\n\n![](assets/images/Arduino_logo_1200x350.png)\n\n>Arduino 将不会阐述过多基础内容，请具备 C/C++ 的语言开发基础。\n\n## 资料与资源\n\n- [官方WIKI](https://wiki.banana-pi.org/BPI-Leaf-S3_%E5%BC%80%E5%8F%91%E6%9D%BF) \n\n- [GitHub: BPI-Leaf-S3 开发板原理图PDF](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/blob/main/sch/BPI-Leaf-S3-Chip-V0.1A.pdf) \n\n- [ESP32-S3 技术规格书](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 技术参考手册](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)\n\n## 样品购买\n\n- [官方速卖通](https://www.aliexpress.com/item/1005004428945296.html?spm=5261.ProductManageOnline.0.0.48af4edfYbyEoI)\n\n- [官方淘宝](https://item.taobao.com/item.htm?spm=a2126o.success.0.0.29034831FGnLQW&id=677287234553)\n\n- OEM&OEM 定制服务 ： sales@banana-pi.com"}, "/Leaf_S3_doc/zh/Unboxing/Introduction.html": {"title": "【 开发板介绍 】", "content": "# 【 开发板介绍 】\n\nBPI-Leaf-S3板载ESP32-S3芯片，支持 2.4 GHz Wi-Fi 和低功耗蓝牙 (Bluetooth® LE) 双模无线通信。板子支持USB和外接3.7V锂电池两种供电方式，可实现双电源下自动切换电源功能，并支持USB充电方式。体积小巧，接口方便，上手简单，可直接应用于物联网低功耗项目。\n\nBPI-Leaf-S3开发板在软件方面支持ESP-IDF、Arduino、MicroPython等多种方式进行编程开发 。\n\nBPI-Leaf-S3开发板上标记了与芯片对应的所有IO管脚，且IO管脚顺序与Espressif ESP32-S3-DevKitC-1开发板一致，开发者可根据实际需求，可将DevKitC-1支持的外围设备添加到BPI-Leaf-S3上，也可将开发板插在面包板上使用。\n\n## 关键特性\n\n- ESP32-S3，Xtensa® 32 bit LX7\n- 片上外设 PSRAM , 片外 FLASH\n- Ultra-low power 10uA\n- 2.4G WIFI ，Bluetooth 5 ，Bluetooth mesh\n- GPIO , ADC , TOUCH , PWM , I2C , SPI , RMT , I2S , UART , LCD，CAMERA ，USB , JTAG\n- 1 * 4pin I2C连接座\n- 1 * USB Type-C\n- 1 * 2pin 电池连接座，支持充电\n- 1 * 全彩色LED\n\n## 硬件\n\n### 接口示意图\n\n![](../assets/images/Leaf-S3_board.png)\n\n### 硬件规格\n\n<table>\n   <tr>\n      <td>BPI-Leaf-S3 规格表</td>\n   </tr>\n   <tr>\n      <td>SoC主控芯片</td>\n      <td>ESP32-S3，Xtensa® 32 位 LX7 双核处理器</td>\n   </tr>\n   <tr>\n      <td>主频</td>\n      <td>240MHz MAX</td>\n   </tr>\n   <tr>\n      <td>工作温度</td>\n      <td>-40℃~+85℃</td>\n   </tr>\n   <tr>\n      <td>片上 ROM</td>\n      <td>384 KB</td>\n   </tr>\n   <tr>\n      <td>片上 SRAM</td>\n      <td>320 KB</td>\n   </tr>\n   <tr>\n      <td>片外 FLASH ROM</td>\n      <td>8MB</td>\n   </tr>\n   <tr>\n      <td>片上外设 PSRAM</td>\n      <td>2MB</td>\n   </tr>\n   <tr>\n      <td>WIFI</td>\n      <td>IEEE 802.11 b/g/n ，2.4Ghz频带，150Mbps</td>\n   </tr>\n   <tr>\n      <td>蓝牙</td>\n      <td>Bluetooth 5 ，Bluetooth mesh</td>\n   </tr>\n   <tr>\n      <td>GPIO</td>\n      <td>BPI-Leaf-S3已引出36个可用GPIO</td>\n   </tr>\n   <tr>\n      <td>ADC</td>\n      <td>2 × 12 位 SAR ADC，支持 20 个模拟通道输入</td>\n   </tr>\n   <tr>\n      <td>TOUCH 电容式触摸传感器</td>\n      <td>14</td>\n   </tr>\n   <tr>\n      <td>SPI</td>\n      <td>4</td>\n   </tr>\n   <tr>\n      <td>I2C</td>\n      <td>2，支持主机或从机模式</td>\n   </tr>\n   <tr>\n      <td>I2S</td>\n      <td>2，串行立体声数据的输入输出</td>\n   </tr>\n   <tr>\n      <td>LCD</td>\n      <td>1，支持 8 位 ~16 位并行 RGB、I8080、MOTO6800 接口</td>\n   </tr>\n   <tr>\n      <td>CAMERA</td>\n      <td>1，支持 8 位 ~16 位 DVP 图像传感器接口</td>\n   </tr>\n   <tr>\n      <td>UART</td>\n      <td>3 ，支持异步通信（RS232 和RS485）和 IrDA</td>\n   </tr>\n   <tr>\n      <td>PWM</td>\n      <td>8 路独立通道，14位精度</td>\n   </tr>\n   <tr>\n      <td>MCPWM</td>\n      <td>2</td>\n   </tr>\n   <tr>\n      <td>USB</td>\n      <td>1 × 全速USB 2.0 OTG，Type-C母口</td>\n   </tr>\n   <tr>\n      <td>USB Serial/JTAG 控制器</td>\n      <td>1，USB 全速标准，CDC-ACM ，JTAG</td>\n   </tr>\n   <tr>\n      <td>温度传感器</td>\n      <td>1，测量范围为–20 °C 到 110 °C，用于监测芯片内部温度</td>\n   </tr>\n   <tr>\n      <td>SD/MMC</td>\n      <td>1 × SDIO主机接口，具有2个卡槽，支持SD卡3.0和3.01，SDIO 3.0，CE-ATA 1.1，MMC 4.41，eMMC 4.5和4.51</td>\n   </tr>\n   <tr>\n      <td>TWAI® 控制器</td>\n      <td>1 ，兼容 ISO11898-1（CAN 规范 2.0）</td>\n   </tr>\n   <tr>\n      <td>通用 DMA 控制器</td>\n      <td>5 个接收通道和 5 个发送通道</td>\n   </tr>\n   <tr>\n      <td>RMT</td>\n      <td>4 通道发射，4通道接收，共享 384 x 32-bit 的 RAM</td>\n   </tr>\n   <tr>\n      <td>脉冲计数器</td>\n      <td>4个脉冲计数控制器（单元），每个单元有2个独立的通道</td>\n   </tr>\n   <tr>\n      <td>定时器</td>\n      <td>4 × 54 位通用定时器，16 位时钟预分频器，1 × 52 位系统定时器，3 × 看门狗定时器</td>\n   </tr>\n   <tr>\n      <td>外部晶振</td>\n      <td>40Mhz</td>\n   </tr>\n   <tr>\n      <td>RTC 和低功耗管理</td>\n      <td>电源管理单元 (PMU)+ 超低功耗协处理器 (ULP)</td>\n   </tr>\n   <tr>\n      <td>低功耗电流</td>\n      <td>10uA</td>\n   </tr>\n   <tr>\n      <td>工作电压</td>\n      <td>3.3V</td>\n   </tr>\n   <tr>\n      <td>输入电压</td>\n      <td>3.3V~5.5V</td>\n   </tr>\n   <tr>\n      <td>最大放电电流</td>\n      <td>2A@3.3V DC/DC</td>\n   </tr>\n   <tr>\n      <td>USB充电</td>\n      <td>支持</td>\n   </tr>\n   <tr>\n      <td>最大充电电流</td>\n      <td>500mA</td>\n   </tr>\n   <tr>\n      <td>可控全彩色LED</td>\n      <td>1</td>\n   </tr>\n</table>\n\n\n### 硬件尺寸\n\n\n![](../assets/images/Leaf-S3_board_dimension.png)\n\n<table>\n   <tr>\n      <td>BPI-Leaf-S3 尺寸表</td>\n   </tr>\n   <tr>\n      <td>管脚间距</td>\n      <td>2.54mm</td>\n   </tr>\n   <tr>\n      <td>安装孔间距</td>\n      <td>23mm/ 62.25mm</td>\n   </tr>\n   <tr>\n      <td>安装孔尺寸</td>\n      <td>内径2mm/外径3mm</td>\n   </tr>\n   <tr>\n      <td>主板尺寸</td>\n      <td>26 × 65.25(mm)/1.02 x 2.57(inches)</td>\n   </tr>\n   <tr>\n      <td>板厚</td>\n      <td>1.2mm</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n管脚间距兼容万能板（洞洞板、点阵板），面包板，便于调试应用。\n\n## 资料与资源\n\n- [GitHub: BPI-Leaf-S3 开发板原理图PDF](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/blob/main/sch/BPI-Leaf-S3-Chip-V0.1A.pdf) \n\n- [ESP32-S3 技术规格书](https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_cn.pdf)\n\n- [ESP32-S3 技术参考手册](https://www.espressif.com/sites/default/files/documentation/esp32-s3_technical_reference_manual_cn.pdf)"}, "/Leaf_S3_doc/zh/Unboxing/Gettingstart.html": {"title": "Hello World", "content": "# Hello World\n\n我们可以从输出一段“Hello World”文字开始，以此作为了解和学习MicroPython的第一步。\n\n> 本文所述操作基于Thonny IDE，需要先完成对Thonny IDE的配置，与开发板建立连接。[Thonny IDE运行环境搭建可以参考这里](../Programming/Environment.html)。\n\n## 使用REPL\n\n**REPL**即**Read-Eval-Print-Loop**的缩写名词，译为 **读取-求值-输出-循环**。\n\n我们可以通过实际操作来明白它的意思。\n\n将已经安装了MicroPython固件的开发板连接电脑，运行Thonny IDE并正确配置后，在Shell窗口中将出现这样的文本内容：\n\n```\nMicroPython v1.17 on 2022-01-09; ESP32S3 module with ESP32S3\nType \"help()\" for more information.\n>>> \n```\n\n注意最后一行的`>>>`提示符，我们可以直接在这后面输入算式或是代码，按下键盘`enter`回车键就会立即在下一行得到输出结果。\n\n```python\n>>> 1+2\n3\n>>> print(\"Hello World\")\nHello World\n>>> \n```\n\n现在可以很直观的理解了，它会读取我们输入的信息，执行运算求值，输出结果，然后等待我们后续的输入，一直循环这个过程，这也是**REPL**又被译为**交互式解释器**的原因，我们可以直接通过输入代码来和硬件交互，没有像传统的C语言那样需要在中间执行编译的过程，我们输入的信息没有经过编译就传输给芯片自行解释并运行了，这本是Python语言的一大重要特性，MicroPython完美继承了它。\n\n如果仅仅是使用MicroPython REPL，很多具有串口信息收发功能的软件都可以操作，感兴趣的话可以试试各种串口工具，这可以令人更深刻的理解 “没有中间执行编译的过程” 的意思。\n\n>关于REPL的应用，更详尽全面的内容可以参考[MicroPython文档：REPL](https://docs.micropython.org/en/latest/reference/repl.html)\n\n## 代码编辑器\n\nThonny IDE当然不仅仅可以进行REPL的操作，作为python代码编辑器，本职功能还是有的。\n\n新建一个文件并在其编辑区内输入代码。\n\n```python\nprint(1+2)\nprint(\"Hello World\")\n```\n\n完成代码编辑后，点击**保存**，可以选择将文件保存到MicroPython设备中，这将直接将整个文件的数据传输到flash中。可将文件命名为`main.py`，设备会在每次上电或复位后执行有这个文件名的程序，而其他名称的文件仅在被`main.py`调用时或是我们在Thonny中点击**运行**时被执行。\n\n![](../assets/images/Quick_Start.png)\n\n现在点击**运行**，同样是无需编译的，在Shell中会立即得到结果。\n\n```\n3\nHello World\n```\n\n另外也可以尝试REPL的键盘控制快捷键**ctrl+D**软件复位，可以看到复位后程序立即执行并打印出信息。"}, "/Leaf_S3_doc/zh/Programming/Basic.html": {"title": "", "content": "施工中，具体例程可以[参考这里](https://github.com/BPI-STEAM/BPI-Leaf-S3-Doc/tree/main/Example/MicroPython-zh/02.Use_Peripherals)"}, "/Leaf_S3_doc/zh/Programming/Environment.html": {"title": "Micropython 运行环境搭建", "content": "# Micropython 运行环境搭建\n\nMicropython运行环境依赖于Python，所以在使用前我们需要先安装Python，这里我们使用的IDE是Thonny。\n\n## 安装Python环境\n\n打开[Python官网](https://www.python.org/) 。\n\n对于Windows 系统来说，最便捷的安装包下载方法就是在官网首页点击如下图所示的图标进行下载。\n\n![](../assets/images/Micropython_operating_env_1.png)\n\n其他操作系统或是其他发行版本则可以在 Downloads 选项栏中进行选择。\n\n建议使用python 3.7以上的版本。\n\n开始安装时一定要记得勾选Add Python 3.x to PATH，这样可以免除再手动添加进PATH。\n\n![](../assets/images/Micropython_operating_env_2.png)\n\n按照安装提示逐步操作即可顺利完成安装 。\n\n## 安装Thonny IDE\n\n以Windows PowerShell的具体操作步骤为例。\n\n其他系统或安装方法可参考[Thonny官网](https://thonny.org/)上的说明。\n\n右键Windows开始菜单即可看到Windows PowerShell ，单击打开。\n\n![](../assets/images/Micropython_operating_env_3.png)\n\n我们在此处通过pip来安装Thonny IDE。\n\npip是 Python 包管理工具，首先要确认pip是否是最新版，直接使用以下命令升级pip：\n\n```shell\npip install -U pip\n```\n\n使用以下命令安装Thonny：\n\n```shell\npip install thonnyapp\n```\n\n如果未来有需要，则可以使用以下命令升级Thonny：\n\n```shell\npip install -U thonnyapp\n```\n\n用Windows搜索即可快速找到Thonny，也可以在开始菜单栏里找到它。\n\n![](../assets/images/Micropython_operating_env_4.png)\n\n## 连接开发板至电脑\n\n将开发板通过USB数据线连接至电脑。\n\n正确连接时开发板的电源指示灯会亮起。\n\n我们需要知道开发板是否被电脑识别，并找出连接到了哪一个 COM 口（用于串口通信，下载程序等）。\n\n首先在桌面找到“此电脑”,右键，选择“管理”，打开“设备管理器”，点开“端口（COM 和 LPT）”。\n\n此时会在列表中新加入一个 COM 口（示例图中是 COM21）。\n\n![](../assets/images/Micropython_operating_env_5.png)\n\n## 烧录MicroPython固件\n\nLeaf-S3开发板默认出厂固件是MicroPython，如果您需要烧录固件，可以[参考这里](Firmware.html)\n\n## 配置Thonny IDE\n\n打开Thonny，单击 运行，单击 选择解释器：\n\n![](../assets/images/Micropython_operating_env_9.png)\n\n将解释器设置为 MicroPython(ESP32)：\n\n![](../assets/images/Micropython_operating_env_10.png)\n\n选择开发板的COM口：\n\n![](../assets/images/Micropython_operating_env_11.png)\n\n确认设置后，就在Shell中打开了MicroPython REPL。\n\n![](../assets/images/Micropython_operating_env_12.png)\n\nREPL启动并输出信息即意味着MicroPython固件烧录成功，可以开始正常使用了。\n\n单击 视图，勾选 文件，即可看到本地文件目录和开发板上的文件目录：\n\n![](../assets/images/Micropython_operating_env_13.png)\n\n![](../assets/images/Micropython_operating_env_14.png)\n\n其他视图窗口也可按需设置使用。\n\n在设置中可以选择个人喜欢的主题风格。\n\n![](../assets/images/Micropython_operating_env_15.png)"}, "/Leaf_S3_doc/zh/Programming/Firmware.html": {"title": "Micropython 固件下载与烧录", "content": "# Micropython 固件下载与烧录\n\n在[MicroPython官网](https://micropython.org/)可以找到支持ESP32S3芯片的固件 https://micropython.org/download/GENERIC_S3/\n\n点击连接进入页面后即可在下方看到几个固件的下载地址，选择一个.bin 后缀的文件下载到本地即可。\n\n![](../assets/images/Micropython_operating_env_6.png)\n\n注意固件名中标注的日期，离当前时间越近的功能越新。\n\n可以用两种工具来烧录固件，乐鑫科技官方的FLASH下载工具或esptool ，二选其一即可。\n\n## 设置固件下载模式\n\n有两种操作方法：\n\n1.通过USB连接到电脑，按住BOOT键，再按一下RESET键并松开，最后松开BOOT键。\n\n2.在断开供电的条件下按住BOOT键，再通过USB连接到电脑，最后松开BOOT键。\n\n由此可知，芯片是通过BOOT键所控制的GPIO0来选择复位或重新上电时的启动模式。\n\n在设备管理器中确认COM接口，固件下载模式与普通模式下的com接口序号通常是不一样的。\n\n![](../assets/images/Micropython_operating_env_5.png)\n\n## Windows FLASH下载工具\n\n下载并解压：[FLASH下载工具下载地址](https://www.espressif.com/zh-hans/support/download/other-tools)\n\n打开软件并选择芯片型号为ESP32S3,将下载模式设置为usb：\n\n![](../assets/images/Micropython_operating_env_7.png)\n\n此时需要设置开发板为固件下载模式。\n\n在芯片处于固件下载模式的条件下，在FLASH下载工具窗口中修改COM接口为对应的接口，此处为COM22。\n\n添加MicroPython固件，对于ESP32-S3芯片要设置flash起始地址为 `0x0000` 。\n\n![](../assets/images/Micropython_operating_env_8.png)\n\n先点击ERASE按钮清除flash上的数据，再点击START烧写固件到flash中。\n\n烧录完成后按一次RESET键，使开发板进入普通使用模式。\n\n## esptool\n\n以Windows PowerShell的具体操作步骤为例。\n\n使用以下命令安装esptool：\n\n```shell\npip install esptool\n```\n\n如果未来有需要，则可以使用以下命令升级esptool：\n\n```shell\npip install -U esptool\n```\n\n通过命令或其他方法在PowerShell中进入固件所在的目录。\n\n可以在Windows文件夹窗口中以按住shift键再单击右键的方式在此文件夹中打开PowerShell窗口。\n\n此时需要设置开发板为固件下载模式，详见上文。\n\n通过以下命令清除flash，需要修改COM接口为对应的接口，此处为COM22。\n\n```shell\npython -m esptool --chip esp32s3 --port COM22 erase_flash\n```\n\n通过以下命令烧录固件，需要修改固件文件名为当前对应需要烧录的文件名。\n\n```shell\npython -m esptool --chip esp32s3 --port com22 --baud 460800 --before=default_reset --after=hard_reset write_flash -z 0x0 firmware_name.bin\n```\n\n如果是通过USB烧录，完成后按一次RESET键复位，使开发板进入普通使用模式。\n\n如果是通过UART烧录，则会在完成后自动复位。"}}